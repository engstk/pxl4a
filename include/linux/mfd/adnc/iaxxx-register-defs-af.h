/*
 * iaxxx-register-defs-af.h
 *
 * Copyright (c) 2018 Knowles, inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 and
 * only version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

/**********************************************************
 * This file is generated by running a format script
 * on header files shared by Firmware.
 *
 * DO NOT EDIT.
 *
 *********************************************************/
#ifndef __IAXXX_REGISTER_DEFS_AF_H__
#define __IAXXX_REGISTER_DEFS_AF_H__

/*** The base address for this set of registers ***/
#define IAXXX_AF_REGS_ADDR (0x40000000)

/*** AF_LS_ENAB (0x40000000) ***/
/*
 * Master Enable Bits for Logical Streams.  When enabled, the logical stream
 * can request service via deadline scheduling, and can pass audio samples.
 */
#define IAXXX_AF_LS_ENAB_ADDR (0x40000000)
#define IAXXX_AF_LS_ENAB_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_ENAB_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_ENAB_WMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_ENAB_RESET_VAL 0x00000000

/*
 * Master Enable for Logical Stream 0.
 */
#define IAXXX_AF_LS_ENAB_E_0_MASK 0x00000001
#define IAXXX_AF_LS_ENAB_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_0_POS 0
#define IAXXX_AF_LS_ENAB_E_0_SIZE 1

/*
 * Master Enable for Logical Stream 1.
 */
#define IAXXX_AF_LS_ENAB_E_1_MASK 0x00000002
#define IAXXX_AF_LS_ENAB_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_1_POS 1
#define IAXXX_AF_LS_ENAB_E_1_SIZE 1

/*
 * Master Enable for Logical Stream 2.
 */
#define IAXXX_AF_LS_ENAB_E_2_MASK 0x00000004
#define IAXXX_AF_LS_ENAB_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_2_POS 2
#define IAXXX_AF_LS_ENAB_E_2_SIZE 1

/*
 * Master Enable for Logical Stream 3.
 */
#define IAXXX_AF_LS_ENAB_E_3_MASK 0x00000008
#define IAXXX_AF_LS_ENAB_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_3_POS 3
#define IAXXX_AF_LS_ENAB_E_3_SIZE 1

/*
 * Master Enable for Logical Stream 4.
 */
#define IAXXX_AF_LS_ENAB_E_4_MASK 0x00000010
#define IAXXX_AF_LS_ENAB_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_4_POS 4
#define IAXXX_AF_LS_ENAB_E_4_SIZE 1

/*
 * Master Enable for Logical Stream 5.
 */
#define IAXXX_AF_LS_ENAB_E_5_MASK 0x00000020
#define IAXXX_AF_LS_ENAB_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_5_POS 5
#define IAXXX_AF_LS_ENAB_E_5_SIZE 1

/*
 * Master Enable for Logical Stream 6.
 */
#define IAXXX_AF_LS_ENAB_E_6_MASK 0x00000040
#define IAXXX_AF_LS_ENAB_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_6_POS 6
#define IAXXX_AF_LS_ENAB_E_6_SIZE 1

/*
 * Master Enable for Logical Stream 7.
 */
#define IAXXX_AF_LS_ENAB_E_7_MASK 0x00000080
#define IAXXX_AF_LS_ENAB_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_7_POS 7
#define IAXXX_AF_LS_ENAB_E_7_SIZE 1

/*
 * Master Enable for Logical Stream 8.
 */
#define IAXXX_AF_LS_ENAB_E_8_MASK 0x00000100
#define IAXXX_AF_LS_ENAB_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_8_POS 8
#define IAXXX_AF_LS_ENAB_E_8_SIZE 1

/*
 * Master Enable for Logical Stream 9.
 */
#define IAXXX_AF_LS_ENAB_E_9_MASK 0x00000200
#define IAXXX_AF_LS_ENAB_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_9_POS 9
#define IAXXX_AF_LS_ENAB_E_9_SIZE 1

/*
 * Master Enable for Logical Stream 10.
 */
#define IAXXX_AF_LS_ENAB_E_10_MASK 0x00000400
#define IAXXX_AF_LS_ENAB_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_10_POS 10
#define IAXXX_AF_LS_ENAB_E_10_SIZE 1

/*
 * Master Enable for Logical Stream 11.
 */
#define IAXXX_AF_LS_ENAB_E_11_MASK 0x00000800
#define IAXXX_AF_LS_ENAB_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_11_POS 11
#define IAXXX_AF_LS_ENAB_E_11_SIZE 1

/*
 * Master Enable for Logical Stream 12.
 */
#define IAXXX_AF_LS_ENAB_E_12_MASK 0x00001000
#define IAXXX_AF_LS_ENAB_E_12_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_12_POS 12
#define IAXXX_AF_LS_ENAB_E_12_SIZE 1

/*
 * Master Enable for Logical Stream 13.
 */
#define IAXXX_AF_LS_ENAB_E_13_MASK 0x00002000
#define IAXXX_AF_LS_ENAB_E_13_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_13_POS 13
#define IAXXX_AF_LS_ENAB_E_13_SIZE 1

/*
 * Master Enable for Logical Stream 14.
 */
#define IAXXX_AF_LS_ENAB_E_14_MASK 0x00004000
#define IAXXX_AF_LS_ENAB_E_14_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_14_POS 14
#define IAXXX_AF_LS_ENAB_E_14_SIZE 1

/*
 * Master Enable for Logical Stream 15.
 */
#define IAXXX_AF_LS_ENAB_E_15_MASK 0x00008000
#define IAXXX_AF_LS_ENAB_E_15_RESET_VAL 0x0
#define IAXXX_AF_LS_ENAB_E_15_POS 15
#define IAXXX_AF_LS_ENAB_E_15_SIZE 1

/*** AF_LS_DMA (0x40000004) ***/
/*
 * DMA Enable Bits for Logical Streams.  When enabled, the logical stream can
 * request service via DMA hardware interface.  Otherwise, it'll do so via
 * deadline scheduler.
 */
#define IAXXX_AF_LS_DMA_ADDR (0x40000004)
#define IAXXX_AF_LS_DMA_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_DMA_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_DMA_WMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_DMA_RESET_VAL 0x00000000

/*
 * DMA Enable for Logical Stream 0.
 */
#define IAXXX_AF_LS_DMA_E_0_MASK 0x00000001
#define IAXXX_AF_LS_DMA_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_0_POS 0
#define IAXXX_AF_LS_DMA_E_0_SIZE 1

/*
 * DMA Enable for Logical Stream 1.
 */
#define IAXXX_AF_LS_DMA_E_1_MASK 0x00000002
#define IAXXX_AF_LS_DMA_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_1_POS 1
#define IAXXX_AF_LS_DMA_E_1_SIZE 1

/*
 * DMA Enable for Logical Stream 2.
 */
#define IAXXX_AF_LS_DMA_E_2_MASK 0x00000004
#define IAXXX_AF_LS_DMA_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_2_POS 2
#define IAXXX_AF_LS_DMA_E_2_SIZE 1

/*
 * DMA Enable for Logical Stream 3.
 */
#define IAXXX_AF_LS_DMA_E_3_MASK 0x00000008
#define IAXXX_AF_LS_DMA_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_3_POS 3
#define IAXXX_AF_LS_DMA_E_3_SIZE 1

/*
 * DMA Enable for Logical Stream 4.
 */
#define IAXXX_AF_LS_DMA_E_4_MASK 0x00000010
#define IAXXX_AF_LS_DMA_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_4_POS 4
#define IAXXX_AF_LS_DMA_E_4_SIZE 1

/*
 * DMA Enable for Logical Stream 5.
 */
#define IAXXX_AF_LS_DMA_E_5_MASK 0x00000020
#define IAXXX_AF_LS_DMA_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_5_POS 5
#define IAXXX_AF_LS_DMA_E_5_SIZE 1

/*
 * DMA Enable for Logical Stream 6.
 */
#define IAXXX_AF_LS_DMA_E_6_MASK 0x00000040
#define IAXXX_AF_LS_DMA_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_6_POS 6
#define IAXXX_AF_LS_DMA_E_6_SIZE 1

/*
 * DMA Enable for Logical Stream 7.
 */
#define IAXXX_AF_LS_DMA_E_7_MASK 0x00000080
#define IAXXX_AF_LS_DMA_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_7_POS 7
#define IAXXX_AF_LS_DMA_E_7_SIZE 1

/*
 * DMA Enable for Logical Stream 8.
 */
#define IAXXX_AF_LS_DMA_E_8_MASK 0x00000100
#define IAXXX_AF_LS_DMA_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_8_POS 8
#define IAXXX_AF_LS_DMA_E_8_SIZE 1

/*
 * DMA Enable for Logical Stream 9.
 */
#define IAXXX_AF_LS_DMA_E_9_MASK 0x00000200
#define IAXXX_AF_LS_DMA_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_9_POS 9
#define IAXXX_AF_LS_DMA_E_9_SIZE 1

/*
 * DMA Enable for Logical Stream 10.
 */
#define IAXXX_AF_LS_DMA_E_10_MASK 0x00000400
#define IAXXX_AF_LS_DMA_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_10_POS 10
#define IAXXX_AF_LS_DMA_E_10_SIZE 1

/*
 * DMA Enable for Logical Stream 11.
 */
#define IAXXX_AF_LS_DMA_E_11_MASK 0x00000800
#define IAXXX_AF_LS_DMA_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_11_POS 11
#define IAXXX_AF_LS_DMA_E_11_SIZE 1

/*
 * DMA Enable for Logical Stream 12.
 */
#define IAXXX_AF_LS_DMA_E_12_MASK 0x00001000
#define IAXXX_AF_LS_DMA_E_12_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_12_POS 12
#define IAXXX_AF_LS_DMA_E_12_SIZE 1

/*
 * DMA Enable for Logical Stream 13.
 */
#define IAXXX_AF_LS_DMA_E_13_MASK 0x00002000
#define IAXXX_AF_LS_DMA_E_13_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_13_POS 13
#define IAXXX_AF_LS_DMA_E_13_SIZE 1

/*
 * DMA Enable for Logical Stream 14.
 */
#define IAXXX_AF_LS_DMA_E_14_MASK 0x00004000
#define IAXXX_AF_LS_DMA_E_14_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_14_POS 14
#define IAXXX_AF_LS_DMA_E_14_SIZE 1

/*
 * DMA Enable for Logical Stream 15.
 */
#define IAXXX_AF_LS_DMA_E_15_MASK 0x00008000
#define IAXXX_AF_LS_DMA_E_15_RESET_VAL 0x0
#define IAXXX_AF_LS_DMA_E_15_POS 15
#define IAXXX_AF_LS_DMA_E_15_SIZE 1

/*** AF_MISC_CTRL (0x40000008) ***/
/*
 * This register is used for Miscellaneous General Control.
 */
#define IAXXX_AF_MISC_CTRL_ADDR (0x40000008)
#define IAXXX_AF_MISC_CTRL_MASK_VAL 0x000001ff
#define IAXXX_AF_MISC_CTRL_RMASK_VAL 0x000001ff
#define IAXXX_AF_MISC_CTRL_WMASK_VAL 0x000001ff
#define IAXXX_AF_MISC_CTRL_RESET_VAL 0x00000148

/*
 * The deadline scheduler's deadline time counter normally increments at
 * 3.072 MHz.  This bit, when set, causes this counter to increment on every
 * Audio Fabric (AF) clock.  When the AF clock frequency is 3.072 MHz or
 * slower, this bit must be set for proper deadline scheduler function.
 */
#define IAXXX_AF_MISC_CTRL_CPT_ALWAYS_INC_MASK 0x00000001
#define IAXXX_AF_MISC_CTRL_CPT_ALWAYS_INC_RESET_VAL 0x0
#define IAXXX_AF_MISC_CTRL_CPT_ALWAYS_INC_POS 0
#define IAXXX_AF_MISC_CTRL_CPT_ALWAYS_INC_SIZE 1

/*
 * Priority of Boss XLMI accesses.  Lower value has higher priority.  Value
 * of 3 is illegal.  If multiple priorities are the same, BOSS wins the ties.
 */
#define IAXXX_AF_MISC_CTRL_BOSS_PRI_MASK 0x00000006
#define IAXXX_AF_MISC_CTRL_BOSS_PRI_RESET_VAL 0x0
#define IAXXX_AF_MISC_CTRL_BOSS_PRI_POS 1
#define IAXXX_AF_MISC_CTRL_BOSS_PRI_SIZE 2

/*
 * Priority of SSP XLMI accesses.  Lower value has higher priority.  Value of
 * 3 is illegal.  If multiple priorities are the same, BOSS wins the ties,
 * then SSP.
 */
#define IAXXX_AF_MISC_CTRL_SSP_PRI_MASK 0x00000018
#define IAXXX_AF_MISC_CTRL_SSP_PRI_RESET_VAL 0x1
#define IAXXX_AF_MISC_CTRL_SSP_PRI_POS 3
#define IAXXX_AF_MISC_CTRL_SSP_PRI_SIZE 2

/*
 * Priority of SYS XLMI accesses.  Lower value has higher priority.  Value of
 * 3 is illegal.  If multiple priorities are the same, BOSS wins the ties,
 * then SSP, then SYS.  The SYS XLMI access refer to accesses from the
 * AHB2XLMI bridge.
 */
#define IAXXX_AF_MISC_CTRL_SYS_PRI_MASK 0x00000060
#define IAXXX_AF_MISC_CTRL_SYS_PRI_RESET_VAL 0x2
#define IAXXX_AF_MISC_CTRL_SYS_PRI_POS 5
#define IAXXX_AF_MISC_CTRL_SYS_PRI_SIZE 2

/*
 * If set, the TIEQ will always present as empty and software should use the
 * dls interrupt to flag deadline scheduler winner.  Note that if it set, we
 * will NOT clock gate the tieq clock (which happens to be the SSP clock).  A
 * disabled TIEQ should not affect the SSP clock..
 */
#define IAXXX_AF_MISC_CTRL_DISABLE_TIEQ_MASK 0x00000080
#define IAXXX_AF_MISC_CTRL_DISABLE_TIEQ_RESET_VAL 0x0
#define IAXXX_AF_MISC_CTRL_DISABLE_TIEQ_POS 7
#define IAXXX_AF_MISC_CTRL_DISABLE_TIEQ_SIZE 1

/*
 * If set, and if the TIEQ is enabled (see DISABLE_TIEQ), the processor TIEQ
 * clock will be clock gated such that there is no TIEQ clock when the TIEQ
 * is empty.  In the current chip, the processor with TIEQ is the SSP.
 */
#define IAXXX_AF_MISC_CTRL_ALLOW_TIEQ_CLK_GATING_MASK 0x00000100
#define IAXXX_AF_MISC_CTRL_ALLOW_TIEQ_CLK_GATING_RESET_VAL 0x1
#define IAXXX_AF_MISC_CTRL_ALLOW_TIEQ_CLK_GATING_POS 8
#define IAXXX_AF_MISC_CTRL_ALLOW_TIEQ_CLK_GATING_SIZE 1

/*** AF_LS_MAP_0 (0x4000000c) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 0.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_0_ADDR (0x4000000c)
#define IAXXX_AF_LS_MAP_0_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_0_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_0_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_0_RESET_VAL 0x0000b000

/*
 * Physical Stream Number mapped to Logical Stream 0.
 * PCM RX      : 0
 * SSMM RX     : 0-11
 * CIC Combo RX: 0-7
 * SWRM0 RX     : 0-7
 * SWRM1 RX     : 0-7
 * SWRM2 RX     : 0-7
 * PCM TX      : 16
 * SSMM TX     : 16-27
 * CIC Combo TX: 16-17
 * SWRM0 TX     : 16-23 (NOT USED IN D4100s)
 * SWRM1 TX     : 16-23 (NOT USED IN D4100s)
 * SWRM2 TX     : 16-23 (NOT USED IN D4100s)
 */
#define IAXXX_AF_LS_MAP_0_PHY_STR_NUM_0_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_0_PHY_STR_NUM_0_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_0_PHY_STR_NUM_0_POS 0
#define IAXXX_AF_LS_MAP_0_PHY_STR_NUM_0_SIZE 5

/*
 * Physical Stream Type mapped to Logical Stream 0.
 * 0x0: PCM0
 * 0x1: PCM1
 * 0x2: PCM2
 * 0x3: PCM3
 * 0x4: PCM4
 * 0x5: PCM5
 * 0x6: SSMM (Slimbus/SoundWire Slave Muxing Module)
 * 0x7: CIC Combo
 * 0x8: SWRM0 Soundwire Master (SoundWire Master IP ports 1 (TX) and 6 (RX)).
 * (NOT USED IN D4100s)
 * 0x9: SWRM1 Soundwire Master (SoundWire Master IP ports 2 (TX) and 7 (RX)).
 * (NOT USED IN D4100s)
 * 0xa: SWRM2 Soundwire Master (SoundWire Master IP ports 3 (TX) and 8 (RX)).
 * (NOT USED IN D4100s)
 * 0xb - 0xf: Reserved
 *
 Field encoding values:
 *   0x0: pcm0
 *   0x1: pcm1
 *   0x2: pcm2
 *   0x3: pcm3
 *   0x4: pcm4
 *   0x5: pcm5
 *   0x6: ssmm
 *   0x7: cic_combo
 *   0x8: swrm0
 *   0x9: swrm1
 *   0xa: swrm2
 */
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_POS 5
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_SIZE 4

/*
 * Number of channels minus one for Logical Stream 0.
 */
#define IAXXX_AF_LS_MAP_0_NUM_CHAN_MINUS_ONE_0_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_0_NUM_CHAN_MINUS_ONE_0_RESET_VAL 0xb
#define IAXXX_AF_LS_MAP_0_NUM_CHAN_MINUS_ONE_0_POS 12
#define IAXXX_AF_LS_MAP_0_NUM_CHAN_MINUS_ONE_0_SIZE 4

/*
 * Deadline scheduler disable for Logical Stream 0.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_0_DISABLE_DS_0_MASK 0x00010000
#define IAXXX_AF_LS_MAP_0_DISABLE_DS_0_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_0_DISABLE_DS_0_POS 16
#define IAXXX_AF_LS_MAP_0_DISABLE_DS_0_SIZE 1

/*** AF_LS_MAP_1 (0x40000010) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 1.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_1_ADDR (0x40000010)
#define IAXXX_AF_LS_MAP_1_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_1_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_1_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_1_RESET_VAL 0x0000b000

/*
 * Physical Stream Number mapped to Logical Stream 1.
 */
#define IAXXX_AF_LS_MAP_1_PHY_STR_NUM_1_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_1_PHY_STR_NUM_1_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_1_PHY_STR_NUM_1_POS 0
#define IAXXX_AF_LS_MAP_1_PHY_STR_NUM_1_SIZE 5

/*
 * Physical Stream Type mapped to Logical Stream 1.
 */
#define IAXXX_AF_LS_MAP_1_PHY_STR_TYPE_1_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_1_PHY_STR_TYPE_1_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_1_PHY_STR_TYPE_1_POS 5
#define IAXXX_AF_LS_MAP_1_PHY_STR_TYPE_1_SIZE 4

/*
 * Number of channels minus one for Logical Stream 1.
 */
#define IAXXX_AF_LS_MAP_1_NUM_CHAN_MINUS_ONE_1_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_1_NUM_CHAN_MINUS_ONE_1_RESET_VAL 0xb
#define IAXXX_AF_LS_MAP_1_NUM_CHAN_MINUS_ONE_1_POS 12
#define IAXXX_AF_LS_MAP_1_NUM_CHAN_MINUS_ONE_1_SIZE 4

/*
 * Deadline scheduler disable for Logical Stream 1.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_1_DISABLE_DS_1_MASK 0x00010000
#define IAXXX_AF_LS_MAP_1_DISABLE_DS_1_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_1_DISABLE_DS_1_POS 16
#define IAXXX_AF_LS_MAP_1_DISABLE_DS_1_SIZE 1

/*** AF_LS_MAP_2 (0x40000014) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 2.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_2_ADDR (0x40000014)
#define IAXXX_AF_LS_MAP_2_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_2_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_2_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_2_RESET_VAL 0x0000b000

/*
 * Physical Stream Number mapped to Logical Stream 2.
 */
#define IAXXX_AF_LS_MAP_2_PHY_STR_NUM_2_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_2_PHY_STR_NUM_2_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_2_PHY_STR_NUM_2_POS 0
#define IAXXX_AF_LS_MAP_2_PHY_STR_NUM_2_SIZE 5

/*
 * Physical Stream Type mapped to Logical Stream 2.
 */
#define IAXXX_AF_LS_MAP_2_PHY_STR_TYPE_2_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_2_PHY_STR_TYPE_2_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_2_PHY_STR_TYPE_2_POS 5
#define IAXXX_AF_LS_MAP_2_PHY_STR_TYPE_2_SIZE 4

/*
 * Number of channels minus one for Logical Stream 2.
 */
#define IAXXX_AF_LS_MAP_2_NUM_CHAN_MINUS_ONE_2_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_2_NUM_CHAN_MINUS_ONE_2_RESET_VAL 0xb
#define IAXXX_AF_LS_MAP_2_NUM_CHAN_MINUS_ONE_2_POS 12
#define IAXXX_AF_LS_MAP_2_NUM_CHAN_MINUS_ONE_2_SIZE 4

/*
 * Deadline scheduler disable for Logical Stream 2.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_2_DISABLE_DS_2_MASK 0x00010000
#define IAXXX_AF_LS_MAP_2_DISABLE_DS_2_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_2_DISABLE_DS_2_POS 16
#define IAXXX_AF_LS_MAP_2_DISABLE_DS_2_SIZE 1

/*** AF_LS_MAP_3 (0x40000018) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 3.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_3_ADDR (0x40000018)
#define IAXXX_AF_LS_MAP_3_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_3_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_3_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_3_RESET_VAL 0x0000b000

/*
 * Physical Stream Number mapped to Logical Stream 3.
 */
#define IAXXX_AF_LS_MAP_3_PHY_STR_NUM_3_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_3_PHY_STR_NUM_3_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_3_PHY_STR_NUM_3_POS 0
#define IAXXX_AF_LS_MAP_3_PHY_STR_NUM_3_SIZE 5

/*
 * Physical Stream Type mapped to Logical Stream 3.
 */
#define IAXXX_AF_LS_MAP_3_PHY_STR_TYPE_3_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_3_PHY_STR_TYPE_3_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_3_PHY_STR_TYPE_3_POS 5
#define IAXXX_AF_LS_MAP_3_PHY_STR_TYPE_3_SIZE 4

/*
 * Number of channels minus one for Logical Stream 3.
 */
#define IAXXX_AF_LS_MAP_3_NUM_CHAN_MINUS_ONE_3_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_3_NUM_CHAN_MINUS_ONE_3_RESET_VAL 0xb
#define IAXXX_AF_LS_MAP_3_NUM_CHAN_MINUS_ONE_3_POS 12
#define IAXXX_AF_LS_MAP_3_NUM_CHAN_MINUS_ONE_3_SIZE 4

/*
 * Deadline scheduler disable for Logical Stream 3.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_3_DISABLE_DS_3_MASK 0x00010000
#define IAXXX_AF_LS_MAP_3_DISABLE_DS_3_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_3_DISABLE_DS_3_POS 16
#define IAXXX_AF_LS_MAP_3_DISABLE_DS_3_SIZE 1

/*** AF_LS_MAP_4 (0x4000001c) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 4.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_4_ADDR (0x4000001c)
#define IAXXX_AF_LS_MAP_4_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_4_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_4_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_4_RESET_VAL 0x0000b000

/*
 * Physical Stream Number mapped to Logical Stream 4.
 */
#define IAXXX_AF_LS_MAP_4_PHY_STR_NUM_4_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_4_PHY_STR_NUM_4_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_4_PHY_STR_NUM_4_POS 0
#define IAXXX_AF_LS_MAP_4_PHY_STR_NUM_4_SIZE 5

/*
 * Physical Stream Type mapped to Logical Stream 4.
 */
#define IAXXX_AF_LS_MAP_4_PHY_STR_TYPE_4_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_4_PHY_STR_TYPE_4_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_4_PHY_STR_TYPE_4_POS 5
#define IAXXX_AF_LS_MAP_4_PHY_STR_TYPE_4_SIZE 4

/*
 * Number of channels minus one for Logical Stream 4.
 */
#define IAXXX_AF_LS_MAP_4_NUM_CHAN_MINUS_ONE_4_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_4_NUM_CHAN_MINUS_ONE_4_RESET_VAL 0xb
#define IAXXX_AF_LS_MAP_4_NUM_CHAN_MINUS_ONE_4_POS 12
#define IAXXX_AF_LS_MAP_4_NUM_CHAN_MINUS_ONE_4_SIZE 4

/*
 * Deadline scheduler disable for Logical Stream 4.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_4_DISABLE_DS_4_MASK 0x00010000
#define IAXXX_AF_LS_MAP_4_DISABLE_DS_4_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_4_DISABLE_DS_4_POS 16
#define IAXXX_AF_LS_MAP_4_DISABLE_DS_4_SIZE 1

/*** AF_LS_MAP_5 (0x40000020) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 5.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_5_ADDR (0x40000020)
#define IAXXX_AF_LS_MAP_5_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_5_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_5_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_5_RESET_VAL 0x0000b000

/*
 * Physical Stream Number mapped to Logical Stream 5.
 */
#define IAXXX_AF_LS_MAP_5_PHY_STR_NUM_5_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_5_PHY_STR_NUM_5_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_5_PHY_STR_NUM_5_POS 0
#define IAXXX_AF_LS_MAP_5_PHY_STR_NUM_5_SIZE 5

/*
 * Physical Stream Type mapped to Logical Stream 5.
 */
#define IAXXX_AF_LS_MAP_5_PHY_STR_TYPE_5_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_5_PHY_STR_TYPE_5_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_5_PHY_STR_TYPE_5_POS 5
#define IAXXX_AF_LS_MAP_5_PHY_STR_TYPE_5_SIZE 4

/*
 * Number of channels minus one for Logical Stream 5.
 */
#define IAXXX_AF_LS_MAP_5_NUM_CHAN_MINUS_ONE_5_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_5_NUM_CHAN_MINUS_ONE_5_RESET_VAL 0xb
#define IAXXX_AF_LS_MAP_5_NUM_CHAN_MINUS_ONE_5_POS 12
#define IAXXX_AF_LS_MAP_5_NUM_CHAN_MINUS_ONE_5_SIZE 4

/*
 * Deadline scheduler disable for Logical Stream 5.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_5_DISABLE_DS_5_MASK 0x00010000
#define IAXXX_AF_LS_MAP_5_DISABLE_DS_5_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_5_DISABLE_DS_5_POS 16
#define IAXXX_AF_LS_MAP_5_DISABLE_DS_5_SIZE 1

/*** AF_LS_MAP_6 (0x40000024) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 6.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_6_ADDR (0x40000024)
#define IAXXX_AF_LS_MAP_6_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_6_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_6_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_6_RESET_VAL 0x0000b000

/*
 * Physical Stream Number mapped to Logical Stream 6.
 */
#define IAXXX_AF_LS_MAP_6_PHY_STR_NUM_6_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_6_PHY_STR_NUM_6_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_6_PHY_STR_NUM_6_POS 0
#define IAXXX_AF_LS_MAP_6_PHY_STR_NUM_6_SIZE 5

/*
 * Physical Stream Type mapped to Logical Stream 6.
 */
#define IAXXX_AF_LS_MAP_6_PHY_STR_TYPE_6_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_6_PHY_STR_TYPE_6_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_6_PHY_STR_TYPE_6_POS 5
#define IAXXX_AF_LS_MAP_6_PHY_STR_TYPE_6_SIZE 4

/*
 * Number of channels minus one for Logical Stream 6.
 */
#define IAXXX_AF_LS_MAP_6_NUM_CHAN_MINUS_ONE_6_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_6_NUM_CHAN_MINUS_ONE_6_RESET_VAL 0xb
#define IAXXX_AF_LS_MAP_6_NUM_CHAN_MINUS_ONE_6_POS 12
#define IAXXX_AF_LS_MAP_6_NUM_CHAN_MINUS_ONE_6_SIZE 4

/*
 * Deadline scheduler disable for Logical Stream 6.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_6_DISABLE_DS_6_MASK 0x00010000
#define IAXXX_AF_LS_MAP_6_DISABLE_DS_6_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_6_DISABLE_DS_6_POS 16
#define IAXXX_AF_LS_MAP_6_DISABLE_DS_6_SIZE 1

/*** AF_LS_MAP_7 (0x40000028) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 7.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_7_ADDR (0x40000028)
#define IAXXX_AF_LS_MAP_7_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_7_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_7_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_7_RESET_VAL 0x0000b000

/*
 * Physical Stream Number mapped to Logical Stream 7.
 */
#define IAXXX_AF_LS_MAP_7_PHY_STR_NUM_7_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_7_PHY_STR_NUM_7_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_7_PHY_STR_NUM_7_POS 0
#define IAXXX_AF_LS_MAP_7_PHY_STR_NUM_7_SIZE 5

/*
 * Physical Stream Type mapped to Logical Stream 7.
 */
#define IAXXX_AF_LS_MAP_7_PHY_STR_TYPE_7_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_7_PHY_STR_TYPE_7_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_7_PHY_STR_TYPE_7_POS 5
#define IAXXX_AF_LS_MAP_7_PHY_STR_TYPE_7_SIZE 4

/*
 * Number of channels minus one for Logical Stream 7.
 */
#define IAXXX_AF_LS_MAP_7_NUM_CHAN_MINUS_ONE_7_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_7_NUM_CHAN_MINUS_ONE_7_RESET_VAL 0xb
#define IAXXX_AF_LS_MAP_7_NUM_CHAN_MINUS_ONE_7_POS 12
#define IAXXX_AF_LS_MAP_7_NUM_CHAN_MINUS_ONE_7_SIZE 4

/*
 * Deadline scheduler disable for Logical Stream 7.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_7_DISABLE_DS_7_MASK 0x00010000
#define IAXXX_AF_LS_MAP_7_DISABLE_DS_7_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_7_DISABLE_DS_7_POS 16
#define IAXXX_AF_LS_MAP_7_DISABLE_DS_7_SIZE 1

/*** AF_LS_MAP_8 (0x4000002c) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 8.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_8_ADDR (0x4000002c)
#define IAXXX_AF_LS_MAP_8_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_8_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_8_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_8_RESET_VAL 0x0000b000

/*
 * Physical Stream Number mapped to Logical Stream 8.
 */
#define IAXXX_AF_LS_MAP_8_PHY_STR_NUM_8_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_8_PHY_STR_NUM_8_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_8_PHY_STR_NUM_8_POS 0
#define IAXXX_AF_LS_MAP_8_PHY_STR_NUM_8_SIZE 5

/*
 * Physical Stream Type mapped to Logical Stream 8.
 */
#define IAXXX_AF_LS_MAP_8_PHY_STR_TYPE_8_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_8_PHY_STR_TYPE_8_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_8_PHY_STR_TYPE_8_POS 5
#define IAXXX_AF_LS_MAP_8_PHY_STR_TYPE_8_SIZE 4

/*
 * Number of channels minus one for Logical Stream 8.
 */
#define IAXXX_AF_LS_MAP_8_NUM_CHAN_MINUS_ONE_8_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_8_NUM_CHAN_MINUS_ONE_8_RESET_VAL 0xb
#define IAXXX_AF_LS_MAP_8_NUM_CHAN_MINUS_ONE_8_POS 12
#define IAXXX_AF_LS_MAP_8_NUM_CHAN_MINUS_ONE_8_SIZE 4

/*
 * Deadline scheduler disable for Logical Stream 8.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_8_DISABLE_DS_8_MASK 0x00010000
#define IAXXX_AF_LS_MAP_8_DISABLE_DS_8_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_8_DISABLE_DS_8_POS 16
#define IAXXX_AF_LS_MAP_8_DISABLE_DS_8_SIZE 1

/*** AF_LS_MAP_9 (0x40000030) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 9.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_9_ADDR (0x40000030)
#define IAXXX_AF_LS_MAP_9_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_9_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_9_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_9_RESET_VAL 0x0000b000

/*
 * Physical Stream Number mapped to Logical Stream 9.
 */
#define IAXXX_AF_LS_MAP_9_PHY_STR_NUM_9_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_9_PHY_STR_NUM_9_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_9_PHY_STR_NUM_9_POS 0
#define IAXXX_AF_LS_MAP_9_PHY_STR_NUM_9_SIZE 5

/*
 * Physical Stream Type mapped to Logical Stream 9.
 */
#define IAXXX_AF_LS_MAP_9_PHY_STR_TYPE_9_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_9_PHY_STR_TYPE_9_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_9_PHY_STR_TYPE_9_POS 5
#define IAXXX_AF_LS_MAP_9_PHY_STR_TYPE_9_SIZE 4

/*
 * Number of channels minus one for Logical Stream 9.
 */
#define IAXXX_AF_LS_MAP_9_NUM_CHAN_MINUS_ONE_9_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_9_NUM_CHAN_MINUS_ONE_9_RESET_VAL 0xb
#define IAXXX_AF_LS_MAP_9_NUM_CHAN_MINUS_ONE_9_POS 12
#define IAXXX_AF_LS_MAP_9_NUM_CHAN_MINUS_ONE_9_SIZE 4

/*
 * Deadline scheduler disable for Logical Stream 9.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_9_DISABLE_DS_9_MASK 0x00010000
#define IAXXX_AF_LS_MAP_9_DISABLE_DS_9_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_9_DISABLE_DS_9_POS 16
#define IAXXX_AF_LS_MAP_9_DISABLE_DS_9_SIZE 1

/*** AF_LS_MAP_10 (0x40000034) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 10.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_10_ADDR (0x40000034)
#define IAXXX_AF_LS_MAP_10_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_10_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_10_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_10_RESET_VAL 0x0000b000

/*
 * Physical Stream Number mapped to Logical Stream 10.
 */
#define IAXXX_AF_LS_MAP_10_PHY_STR_NUM_10_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_10_PHY_STR_NUM_10_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_10_PHY_STR_NUM_10_POS 0
#define IAXXX_AF_LS_MAP_10_PHY_STR_NUM_10_SIZE 5

/*
 * Physical Stream Type mapped to Logical Stream 10.
 */
#define IAXXX_AF_LS_MAP_10_PHY_STR_TYPE_10_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_10_PHY_STR_TYPE_10_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_10_PHY_STR_TYPE_10_POS 5
#define IAXXX_AF_LS_MAP_10_PHY_STR_TYPE_10_SIZE 4

/*
 * Number of channels minus one for Logical Stream 10.
 */
#define IAXXX_AF_LS_MAP_10_NUM_CHAN_MINUS_ONE_10_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_10_NUM_CHAN_MINUS_ONE_10_RESET_VAL 0xb
#define IAXXX_AF_LS_MAP_10_NUM_CHAN_MINUS_ONE_10_POS 12
#define IAXXX_AF_LS_MAP_10_NUM_CHAN_MINUS_ONE_10_SIZE 4

/*
 * Deadline scheduler disable for Logical Stream 10.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_10_DISABLE_DS_10_MASK 0x00010000
#define IAXXX_AF_LS_MAP_10_DISABLE_DS_10_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_10_DISABLE_DS_10_POS 16
#define IAXXX_AF_LS_MAP_10_DISABLE_DS_10_SIZE 1

/*** AF_LS_MAP_11 (0x40000038) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 11.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_11_ADDR (0x40000038)
#define IAXXX_AF_LS_MAP_11_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_11_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_11_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_11_RESET_VAL 0x0000b000

/*
 * Physical Stream Number mapped to Logical Stream 11.
 */
#define IAXXX_AF_LS_MAP_11_PHY_STR_NUM_11_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_11_PHY_STR_NUM_11_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_11_PHY_STR_NUM_11_POS 0
#define IAXXX_AF_LS_MAP_11_PHY_STR_NUM_11_SIZE 5

/*
 * Physical Stream Type mapped to Logical Stream 11.
 */
#define IAXXX_AF_LS_MAP_11_PHY_STR_TYPE_11_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_11_PHY_STR_TYPE_11_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_11_PHY_STR_TYPE_11_POS 5
#define IAXXX_AF_LS_MAP_11_PHY_STR_TYPE_11_SIZE 4

/*
 * Number of channels minus one for Logical Stream 11.
 */
#define IAXXX_AF_LS_MAP_11_NUM_CHAN_MINUS_ONE_11_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_11_NUM_CHAN_MINUS_ONE_11_RESET_VAL 0xb
#define IAXXX_AF_LS_MAP_11_NUM_CHAN_MINUS_ONE_11_POS 12
#define IAXXX_AF_LS_MAP_11_NUM_CHAN_MINUS_ONE_11_SIZE 4

/*
 * Deadline scheduler disable for Logical Stream 11.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_11_DISABLE_DS_11_MASK 0x00010000
#define IAXXX_AF_LS_MAP_11_DISABLE_DS_11_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_11_DISABLE_DS_11_POS 16
#define IAXXX_AF_LS_MAP_11_DISABLE_DS_11_SIZE 1

/*** AF_LS_MAP_12 (0x4000003c) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 12.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_12_ADDR (0x4000003c)
#define IAXXX_AF_LS_MAP_12_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_12_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_12_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_12_RESET_VAL 0x0000b000

/*
 * Physical Stream Number mapped to Logical Stream 12.
 */
#define IAXXX_AF_LS_MAP_12_PHY_STR_NUM_12_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_12_PHY_STR_NUM_12_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_12_PHY_STR_NUM_12_POS 0
#define IAXXX_AF_LS_MAP_12_PHY_STR_NUM_12_SIZE 5

/*
 * Physical Stream Type mapped to Logical Stream 12.
 */
#define IAXXX_AF_LS_MAP_12_PHY_STR_TYPE_12_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_12_PHY_STR_TYPE_12_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_12_PHY_STR_TYPE_12_POS 5
#define IAXXX_AF_LS_MAP_12_PHY_STR_TYPE_12_SIZE 4

/*
 * Number of channels minus one for Logical Stream 12.
 */
#define IAXXX_AF_LS_MAP_12_NUM_CHAN_MINUS_ONE_12_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_12_NUM_CHAN_MINUS_ONE_12_RESET_VAL 0xb
#define IAXXX_AF_LS_MAP_12_NUM_CHAN_MINUS_ONE_12_POS 12
#define IAXXX_AF_LS_MAP_12_NUM_CHAN_MINUS_ONE_12_SIZE 4

/*
 * Deadline scheduler disable for Logical Stream 12.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_12_DISABLE_DS_12_MASK 0x00010000
#define IAXXX_AF_LS_MAP_12_DISABLE_DS_12_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_12_DISABLE_DS_12_POS 16
#define IAXXX_AF_LS_MAP_12_DISABLE_DS_12_SIZE 1

/*** AF_LS_MAP_13 (0x40000040) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 13.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_13_ADDR (0x40000040)
#define IAXXX_AF_LS_MAP_13_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_13_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_13_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_13_RESET_VAL 0x0000b000

/*
 * Physical Stream Number mapped to Logical Stream 13.
 */
#define IAXXX_AF_LS_MAP_13_PHY_STR_NUM_13_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_13_PHY_STR_NUM_13_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_13_PHY_STR_NUM_13_POS 0
#define IAXXX_AF_LS_MAP_13_PHY_STR_NUM_13_SIZE 5

/*
 * Physical Stream Type mapped to Logical Stream 13.
 */
#define IAXXX_AF_LS_MAP_13_PHY_STR_TYPE_13_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_13_PHY_STR_TYPE_13_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_13_PHY_STR_TYPE_13_POS 5
#define IAXXX_AF_LS_MAP_13_PHY_STR_TYPE_13_SIZE 4

/*
 * Number of channels minus one for Logical Stream 13.
 */
#define IAXXX_AF_LS_MAP_13_NUM_CHAN_MINUS_ONE_13_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_13_NUM_CHAN_MINUS_ONE_13_RESET_VAL 0xb
#define IAXXX_AF_LS_MAP_13_NUM_CHAN_MINUS_ONE_13_POS 12
#define IAXXX_AF_LS_MAP_13_NUM_CHAN_MINUS_ONE_13_SIZE 4

/*
 * Deadline scheduler disable for Logical Stream 13.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_13_DISABLE_DS_13_MASK 0x00010000
#define IAXXX_AF_LS_MAP_13_DISABLE_DS_13_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_13_DISABLE_DS_13_POS 16
#define IAXXX_AF_LS_MAP_13_DISABLE_DS_13_SIZE 1

/*** AF_LS_MAP_14 (0x40000044) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 14.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_14_ADDR (0x40000044)
#define IAXXX_AF_LS_MAP_14_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_14_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_14_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_14_RESET_VAL 0x0000b000

/*
 * Physical Stream Number mapped to Logical Stream 14.
 */
#define IAXXX_AF_LS_MAP_14_PHY_STR_NUM_14_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_14_PHY_STR_NUM_14_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_14_PHY_STR_NUM_14_POS 0
#define IAXXX_AF_LS_MAP_14_PHY_STR_NUM_14_SIZE 5

/*
 * Physical Stream Type mapped to Logical Stream 14.
 */
#define IAXXX_AF_LS_MAP_14_PHY_STR_TYPE_14_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_14_PHY_STR_TYPE_14_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_14_PHY_STR_TYPE_14_POS 5
#define IAXXX_AF_LS_MAP_14_PHY_STR_TYPE_14_SIZE 4

/*
 * Number of channels minus one for Logical Stream 14.
 */
#define IAXXX_AF_LS_MAP_14_NUM_CHAN_MINUS_ONE_14_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_14_NUM_CHAN_MINUS_ONE_14_RESET_VAL 0xb
#define IAXXX_AF_LS_MAP_14_NUM_CHAN_MINUS_ONE_14_POS 12
#define IAXXX_AF_LS_MAP_14_NUM_CHAN_MINUS_ONE_14_SIZE 4

/*
 * Deadline scheduler disable for Logical Stream 14.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_14_DISABLE_DS_14_MASK 0x00010000
#define IAXXX_AF_LS_MAP_14_DISABLE_DS_14_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_14_DISABLE_DS_14_POS 16
#define IAXXX_AF_LS_MAP_14_DISABLE_DS_14_SIZE 1

/*** AF_LS_MAP_15 (0x40000048) ***/
/*
 * Specifies the Physical Stream mapped to Logical Stream 15.  A physical
 * stream is specified by a Type and a Number.  The Type will determine if
 * the stream is Rx or Tx.  For the enumerated Types and Numbers, see
 * LS_Map_0 register.
 */
#define IAXXX_AF_LS_MAP_15_ADDR (0x40000048)
#define IAXXX_AF_LS_MAP_15_MASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_15_RMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_15_WMASK_VAL 0x0001f1ff
#define IAXXX_AF_LS_MAP_15_RESET_VAL 0x0000b000

/*
 * Physical Stream Number mapped to Logical Stream 15.
 */
#define IAXXX_AF_LS_MAP_15_PHY_STR_NUM_15_MASK 0x0000001f
#define IAXXX_AF_LS_MAP_15_PHY_STR_NUM_15_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_15_PHY_STR_NUM_15_POS 0
#define IAXXX_AF_LS_MAP_15_PHY_STR_NUM_15_SIZE 5

/*
 * Physical Stream Type mapped to Logical Stream 15.
 */
#define IAXXX_AF_LS_MAP_15_PHY_STR_TYPE_15_MASK 0x000001e0
#define IAXXX_AF_LS_MAP_15_PHY_STR_TYPE_15_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_15_PHY_STR_TYPE_15_POS 5
#define IAXXX_AF_LS_MAP_15_PHY_STR_TYPE_15_SIZE 4

/*
 * Number of channels minus one for Logical Stream 15.
 */
#define IAXXX_AF_LS_MAP_15_NUM_CHAN_MINUS_ONE_15_MASK 0x0000f000
#define IAXXX_AF_LS_MAP_15_NUM_CHAN_MINUS_ONE_15_RESET_VAL 0xb
#define IAXXX_AF_LS_MAP_15_NUM_CHAN_MINUS_ONE_15_POS 12
#define IAXXX_AF_LS_MAP_15_NUM_CHAN_MINUS_ONE_15_SIZE 4

/*
 * Deadline scheduler disable for Logical Stream 15.  If this is set, this
 * logical stream will not be used in deadline scheduler.
 */
#define IAXXX_AF_LS_MAP_15_DISABLE_DS_15_MASK 0x00010000
#define IAXXX_AF_LS_MAP_15_DISABLE_DS_15_RESET_VAL 0x0
#define IAXXX_AF_LS_MAP_15_DISABLE_DS_15_POS 16
#define IAXXX_AF_LS_MAP_15_DISABLE_DS_15_SIZE 1

/*** AF_LS_DEADLINE_0 (0x4000004c) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 0 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_0_ADDR (0x4000004c)
#define IAXXX_AF_LS_DEADLINE_0_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_0_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_0_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_0_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 0.
 */
#define IAXXX_AF_LS_DEADLINE_0_SR_SCALE_FACTOR_0_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_0_SR_SCALE_FACTOR_0_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_0_SR_SCALE_FACTOR_0_POS 0
#define IAXXX_AF_LS_DEADLINE_0_SR_SCALE_FACTOR_0_SIZE 3

/*
 * Sample Rate Family Logical Stream 0.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_POS 3
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_SIZE 2

/*** AF_LS_DEADLINE_1 (0x40000050) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 1 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_1_ADDR (0x40000050)
#define IAXXX_AF_LS_DEADLINE_1_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_1_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_1_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_1_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 1.
 */
#define IAXXX_AF_LS_DEADLINE_1_SR_SCALE_FACTOR_1_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_1_SR_SCALE_FACTOR_1_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_1_SR_SCALE_FACTOR_1_POS 0
#define IAXXX_AF_LS_DEADLINE_1_SR_SCALE_FACTOR_1_SIZE 3

/*
 * Sample Rate Family Logical Stream 1.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_POS 3
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_SIZE 2

/*** AF_LS_DEADLINE_2 (0x40000054) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 2 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_2_ADDR (0x40000054)
#define IAXXX_AF_LS_DEADLINE_2_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_2_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_2_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_2_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 2.
 */
#define IAXXX_AF_LS_DEADLINE_2_SR_SCALE_FACTOR_2_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_2_SR_SCALE_FACTOR_2_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_2_SR_SCALE_FACTOR_2_POS 0
#define IAXXX_AF_LS_DEADLINE_2_SR_SCALE_FACTOR_2_SIZE 3

/*
 * Sample Rate Family Logical Stream 2.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_POS 3
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_SIZE 2

/*** AF_LS_DEADLINE_3 (0x40000058) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 3 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_3_ADDR (0x40000058)
#define IAXXX_AF_LS_DEADLINE_3_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_3_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_3_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_3_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 3.
 */
#define IAXXX_AF_LS_DEADLINE_3_SR_SCALE_FACTOR_3_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_3_SR_SCALE_FACTOR_3_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_3_SR_SCALE_FACTOR_3_POS 0
#define IAXXX_AF_LS_DEADLINE_3_SR_SCALE_FACTOR_3_SIZE 3

/*
 * Sample Rate Family Logical Stream 3.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_POS 3
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_SIZE 2

/*** AF_LS_DEADLINE_4 (0x4000005c) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 4 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_4_ADDR (0x4000005c)
#define IAXXX_AF_LS_DEADLINE_4_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_4_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_4_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_4_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 4.
 */
#define IAXXX_AF_LS_DEADLINE_4_SR_SCALE_FACTOR_4_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_4_SR_SCALE_FACTOR_4_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_4_SR_SCALE_FACTOR_4_POS 0
#define IAXXX_AF_LS_DEADLINE_4_SR_SCALE_FACTOR_4_SIZE 3

/*
 * Sample Rate Family Logical Stream 4.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_POS 3
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_SIZE 2

/*** AF_LS_DEADLINE_5 (0x40000060) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 5 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_5_ADDR (0x40000060)
#define IAXXX_AF_LS_DEADLINE_5_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_5_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_5_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_5_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 5.
 */
#define IAXXX_AF_LS_DEADLINE_5_SR_SCALE_FACTOR_5_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_5_SR_SCALE_FACTOR_5_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_5_SR_SCALE_FACTOR_5_POS 0
#define IAXXX_AF_LS_DEADLINE_5_SR_SCALE_FACTOR_5_SIZE 3

/*
 * Sample Rate Family Logical Stream 5.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_POS 3
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_SIZE 2

/*** AF_LS_DEADLINE_6 (0x40000064) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 6 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_6_ADDR (0x40000064)
#define IAXXX_AF_LS_DEADLINE_6_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_6_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_6_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_6_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 6.
 */
#define IAXXX_AF_LS_DEADLINE_6_SR_SCALE_FACTOR_6_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_6_SR_SCALE_FACTOR_6_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_6_SR_SCALE_FACTOR_6_POS 0
#define IAXXX_AF_LS_DEADLINE_6_SR_SCALE_FACTOR_6_SIZE 3

/*
 * Sample Rate Family Logical Stream 6.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_POS 3
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_SIZE 2

/*** AF_LS_DEADLINE_7 (0x40000068) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 7 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_7_ADDR (0x40000068)
#define IAXXX_AF_LS_DEADLINE_7_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_7_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_7_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_7_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 7.
 */
#define IAXXX_AF_LS_DEADLINE_7_SR_SCALE_FACTOR_7_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_7_SR_SCALE_FACTOR_7_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_7_SR_SCALE_FACTOR_7_POS 0
#define IAXXX_AF_LS_DEADLINE_7_SR_SCALE_FACTOR_7_SIZE 3

/*
 * Sample Rate Family Logical Stream 7.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_POS 3
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_SIZE 2

/*** AF_LS_DEADLINE_8 (0x4000006c) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 8 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_8_ADDR (0x4000006c)
#define IAXXX_AF_LS_DEADLINE_8_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_8_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_8_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_8_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 8.
 */
#define IAXXX_AF_LS_DEADLINE_8_SR_SCALE_FACTOR_8_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_8_SR_SCALE_FACTOR_8_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_8_SR_SCALE_FACTOR_8_POS 0
#define IAXXX_AF_LS_DEADLINE_8_SR_SCALE_FACTOR_8_SIZE 3

/*
 * Sample Rate Family Logical Stream 8.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_POS 3
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_SIZE 2

/*** AF_LS_DEADLINE_9 (0x40000070) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 9 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_9_ADDR (0x40000070)
#define IAXXX_AF_LS_DEADLINE_9_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_9_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_9_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_9_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 9.
 */
#define IAXXX_AF_LS_DEADLINE_9_SR_SCALE_FACTOR_9_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_9_SR_SCALE_FACTOR_9_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_9_SR_SCALE_FACTOR_9_POS 0
#define IAXXX_AF_LS_DEADLINE_9_SR_SCALE_FACTOR_9_SIZE 3

/*
 * Sample Rate Family Logical Stream 9.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_POS 3
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_SIZE 2

/*** AF_LS_DEADLINE_10 (0x40000074) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 10 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_10_ADDR (0x40000074)
#define IAXXX_AF_LS_DEADLINE_10_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_10_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_10_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_10_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 10.
 */
#define IAXXX_AF_LS_DEADLINE_10_SR_SCALE_FACTOR_10_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_10_SR_SCALE_FACTOR_10_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_10_SR_SCALE_FACTOR_10_POS 0
#define IAXXX_AF_LS_DEADLINE_10_SR_SCALE_FACTOR_10_SIZE 3

/*
 * Sample Rate Family Logical Stream 10.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_POS 3
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_SIZE 2

/*** AF_LS_DEADLINE_11 (0x40000078) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 11 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_11_ADDR (0x40000078)
#define IAXXX_AF_LS_DEADLINE_11_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_11_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_11_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_11_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 11.
 */
#define IAXXX_AF_LS_DEADLINE_11_SR_SCALE_FACTOR_11_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_11_SR_SCALE_FACTOR_11_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_11_SR_SCALE_FACTOR_11_POS 0
#define IAXXX_AF_LS_DEADLINE_11_SR_SCALE_FACTOR_11_SIZE 3

/*
 * Sample Rate Family Logical Stream 11.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_POS 3
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_SIZE 2

/*** AF_LS_DEADLINE_12 (0x4000007c) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 12 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_12_ADDR (0x4000007c)
#define IAXXX_AF_LS_DEADLINE_12_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_12_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_12_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_12_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 12.
 */
#define IAXXX_AF_LS_DEADLINE_12_SR_SCALE_FACTOR_12_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_12_SR_SCALE_FACTOR_12_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_12_SR_SCALE_FACTOR_12_POS 0
#define IAXXX_AF_LS_DEADLINE_12_SR_SCALE_FACTOR_12_SIZE 3

/*
 * Sample Rate Family Logical Stream 12.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_12_SR_FAMILY_12_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_12_SR_FAMILY_12_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_12_SR_FAMILY_12_POS 3
#define IAXXX_AF_LS_DEADLINE_12_SR_FAMILY_12_SIZE 2

/*** AF_LS_DEADLINE_13 (0x40000080) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 13 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_13_ADDR (0x40000080)
#define IAXXX_AF_LS_DEADLINE_13_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_13_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_13_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_13_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 13.
 */
#define IAXXX_AF_LS_DEADLINE_13_SR_SCALE_FACTOR_13_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_13_SR_SCALE_FACTOR_13_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_13_SR_SCALE_FACTOR_13_POS 0
#define IAXXX_AF_LS_DEADLINE_13_SR_SCALE_FACTOR_13_SIZE 3

/*
 * Sample Rate Family Logical Stream 13.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_13_SR_FAMILY_13_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_13_SR_FAMILY_13_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_13_SR_FAMILY_13_POS 3
#define IAXXX_AF_LS_DEADLINE_13_SR_FAMILY_13_SIZE 2

/*** AF_LS_DEADLINE_14 (0x40000084) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 14 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_14_ADDR (0x40000084)
#define IAXXX_AF_LS_DEADLINE_14_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_14_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_14_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_14_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 14.
 */
#define IAXXX_AF_LS_DEADLINE_14_SR_SCALE_FACTOR_14_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_14_SR_SCALE_FACTOR_14_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_14_SR_SCALE_FACTOR_14_POS 0
#define IAXXX_AF_LS_DEADLINE_14_SR_SCALE_FACTOR_14_SIZE 3

/*
 * Sample Rate Family Logical Stream 14.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_14_SR_FAMILY_14_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_14_SR_FAMILY_14_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_14_SR_FAMILY_14_POS 3
#define IAXXX_AF_LS_DEADLINE_14_SR_FAMILY_14_SIZE 2

/*** AF_LS_DEADLINE_15 (0x40000088) ***/
/*
 * Specifies the nominal sample rate of Logical Stream 15 for Deadline
 * Scheduling purposes.  This is specified using a sample rate family code,
 * where 1=4kHz, 2=5.5125 kHz, 3=6kHz, 0=not used, and a power of two scale
 * factor.  For example, 48kHz has family 3 and scale factor 3 -> 6*2^3 =
 * 48kHz.
 */
#define IAXXX_AF_LS_DEADLINE_15_ADDR (0x40000088)
#define IAXXX_AF_LS_DEADLINE_15_MASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_15_RMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_15_WMASK_VAL 0x0000001f
#define IAXXX_AF_LS_DEADLINE_15_RESET_VAL 0x00000000

/*
 * Sample Rate Scale Factor of Logical Stream 15.
 */
#define IAXXX_AF_LS_DEADLINE_15_SR_SCALE_FACTOR_15_MASK 0x00000007
#define IAXXX_AF_LS_DEADLINE_15_SR_SCALE_FACTOR_15_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_15_SR_SCALE_FACTOR_15_POS 0
#define IAXXX_AF_LS_DEADLINE_15_SR_SCALE_FACTOR_15_SIZE 3

/*
 * Sample Rate Family Logical Stream 15.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_15_SR_FAMILY_15_MASK 0x00000018
#define IAXXX_AF_LS_DEADLINE_15_SR_FAMILY_15_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_15_SR_FAMILY_15_POS 3
#define IAXXX_AF_LS_DEADLINE_15_SR_FAMILY_15_SIZE 2

/*** AF_LS_COMPARE_SEL (0x4000008c) ***/
/*
 * Specifies the deadline compare tree assigned to each logical stream.  A
 * selection of 0 implies the stream when enabled, can request service (via
 * Compare Tree 0) through the SSP priority queue or SSP deadline scheduler
 * interrupt; a selection of 1 implies the stream when enabled can request
 * service (via Compare Tree 1) through the BOSS/SYS deadline scheduler
 * interrupt.
 */
#define IAXXX_AF_LS_COMPARE_SEL_ADDR (0x4000008c)
#define IAXXX_AF_LS_COMPARE_SEL_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_COMPARE_SEL_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_COMPARE_SEL_WMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_COMPARE_SEL_RESET_VAL 0x00000000

/*
 * Selects Compare Tree for Logical Stream 0.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_0_MASK 0x00000001
#define IAXXX_AF_LS_COMPARE_SEL_S_0_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_0_POS 0
#define IAXXX_AF_LS_COMPARE_SEL_S_0_SIZE 1

/*
 * Selects Compare Tree for Logical Stream 1.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_1_MASK 0x00000002
#define IAXXX_AF_LS_COMPARE_SEL_S_1_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_1_POS 1
#define IAXXX_AF_LS_COMPARE_SEL_S_1_SIZE 1

/*
 * Selects Compare Tree for Logical Stream 2.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_2_MASK 0x00000004
#define IAXXX_AF_LS_COMPARE_SEL_S_2_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_2_POS 2
#define IAXXX_AF_LS_COMPARE_SEL_S_2_SIZE 1

/*
 * Selects Compare Tree for Logical Stream 3.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_3_MASK 0x00000008
#define IAXXX_AF_LS_COMPARE_SEL_S_3_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_3_POS 3
#define IAXXX_AF_LS_COMPARE_SEL_S_3_SIZE 1

/*
 * Selects Compare Tree for Logical Stream 4.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_4_MASK 0x00000010
#define IAXXX_AF_LS_COMPARE_SEL_S_4_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_4_POS 4
#define IAXXX_AF_LS_COMPARE_SEL_S_4_SIZE 1

/*
 * Selects Compare Tree for Logical Stream 5.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_5_MASK 0x00000020
#define IAXXX_AF_LS_COMPARE_SEL_S_5_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_5_POS 5
#define IAXXX_AF_LS_COMPARE_SEL_S_5_SIZE 1

/*
 * Selects Compare Tree for Logical Stream 6.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_6_MASK 0x00000040
#define IAXXX_AF_LS_COMPARE_SEL_S_6_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_6_POS 6
#define IAXXX_AF_LS_COMPARE_SEL_S_6_SIZE 1

/*
 * Selects Compare Tree for Logical Stream 7.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_7_MASK 0x00000080
#define IAXXX_AF_LS_COMPARE_SEL_S_7_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_7_POS 7
#define IAXXX_AF_LS_COMPARE_SEL_S_7_SIZE 1

/*
 * Selects Compare Tree for Logical Stream 8.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_8_MASK 0x00000100
#define IAXXX_AF_LS_COMPARE_SEL_S_8_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_8_POS 8
#define IAXXX_AF_LS_COMPARE_SEL_S_8_SIZE 1

/*
 * Selects Compare Tree for Logical Stream 9.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_9_MASK 0x00000200
#define IAXXX_AF_LS_COMPARE_SEL_S_9_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_9_POS 9
#define IAXXX_AF_LS_COMPARE_SEL_S_9_SIZE 1

/*
 * Selects Compare Tree for Logical Stream 10.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_10_MASK 0x00000400
#define IAXXX_AF_LS_COMPARE_SEL_S_10_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_10_POS 10
#define IAXXX_AF_LS_COMPARE_SEL_S_10_SIZE 1

/*
 * Selects Compare Tree for Logical Stream 11.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_11_MASK 0x00000800
#define IAXXX_AF_LS_COMPARE_SEL_S_11_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_11_POS 11
#define IAXXX_AF_LS_COMPARE_SEL_S_11_SIZE 1

/*
 * Selects Compare Tree for Logical Stream 12.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_12_MASK 0x00001000
#define IAXXX_AF_LS_COMPARE_SEL_S_12_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_12_POS 12
#define IAXXX_AF_LS_COMPARE_SEL_S_12_SIZE 1

/*
 * Selects Compare Tree for Logical Stream 13.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_13_MASK 0x00002000
#define IAXXX_AF_LS_COMPARE_SEL_S_13_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_13_POS 13
#define IAXXX_AF_LS_COMPARE_SEL_S_13_SIZE 1

/*
 * Selects Compare Tree for Logical Stream 14.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_14_MASK 0x00004000
#define IAXXX_AF_LS_COMPARE_SEL_S_14_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_14_POS 14
#define IAXXX_AF_LS_COMPARE_SEL_S_14_SIZE 1

/*
 * Selects Compare Tree for Logical Stream 15.
 */
#define IAXXX_AF_LS_COMPARE_SEL_S_15_MASK 0x00008000
#define IAXXX_AF_LS_COMPARE_SEL_S_15_RESET_VAL 0x0
#define IAXXX_AF_LS_COMPARE_SEL_S_15_POS 15
#define IAXXX_AF_LS_COMPARE_SEL_S_15_SIZE 1

/*** AF_BACKGROUND_TASK (0x40000090) ***/
/*
 * Any write to this register, regardless of data value, causes a Background
 * Task request to be asserted by the Deadline Scheduler.  This request will
 * remain asserted until serviced by being popped from the SSP Priority
 * Queue.  The register always reads 0.
 */
#define IAXXX_AF_BACKGROUND_TASK_ADDR (0x40000090)
#define IAXXX_AF_BACKGROUND_TASK_MASK_VAL 0x00000001
#define IAXXX_AF_BACKGROUND_TASK_RMASK_VAL 0x00000000
#define IAXXX_AF_BACKGROUND_TASK_WMASK_VAL 0x00000001
#define IAXXX_AF_BACKGROUND_TASK_RESET_VAL 0x00000000

/*
 * Write of any data requests a Background Task; always reads 0.
 */
#define IAXXX_AF_BACKGROUND_TASK_CT0_MASK 0x00000001
#define IAXXX_AF_BACKGROUND_TASK_CT0_RESET_VAL 0x0
#define IAXXX_AF_BACKGROUND_TASK_CT0_POS 0
#define IAXXX_AF_BACKGROUND_TASK_CT0_SIZE 1

/*** AF_LS_ACK_FOR_CT_0 (0x40000094) ***/
/*
 * When written, acknowledges and clears a pending deadline scheduler service
 * request for the indicated logical stream or the background task.  If the
 * logical stream is not assigned to compare tree 0, or is not requesting
 * service, the write is ignored.  If the Background Task bit is set, the
 * contents of the logical stream portion of the field are ignored.  A read
 * of the register returns the most recently written value.
 */
#define IAXXX_AF_LS_ACK_FOR_CT_0_ADDR (0x40000094)
#define IAXXX_AF_LS_ACK_FOR_CT_0_MASK_VAL 0x0000002f
#define IAXXX_AF_LS_ACK_FOR_CT_0_RMASK_VAL 0x0000002f
#define IAXXX_AF_LS_ACK_FOR_CT_0_WMASK_VAL 0x0000002f
#define IAXXX_AF_LS_ACK_FOR_CT_0_RESET_VAL 0x00000000

/*
 * Acknowledges that the logical stream <3:0> (if bit 5 is 0) will be
 * serviced.
 */
#define IAXXX_AF_LS_ACK_FOR_CT_0_SERVICED_MASK 0x0000000f
#define IAXXX_AF_LS_ACK_FOR_CT_0_SERVICED_RESET_VAL 0x0
#define IAXXX_AF_LS_ACK_FOR_CT_0_SERVICED_POS 0
#define IAXXX_AF_LS_ACK_FOR_CT_0_SERVICED_SIZE 4

/*
 * Acknowledges that the background task (if bit 5 is 1) will be serviced.
 */
#define IAXXX_AF_LS_ACK_FOR_CT_0_BACKGROUND_MASK 0x00000020
#define IAXXX_AF_LS_ACK_FOR_CT_0_BACKGROUND_RESET_VAL 0x0
#define IAXXX_AF_LS_ACK_FOR_CT_0_BACKGROUND_POS 5
#define IAXXX_AF_LS_ACK_FOR_CT_0_BACKGROUND_SIZE 1

/*** AF_LS_ACK_FOR_CT_1 (0x40000098) ***/
/*
 * When written, acknowledges and clears a pending deadline scheduler service
 * request for the indicated logical stream.  If the logical stream is not
 * assigned to compare tree 1, or is not requesting service, the write is
 * ignored.  A read of the register returns the most recently written value.
 */
#define IAXXX_AF_LS_ACK_FOR_CT_1_ADDR (0x40000098)
#define IAXXX_AF_LS_ACK_FOR_CT_1_MASK_VAL 0x0000000f
#define IAXXX_AF_LS_ACK_FOR_CT_1_RMASK_VAL 0x0000000f
#define IAXXX_AF_LS_ACK_FOR_CT_1_WMASK_VAL 0x0000000f
#define IAXXX_AF_LS_ACK_FOR_CT_1_RESET_VAL 0x00000000

/*
 * Acknowledges that the indicated logical stream will be serviced.
 */
#define IAXXX_AF_LS_ACK_FOR_CT_1_SERVICED_MASK 0x0000000f
#define IAXXX_AF_LS_ACK_FOR_CT_1_SERVICED_RESET_VAL 0x0
#define IAXXX_AF_LS_ACK_FOR_CT_1_SERVICED_POS 0
#define IAXXX_AF_LS_ACK_FOR_CT_1_SERVICED_SIZE 4

/*** AF_CT_0_STS (0x4000009c) ***/
/*
 * Indicates if any Compare Tree 0 stream or the background task is
 * requesting service.  If service is requested, indicates the source of the
 * highest priority request.  If the request is a Logical Stream, the
 * Presentation Time Flag for the stream is given.  If no service request is
 * pending, the register will read zero.
 */
#define IAXXX_AF_CT_0_STS_ADDR (0x4000009c)
#define IAXXX_AF_CT_0_STS_MASK_VAL 0x0000007f
#define IAXXX_AF_CT_0_STS_RMASK_VAL 0x0000007f
#define IAXXX_AF_CT_0_STS_WMASK_VAL 0x00000000
#define IAXXX_AF_CT_0_STS_RESET_VAL 0x00000000

/*
 * Logical Stream with Highest Priority Logical Stream in Compare Tree 0
 */
#define IAXXX_AF_CT_0_STS_LS_WINNER_MASK 0x0000000f
#define IAXXX_AF_CT_0_STS_LS_WINNER_RESET_VAL 0x0
#define IAXXX_AF_CT_0_STS_LS_WINNER_POS 0
#define IAXXX_AF_CT_0_STS_LS_WINNER_SIZE 4

/*
 * Presentation Time Flag for Logical Stream with the highest priority in
 * Compare Tree 0; zero if the background task has priority.
 */
#define IAXXX_AF_CT_0_STS_PT_FLAG_MASK 0x00000010
#define IAXXX_AF_CT_0_STS_PT_FLAG_RESET_VAL 0x0
#define IAXXX_AF_CT_0_STS_PT_FLAG_POS 4
#define IAXXX_AF_CT_0_STS_PT_FLAG_SIZE 1

/*
 * Indicates the background task is the priority task for Compare Tree 0.
 */
#define IAXXX_AF_CT_0_STS_BG_REQ_MASK 0x00000020
#define IAXXX_AF_CT_0_STS_BG_REQ_RESET_VAL 0x0
#define IAXXX_AF_CT_0_STS_BG_REQ_POS 5
#define IAXXX_AF_CT_0_STS_BG_REQ_SIZE 1

/*
 * Indicates the background task or at least one Compare Tree 0 logical
 * stream is requesting service.
 */
#define IAXXX_AF_CT_0_STS_SVC_REQ_MASK 0x00000040
#define IAXXX_AF_CT_0_STS_SVC_REQ_RESET_VAL 0x0
#define IAXXX_AF_CT_0_STS_SVC_REQ_POS 6
#define IAXXX_AF_CT_0_STS_SVC_REQ_SIZE 1

/*** AF_CT_1_STS (0x400000a0) ***/
/*
 * Indicates if any Compare Tree 1 stream is requesting service.  If service
 * is requested, indicates the source of the highest priority request and its
 * Presentation Time Flag.  If no service request is pending, the register
 * will read zero.
 */
#define IAXXX_AF_CT_1_STS_ADDR (0x400000a0)
#define IAXXX_AF_CT_1_STS_MASK_VAL 0x0000005f
#define IAXXX_AF_CT_1_STS_RMASK_VAL 0x0000005f
#define IAXXX_AF_CT_1_STS_WMASK_VAL 0x00000000
#define IAXXX_AF_CT_1_STS_RESET_VAL 0x00000000

/*
 * Logical Stream with the highest priority in Compare Tree 1.
 */
#define IAXXX_AF_CT_1_STS_LS_WINNER_MASK 0x0000000f
#define IAXXX_AF_CT_1_STS_LS_WINNER_RESET_VAL 0x0
#define IAXXX_AF_CT_1_STS_LS_WINNER_POS 0
#define IAXXX_AF_CT_1_STS_LS_WINNER_SIZE 4

/*
 * Presentation Time Flag for Logical Stream with the highest priority in
 * Compare Tree 1.
 */
#define IAXXX_AF_CT_1_STS_PT_FLAG_MASK 0x00000010
#define IAXXX_AF_CT_1_STS_PT_FLAG_RESET_VAL 0x0
#define IAXXX_AF_CT_1_STS_PT_FLAG_POS 4
#define IAXXX_AF_CT_1_STS_PT_FLAG_SIZE 1

/*
 * Indicates at least one Compare Tree 1 logical stream is requesting
 * service.
 */
#define IAXXX_AF_CT_1_STS_SVC_REQ_MASK 0x00000040
#define IAXXX_AF_CT_1_STS_SVC_REQ_RESET_VAL 0x0
#define IAXXX_AF_CT_1_STS_SVC_REQ_POS 6
#define IAXXX_AF_CT_1_STS_SVC_REQ_SIZE 1

/*** AF_LS_TIMEOUT_CTRL (0x400000a4) ***/
/*
 * Determines the period for the Stream Timeout counter for each Logical
 * Stream.  When 0, the timeout period is 67 usec; when 1 the period is 333
 * usec.  A selection of 0 is intended for streams with sample rates of 44.1
 * kHz or higher; a selection of 1 is for sample rates 32 kHz or below.
 * These rates assume the 3.072 Wall clock tick.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_ADDR (0x400000a4)
#define IAXXX_AF_LS_TIMEOUT_CTRL_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_TIMEOUT_CTRL_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_TIMEOUT_CTRL_WMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_TIMEOUT_CTRL_RESET_VAL 0x00000000

/*
 * Selects Timeout Period for Logical Stream 0.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_0_MASK 0x00000001
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_0_POS 0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_0_SIZE 1

/*
 * Selects Timeout Period for Logical Stream 1.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_1_MASK 0x00000002
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_1_POS 1
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_1_SIZE 1

/*
 * Selects Timeout Period for Logical Stream 2.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_2_MASK 0x00000004
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_2_POS 2
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_2_SIZE 1

/*
 * Selects Timeout Period for Logical Stream 3.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_3_MASK 0x00000008
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_3_POS 3
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_3_SIZE 1

/*
 * Selects Timeout Period for Logical Stream 4.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_4_MASK 0x00000010
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_4_POS 4
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_4_SIZE 1

/*
 * Selects Timeout Period for Logical Stream 5.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_5_MASK 0x00000020
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_5_POS 5
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_5_SIZE 1

/*
 * Selects Timeout Period for Logical Stream 6.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_6_MASK 0x00000040
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_6_POS 6
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_6_SIZE 1

/*
 * Selects Timeout Period for Logical Stream 7.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_7_MASK 0x00000080
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_7_POS 7
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_7_SIZE 1

/*
 * Selects Timeout Period for Logical Stream 8.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_8_MASK 0x00000100
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_8_POS 8
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_8_SIZE 1

/*
 * Selects Timeout Period for Logical Stream 9.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_9_MASK 0x00000200
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_9_POS 9
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_9_SIZE 1

/*
 * Selects Timeout Period for Logical Stream 10.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_10_MASK 0x00000400
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_10_POS 10
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_10_SIZE 1

/*
 * Selects Timeout Period for Logical Stream 11.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_11_MASK 0x00000800
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_11_POS 11
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_11_SIZE 1

/*
 * Selects Timeout Period for Logical Stream 12.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_12_MASK 0x00001000
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_12_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_12_POS 12
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_12_SIZE 1

/*
 * Selects Timeout Period for Logical Stream 13.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_13_MASK 0x00002000
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_13_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_13_POS 13
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_13_SIZE 1

/*
 * Selects Timeout Period for Logical Stream 14.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_14_MASK 0x00004000
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_14_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_14_POS 14
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_14_SIZE 1

/*
 * Selects Timeout Period for Logical Stream 15.
 */
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_15_MASK 0x00008000
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_15_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_15_POS 15
#define IAXXX_AF_LS_TIMEOUT_CTRL_C_15_SIZE 1

/*** AF_LS_TIMEOUT_ENAB (0x400000a8) ***/
/*
 * Master Enable Bits for Logical Stream Timeout Period. When enabled, the
 * logical stream timeout function is available.  Note that the WCPT must be
 * on to use the timeout feature since we need the wall clock tick to count
 * the timeout period.  Nominally, the timeout tick is 1/8th the rate (384
 * KHz) of the deadline scheduler tick (3.072 MHz).
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_ADDR (0x400000a8)
#define IAXXX_AF_LS_TIMEOUT_ENAB_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_TIMEOUT_ENAB_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_TIMEOUT_ENAB_WMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_TIMEOUT_ENAB_RESET_VAL 0x00000000

/*
 * Enables Timeout Period for Logical stream 0.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_0_MASK 0x00000001
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_0_POS 0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_0_SIZE 1

/*
 * Enables Timeout Period for Logical stream 1.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_1_MASK 0x00000002
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_1_POS 1
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_1_SIZE 1

/*
 * Enables Timeout Period for Logical stream 2.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_2_MASK 0x00000004
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_2_POS 2
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_2_SIZE 1

/*
 * Enables Timeout Period for Logical stream 3.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_3_MASK 0x00000008
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_3_POS 3
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_3_SIZE 1

/*
 * Enables Timeout Period for Logical stream 4.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_4_MASK 0x00000010
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_4_POS 4
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_4_SIZE 1

/*
 * Enables Timeout Period for Logical stream 5.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_5_MASK 0x00000020
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_5_POS 5
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_5_SIZE 1

/*
 * Enables Timeout Period for Logical stream 6.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_6_MASK 0x00000040
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_6_POS 6
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_6_SIZE 1

/*
 * Enables Timeout Period for Logical stream 7.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_7_MASK 0x00000080
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_7_POS 7
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_7_SIZE 1

/*
 * Enables Timeout Period for Logical stream 8.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_8_MASK 0x00000100
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_8_POS 8
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_8_SIZE 1

/*
 * Enables Timeout Period for Logical stream 9.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_9_MASK 0x00000200
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_9_POS 9
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_9_SIZE 1

/*
 * Enables Timeout Period for Logical stream 10.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_10_MASK 0x00000400
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_10_POS 10
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_10_SIZE 1

/*
 * Enables Timeout Period for Logical stream 11.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_11_MASK 0x00000800
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_11_POS 11
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_11_SIZE 1

/*
 * Enables Timeout Period for Logical stream 12.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_12_MASK 0x00001000
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_12_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_12_POS 12
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_12_SIZE 1

/*
 * Enables Timeout Period for Logical stream 13.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_13_MASK 0x00002000
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_13_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_13_POS 13
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_13_SIZE 1

/*
 * Enables Timeout Period for Logical stream 14.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_14_MASK 0x00004000
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_14_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_14_POS 14
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_14_SIZE 1

/*
 * Enables Timeout Period for Logical stream 15.
 */
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_15_MASK 0x00008000
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_15_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_15_POS 15
#define IAXXX_AF_LS_TIMEOUT_ENAB_E_15_SIZE 1

/*** AF_LS_SUBSAMP_CTR_0 (0x400000ac) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 0.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_0_ADDR (0x400000ac)
#define IAXXX_AF_LS_SUBSAMP_CTR_0_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_0_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_0_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_0_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 0, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_0_PHASE_0_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_0_PHASE_0_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_0_PHASE_0_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_0_PHASE_0_SIZE 12

/*
 * Usual PTSS ratio for Logical Stream 0, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_0_SKIP_COUNT_0_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_0_SKIP_COUNT_0_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_0_SKIP_COUNT_0_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_0_SKIP_COUNT_0_SIZE 12

/*** AF_LS_SUBSAMP_CTR_1 (0x400000b0) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 1.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_1_ADDR (0x400000b0)
#define IAXXX_AF_LS_SUBSAMP_CTR_1_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_1_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_1_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_1_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 1, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_1_PHASE_1_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_1_PHASE_1_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_1_PHASE_1_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_1_PHASE_1_SIZE 12

/*
 * Usual PTSS ratio for Logical Stream 1, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_1_SKIP_COUNT_1_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_1_SKIP_COUNT_1_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_1_SKIP_COUNT_1_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_1_SKIP_COUNT_1_SIZE 12

/*** AF_LS_SUBSAMP_CTR_2 (0x400000b4) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 2.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_2_ADDR (0x400000b4)
#define IAXXX_AF_LS_SUBSAMP_CTR_2_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_2_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_2_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_2_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 2, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_2_PHASE_2_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_2_PHASE_2_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_2_PHASE_2_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_2_PHASE_2_SIZE 12

/*
 * Usual PTSS ratio for Logical Stream 2, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_2_SKIP_COUNT_2_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_2_SKIP_COUNT_2_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_2_SKIP_COUNT_2_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_2_SKIP_COUNT_2_SIZE 12

/*** AF_LS_SUBSAMP_CTR_3 (0x400000b8) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 3.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_3_ADDR (0x400000b8)
#define IAXXX_AF_LS_SUBSAMP_CTR_3_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_3_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_3_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_3_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 3, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_3_PHASE_3_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_3_PHASE_3_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_3_PHASE_3_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_3_PHASE_3_SIZE 12

/*
 * Usual PTSS ratio for Logical Stream 3, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_3_SKIP_COUNT_3_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_3_SKIP_COUNT_3_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_3_SKIP_COUNT_3_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_3_SKIP_COUNT_3_SIZE 12

/*** AF_LS_SUBSAMP_CTR_4 (0x400000bc) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 4.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_4_ADDR (0x400000bc)
#define IAXXX_AF_LS_SUBSAMP_CTR_4_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_4_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_4_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_4_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 4, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_4_PHASE_4_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_4_PHASE_4_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_4_PHASE_4_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_4_PHASE_4_SIZE 12

/*
 * Usual PTSS ratio for Logical Stream 4, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_4_SKIP_COUNT_4_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_4_SKIP_COUNT_4_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_4_SKIP_COUNT_4_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_4_SKIP_COUNT_4_SIZE 12

/*** AF_LS_SUBSAMP_CTR_5 (0x400000c0) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 5.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_5_ADDR (0x400000c0)
#define IAXXX_AF_LS_SUBSAMP_CTR_5_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_5_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_5_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_5_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 5, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_5_PHASE_5_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_5_PHASE_5_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_5_PHASE_5_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_5_PHASE_5_SIZE 12

/*
 * Usual PTSS ratio for Logical Stream 5, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_5_SKIP_COUNT_5_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_5_SKIP_COUNT_5_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_5_SKIP_COUNT_5_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_5_SKIP_COUNT_5_SIZE 12

/*** AF_LS_SUBSAMP_CTR_6 (0x400000c4) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 6.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_6_ADDR (0x400000c4)
#define IAXXX_AF_LS_SUBSAMP_CTR_6_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_6_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_6_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_6_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 6, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_6_PHASE_6_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_6_PHASE_6_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_6_PHASE_6_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_6_PHASE_6_SIZE 12

/*
 * Usual PTSS ratio for Logical Stream 6, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_6_SKIP_COUNT_6_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_6_SKIP_COUNT_6_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_6_SKIP_COUNT_6_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_6_SKIP_COUNT_6_SIZE 12

/*** AF_LS_SUBSAMP_CTR_7 (0x400000c8) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 7.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_7_ADDR (0x400000c8)
#define IAXXX_AF_LS_SUBSAMP_CTR_7_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_7_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_7_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_7_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 7, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_7_PHASE_7_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_7_PHASE_7_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_7_PHASE_7_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_7_PHASE_7_SIZE 12

/*
 * Usual PTSS ratio for Logical Stream 7, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_7_SKIP_COUNT_7_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_7_SKIP_COUNT_7_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_7_SKIP_COUNT_7_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_7_SKIP_COUNT_7_SIZE 12

/*** AF_LS_SUBSAMP_CTR_8 (0x400000cc) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 8.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_8_ADDR (0x400000cc)
#define IAXXX_AF_LS_SUBSAMP_CTR_8_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_8_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_8_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_8_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 8, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_8_PHASE_8_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_8_PHASE_8_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_8_PHASE_8_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_8_PHASE_8_SIZE 12

/*
 * Usual PTSS ratio for Logical Stream 8, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_8_SKIP_COUNT_8_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_8_SKIP_COUNT_8_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_8_SKIP_COUNT_8_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_8_SKIP_COUNT_8_SIZE 12

/*** AF_LS_SUBSAMP_CTR_9 (0x400000d0) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 9.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_9_ADDR (0x400000d0)
#define IAXXX_AF_LS_SUBSAMP_CTR_9_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_9_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_9_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_9_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 9, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_9_PHASE_9_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_9_PHASE_9_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_9_PHASE_9_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_9_PHASE_9_SIZE 12

/*
 * Usual PTSS ratio for Logical Stream 9, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_9_SKIP_COUNT_9_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_9_SKIP_COUNT_9_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_9_SKIP_COUNT_9_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_9_SKIP_COUNT_9_SIZE 12

/*** AF_LS_SUBSAMP_CTR_10 (0x400000d4) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 10.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_10_ADDR (0x400000d4)
#define IAXXX_AF_LS_SUBSAMP_CTR_10_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_10_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_10_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_10_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 10, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_10_PHASE_10_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_10_PHASE_10_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_10_PHASE_10_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_10_PHASE_10_SIZE 12

/*
 * Usual PTSS ratio for Logical Stream 10, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_10_SKIP_COUNT_10_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_10_SKIP_COUNT_10_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_10_SKIP_COUNT_10_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_10_SKIP_COUNT_10_SIZE 12

/*** AF_LS_SUBSAMP_CTR_11 (0x400000d8) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 11.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_11_ADDR (0x400000d8)
#define IAXXX_AF_LS_SUBSAMP_CTR_11_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_11_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_11_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_11_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 11, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_11_PHASE_11_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_11_PHASE_11_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_11_PHASE_11_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_11_PHASE_11_SIZE 12

/*
 * Usual PTSS ratio for Logical Stream 11, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_11_SKIP_COUNT_11_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_11_SKIP_COUNT_11_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_11_SKIP_COUNT_11_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_11_SKIP_COUNT_11_SIZE 12

/*** AF_LS_SUBSAMP_CTR_12 (0x400000dc) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 12.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_12_ADDR (0x400000dc)
#define IAXXX_AF_LS_SUBSAMP_CTR_12_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_12_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_12_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_12_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 12, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_12_PHASE_12_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_12_PHASE_12_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_12_PHASE_12_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_12_PHASE_12_SIZE 12

/*
 * Usual PTSS ratio for Logical Stream 12, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_12_SKIP_COUNT_12_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_12_SKIP_COUNT_12_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_12_SKIP_COUNT_12_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_12_SKIP_COUNT_12_SIZE 12

/*** AF_LS_SUBSAMP_CTR_13 (0x400000e0) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 13.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_13_ADDR (0x400000e0)
#define IAXXX_AF_LS_SUBSAMP_CTR_13_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_13_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_13_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_13_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 13, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_13_PHASE_13_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_13_PHASE_13_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_13_PHASE_13_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_13_PHASE_13_SIZE 12

/*
 * Usual PTSS ratio for Logical Stream 13, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_13_SKIP_COUNT_13_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_13_SKIP_COUNT_13_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_13_SKIP_COUNT_13_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_13_SKIP_COUNT_13_SIZE 12

/*** AF_LS_SUBSAMP_CTR_14 (0x400000e4) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 14.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_14_ADDR (0x400000e4)
#define IAXXX_AF_LS_SUBSAMP_CTR_14_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_14_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_14_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_14_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 14, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_14_PHASE_14_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_14_PHASE_14_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_14_PHASE_14_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_14_PHASE_14_SIZE 12

/*
 * Usual PTSS ratio for Logical Stream 14, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_14_SKIP_COUNT_14_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_14_SKIP_COUNT_14_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_14_SKIP_COUNT_14_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_14_SKIP_COUNT_14_SIZE 12

/*** AF_LS_SUBSAMP_CTR_15 (0x400000e8) ***/
/*
 * Determines the Presentation Time Subsampling (PTSS) ratio for Logical
 * Stream 15.  The Skip Count field determines the ratio under normal
 * circumstances; there will be one presentation time for each Skip Count + 1
 * samples.  The Phase field can be used to cause a different ratio on a
 * one-time basis.  When the Phase field is written with a value other than
 * that of the Skip Count field, that value is used to compute the ratio at
 * the next available opportunity, allowing an adjustment of the "phase" of
 * the skip count.  Subsample ratios less than 4 are illegal and should not
 * be used, except for a subsample ratio of 1, which is defined as disabling
 * PT flag operation for the specific logical stream.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_15_ADDR (0x400000e8)
#define IAXXX_AF_LS_SUBSAMP_CTR_15_MASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_15_RMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_15_WMASK_VAL 0x0fff0fff
#define IAXXX_AF_LS_SUBSAMP_CTR_15_RESET_VAL 0x00030003

/*
 * One-Time PTSS ratio for Logical Stream 15, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_15_PHASE_15_MASK 0x00000fff
#define IAXXX_AF_LS_SUBSAMP_CTR_15_PHASE_15_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_15_PHASE_15_POS 0
#define IAXXX_AF_LS_SUBSAMP_CTR_15_PHASE_15_SIZE 12

/*
 * Usual PTSS ratio for Logical Stream 15, less one.
 */
#define IAXXX_AF_LS_SUBSAMP_CTR_15_SKIP_COUNT_15_MASK 0x0fff0000
#define IAXXX_AF_LS_SUBSAMP_CTR_15_SKIP_COUNT_15_RESET_VAL 0x3
#define IAXXX_AF_LS_SUBSAMP_CTR_15_SKIP_COUNT_15_POS 16
#define IAXXX_AF_LS_SUBSAMP_CTR_15_SKIP_COUNT_15_SIZE 12

/*** AF_WCPT_ENABLE (0x400000ec) ***/
/*
 * When set, enables the Wall Clock, Presentation Time, and Processor Timer
 * subsystems.  When clear, these subsystems are disabled and consume minimal
 * power.  When enabled, the Wall Clock begins counting at time zero.
 */
#define IAXXX_AF_WCPT_ENABLE_ADDR (0x400000ec)
#define IAXXX_AF_WCPT_ENABLE_MASK_VAL 0x00000001
#define IAXXX_AF_WCPT_ENABLE_RMASK_VAL 0x00000001
#define IAXXX_AF_WCPT_ENABLE_WMASK_VAL 0x00000001
#define IAXXX_AF_WCPT_ENABLE_RESET_VAL 0x00000000

/*
 * Enable Wall Clock / PT unit.
 */
#define IAXXX_AF_WCPT_ENABLE_E_MASK 0x00000001
#define IAXXX_AF_WCPT_ENABLE_E_RESET_VAL 0x0
#define IAXXX_AF_WCPT_ENABLE_E_POS 0
#define IAXXX_AF_WCPT_ENABLE_E_SIZE 1

/*** AF_WCPT_MISC_CTRL (0x400000f0) ***/
/*
 * When set, the Wall Clock Master Counter will not increment.
 */
#define IAXXX_AF_WCPT_MISC_CTRL_ADDR (0x400000f0)
#define IAXXX_AF_WCPT_MISC_CTRL_MASK_VAL 0x00000001
#define IAXXX_AF_WCPT_MISC_CTRL_RMASK_VAL 0x00000001
#define IAXXX_AF_WCPT_MISC_CTRL_WMASK_VAL 0x00000001
#define IAXXX_AF_WCPT_MISC_CTRL_RESET_VAL 0x00000000

/*
 * Disable increment for Wall Clock Counter.
 */
#define IAXXX_AF_WCPT_MISC_CTRL_INC_DIS_MASK 0x00000001
#define IAXXX_AF_WCPT_MISC_CTRL_INC_DIS_RESET_VAL 0x0
#define IAXXX_AF_WCPT_MISC_CTRL_INC_DIS_POS 0
#define IAXXX_AF_WCPT_MISC_CTRL_INC_DIS_SIZE 1

/*** AF_WCPT_PROC_ENAB (0x400000f4) ***/
/*
 * When set, enables the corresponding Processor Presentation Timer
 * subsystem, allowing that processor to request a presentation time "time
 * stamp".  When clear, the subsystem is disabled and consumes minimal power.
 */
#define IAXXX_AF_WCPT_PROC_ENAB_ADDR (0x400000f4)
#define IAXXX_AF_WCPT_PROC_ENAB_MASK_VAL 0x0000001f
#define IAXXX_AF_WCPT_PROC_ENAB_RMASK_VAL 0x0000001f
#define IAXXX_AF_WCPT_PROC_ENAB_WMASK_VAL 0x0000001f
#define IAXXX_AF_WCPT_PROC_ENAB_RESET_VAL 0x00000000

/*
 * Enable Processor Presentation Time for DMX.
 */
#define IAXXX_AF_WCPT_PROC_ENAB_E_0_MASK 0x00000001
#define IAXXX_AF_WCPT_PROC_ENAB_E_0_RESET_VAL 0x0
#define IAXXX_AF_WCPT_PROC_ENAB_E_0_POS 0
#define IAXXX_AF_WCPT_PROC_ENAB_E_0_SIZE 1

/*
 * Enable Processor Presentation Time for HMD.
 */
#define IAXXX_AF_WCPT_PROC_ENAB_E_1_MASK 0x00000002
#define IAXXX_AF_WCPT_PROC_ENAB_E_1_RESET_VAL 0x0
#define IAXXX_AF_WCPT_PROC_ENAB_E_1_POS 1
#define IAXXX_AF_WCPT_PROC_ENAB_E_1_SIZE 1

/*
 * Enable Processor Presentation Time for CM4.
 */
#define IAXXX_AF_WCPT_PROC_ENAB_E_2_MASK 0x00000004
#define IAXXX_AF_WCPT_PROC_ENAB_E_2_RESET_VAL 0x0
#define IAXXX_AF_WCPT_PROC_ENAB_E_2_POS 2
#define IAXXX_AF_WCPT_PROC_ENAB_E_2_SIZE 1

/*
 * Enable Processor Presentation Time for SSP.
 */
#define IAXXX_AF_WCPT_PROC_ENAB_E_3_MASK 0x00000008
#define IAXXX_AF_WCPT_PROC_ENAB_E_3_RESET_VAL 0x0
#define IAXXX_AF_WCPT_PROC_ENAB_E_3_POS 3
#define IAXXX_AF_WCPT_PROC_ENAB_E_3_SIZE 1

/*
 * Enable Processor Presentation Time for BOSS.
 */
#define IAXXX_AF_WCPT_PROC_ENAB_E_4_MASK 0x00000010
#define IAXXX_AF_WCPT_PROC_ENAB_E_4_RESET_VAL 0x0
#define IAXXX_AF_WCPT_PROC_ENAB_E_4_POS 4
#define IAXXX_AF_WCPT_PROC_ENAB_E_4_SIZE 1

/*** AF_WCPT_DMX_PT_0 (0x400000f8) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_WCPT_DMX_PT_0_ADDR (0x400000f8)
#define IAXXX_AF_WCPT_DMX_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_DMX_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_DMX_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_DMX_PT_0_RESET_VAL 0x00000000

/*
 * DMX Presentation Time Stamp
 */
#define IAXXX_AF_WCPT_DMX_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_DMX_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_DMX_PT_0_VAL_POS 0
#define IAXXX_AF_WCPT_DMX_PT_0_VAL_SIZE 32

/*** AF_WCPT_DMX_PT_1 (0x400000fc) ***/
/*
 * When the status bit is 0, provides the Wall Clock value when the most
 * recent write by the DMX processor toggling the Processor Presentation Time
 * Stamp request bit occurred.  A write of any value to the register will
 * restore the status bit to 1 (invalid) to be ready for a subsequent
 * request.
 */
#define IAXXX_AF_WCPT_DMX_PT_1_ADDR (0x400000fc)
#define IAXXX_AF_WCPT_DMX_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_WCPT_DMX_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_WCPT_DMX_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_DMX_PT_1_RESET_VAL 0x80000000

/*
 * DMX Presentation Time Stamp
 */
#define IAXXX_AF_WCPT_DMX_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_WCPT_DMX_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_DMX_PT_1_VAL_POS 0
#define IAXXX_AF_WCPT_DMX_PT_1_VAL_SIZE 20

/*
 * DMX Presentation Time Stamp is invalid when set.  In addition, if set,
 * then the Presentation Time Stamp will not change, and any DMX processor
 * timestamp requests will be dropped.
 */
#define IAXXX_AF_WCPT_DMX_PT_1_STAT_MASK 0x80000000
#define IAXXX_AF_WCPT_DMX_PT_1_STAT_RESET_VAL 0x1
#define IAXXX_AF_WCPT_DMX_PT_1_STAT_POS 31
#define IAXXX_AF_WCPT_DMX_PT_1_STAT_SIZE 1

/*** AF_WCPT_HMD_PT_0 (0x40000100) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_WCPT_HMD_PT_0_ADDR (0x40000100)
#define IAXXX_AF_WCPT_HMD_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_HMD_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_HMD_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_HMD_PT_0_RESET_VAL 0x00000000

/*
 * HMD Presentation Time Stamp
 */
#define IAXXX_AF_WCPT_HMD_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_HMD_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_HMD_PT_0_VAL_POS 0
#define IAXXX_AF_WCPT_HMD_PT_0_VAL_SIZE 32

/*** AF_WCPT_HMD_PT_1 (0x40000104) ***/
/*
 * When the status bit is 0, provides the Wall Clock value when the most
 * recent write by the HMD processor toggling the Processor Presentation Time
 * Stamp request bit occurred.  A write of any value to the register will
 * restore the status bit to 1 (invalid) to be ready for a subsequent
 * request.
 */
#define IAXXX_AF_WCPT_HMD_PT_1_ADDR (0x40000104)
#define IAXXX_AF_WCPT_HMD_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_WCPT_HMD_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_WCPT_HMD_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_HMD_PT_1_RESET_VAL 0x80000000

/*
 * HMD Presentation Time Stamp
 */
#define IAXXX_AF_WCPT_HMD_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_WCPT_HMD_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_HMD_PT_1_VAL_POS 0
#define IAXXX_AF_WCPT_HMD_PT_1_VAL_SIZE 20

/*
 * HMD Presentation Time Stamp is invalid when set.  In addition, if set,
 * then the Presentation Time Stamp will not change, and any HMD processor
 * timestamp requests will be dropped.
 */
#define IAXXX_AF_WCPT_HMD_PT_1_STAT_MASK 0x80000000
#define IAXXX_AF_WCPT_HMD_PT_1_STAT_RESET_VAL 0x1
#define IAXXX_AF_WCPT_HMD_PT_1_STAT_POS 31
#define IAXXX_AF_WCPT_HMD_PT_1_STAT_SIZE 1

/*** AF_WCPT_CM4_PT_0 (0x40000108) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_WCPT_CM4_PT_0_ADDR (0x40000108)
#define IAXXX_AF_WCPT_CM4_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_CM4_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_CM4_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_CM4_PT_0_RESET_VAL 0x00000000

/*
 * CM4 Presentation Time Stamp
 */
#define IAXXX_AF_WCPT_CM4_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_CM4_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_CM4_PT_0_VAL_POS 0
#define IAXXX_AF_WCPT_CM4_PT_0_VAL_SIZE 32

/*** AF_WCPT_CM4_PT_1 (0x4000010c) ***/
/*
 * When the status bit is 0, provides the Wall Clock value when the most
 * recent write by the CM4 processor toggling the Processor Presentation Time
 * Stamp request bit occurred.  A write of any value to the register will
 * restore the status bit to 1 (invalid) to be ready for a subsequent
 * request.
 */
#define IAXXX_AF_WCPT_CM4_PT_1_ADDR (0x4000010c)
#define IAXXX_AF_WCPT_CM4_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_WCPT_CM4_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_WCPT_CM4_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_CM4_PT_1_RESET_VAL 0x80000000

/*
 * CM4 Presentation Time Stamp
 */
#define IAXXX_AF_WCPT_CM4_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_WCPT_CM4_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_CM4_PT_1_VAL_POS 0
#define IAXXX_AF_WCPT_CM4_PT_1_VAL_SIZE 20

/*
 * CM4 Presentation Time Stamp is invalid when set.  In addition, if set,
 * then the Presentation Time Stamp will not change, and any CM4 processor
 * timestamp requests will be dropped.
 */
#define IAXXX_AF_WCPT_CM4_PT_1_STAT_MASK 0x80000000
#define IAXXX_AF_WCPT_CM4_PT_1_STAT_RESET_VAL 0x1
#define IAXXX_AF_WCPT_CM4_PT_1_STAT_POS 31
#define IAXXX_AF_WCPT_CM4_PT_1_STAT_SIZE 1

/*** AF_WCPT_SSP_PT_0 (0x40000110) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_WCPT_SSP_PT_0_ADDR (0x40000110)
#define IAXXX_AF_WCPT_SSP_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_SSP_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_SSP_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_SSP_PT_0_RESET_VAL 0x00000000

/*
 * SSP Presentation Time Stamp
 */
#define IAXXX_AF_WCPT_SSP_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_SSP_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_SSP_PT_0_VAL_POS 0
#define IAXXX_AF_WCPT_SSP_PT_0_VAL_SIZE 32

/*** AF_WCPT_SSP_PT_1 (0x40000114) ***/
/*
 * When the status bit is 0, provides the Wall Clock value when the most
 * recent write by the SSP processor toggling the Processor Presentation Time
 * Stamp request bit occurred.  A write of any value to the register will
 * restore the status bit to 1 (invalid) to be ready for a subsequent
 * request.
 */
#define IAXXX_AF_WCPT_SSP_PT_1_ADDR (0x40000114)
#define IAXXX_AF_WCPT_SSP_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_WCPT_SSP_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_WCPT_SSP_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_SSP_PT_1_RESET_VAL 0x80000000

/*
 * SSP Presentation Time Stamp
 */
#define IAXXX_AF_WCPT_SSP_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_WCPT_SSP_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_SSP_PT_1_VAL_POS 0
#define IAXXX_AF_WCPT_SSP_PT_1_VAL_SIZE 20

/*
 * SSP Presentation Time Stamp is invalid when set.  In addition, if set,
 * then the Presentation Time Stamp will not change, and any SSP processor
 * timestamp requests will be dropped.
 */
#define IAXXX_AF_WCPT_SSP_PT_1_STAT_MASK 0x80000000
#define IAXXX_AF_WCPT_SSP_PT_1_STAT_RESET_VAL 0x1
#define IAXXX_AF_WCPT_SSP_PT_1_STAT_POS 31
#define IAXXX_AF_WCPT_SSP_PT_1_STAT_SIZE 1

/*** AF_WCPT_BOSS_PT_0 (0x40000118) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_WCPT_BOSS_PT_0_ADDR (0x40000118)
#define IAXXX_AF_WCPT_BOSS_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_BOSS_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_BOSS_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_BOSS_PT_0_RESET_VAL 0x00000000

/*
 * BOSS Presentation Time Stamp
 */
#define IAXXX_AF_WCPT_BOSS_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_BOSS_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_BOSS_PT_0_VAL_POS 0
#define IAXXX_AF_WCPT_BOSS_PT_0_VAL_SIZE 32

/*** AF_WCPT_BOSS_PT_1 (0x4000011c) ***/
/*
 * When the status bit is 0, provides the Wall Clock value when the most
 * recent write by the BOSS processor toggling the Processor Presentation
 * Time Stamp request bit occurred.  A write of any value to the register
 * will restore the status bit to 1 (invalid) to be ready for a subsequent
 * request.
 */
#define IAXXX_AF_WCPT_BOSS_PT_1_ADDR (0x4000011c)
#define IAXXX_AF_WCPT_BOSS_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_WCPT_BOSS_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_WCPT_BOSS_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_BOSS_PT_1_RESET_VAL 0x80000000

/*
 * BOSS Presentation Time Stamp
 */
#define IAXXX_AF_WCPT_BOSS_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_WCPT_BOSS_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_BOSS_PT_1_VAL_POS 0
#define IAXXX_AF_WCPT_BOSS_PT_1_VAL_SIZE 20

/*
 * BOSS Presentation Time Stamp is invalid when set.  In addition, if set,
 * then the Presentation Time Stamp will not change, and any BOSS processor
 * timestamp requests will be dropped.
 */
#define IAXXX_AF_WCPT_BOSS_PT_1_STAT_MASK 0x80000000
#define IAXXX_AF_WCPT_BOSS_PT_1_STAT_RESET_VAL 0x1
#define IAXXX_AF_WCPT_BOSS_PT_1_STAT_POS 31
#define IAXXX_AF_WCPT_BOSS_PT_1_STAT_SIZE 1

/*** AF_WCPT_TIMER_ENAB (0x40000120) ***/
/*
 * When set, the corresponding Wall Clock based Timer is enabled.  When
 * clear, the function is disabled and minimal power is consumed.
 */
#define IAXXX_AF_WCPT_TIMER_ENAB_ADDR (0x40000120)
#define IAXXX_AF_WCPT_TIMER_ENAB_MASK_VAL 0x0000000f
#define IAXXX_AF_WCPT_TIMER_ENAB_RMASK_VAL 0x0000000f
#define IAXXX_AF_WCPT_TIMER_ENAB_WMASK_VAL 0x0000000f
#define IAXXX_AF_WCPT_TIMER_ENAB_RESET_VAL 0x00000000

/*
 * Wall Clock Timer 0 Enable.
 */
#define IAXXX_AF_WCPT_TIMER_ENAB_E_0_MASK 0x00000001
#define IAXXX_AF_WCPT_TIMER_ENAB_E_0_RESET_VAL 0x0
#define IAXXX_AF_WCPT_TIMER_ENAB_E_0_POS 0
#define IAXXX_AF_WCPT_TIMER_ENAB_E_0_SIZE 1

/*
 * Wall Clock Timer 1 Enable.
 */
#define IAXXX_AF_WCPT_TIMER_ENAB_E_1_MASK 0x00000002
#define IAXXX_AF_WCPT_TIMER_ENAB_E_1_RESET_VAL 0x0
#define IAXXX_AF_WCPT_TIMER_ENAB_E_1_POS 1
#define IAXXX_AF_WCPT_TIMER_ENAB_E_1_SIZE 1

/*
 * Wall Clock Timer 2 Enable.
 */
#define IAXXX_AF_WCPT_TIMER_ENAB_E_2_MASK 0x00000004
#define IAXXX_AF_WCPT_TIMER_ENAB_E_2_RESET_VAL 0x0
#define IAXXX_AF_WCPT_TIMER_ENAB_E_2_POS 2
#define IAXXX_AF_WCPT_TIMER_ENAB_E_2_SIZE 1

/*
 * Wall Clock Timer 3 Enable.
 */
#define IAXXX_AF_WCPT_TIMER_ENAB_E_3_MASK 0x00000008
#define IAXXX_AF_WCPT_TIMER_ENAB_E_3_RESET_VAL 0x0
#define IAXXX_AF_WCPT_TIMER_ENAB_E_3_POS 3
#define IAXXX_AF_WCPT_TIMER_ENAB_E_3_SIZE 1

/*** AF_WCPT_TIMER_0 (0x40000124) ***/
/*
 * When written with a value corresponding to the LS 32 bits of a Wall Clock
 * value that will be achieved in the next 131 seconds, or that had been
 * achieved in the previous 43 seconds, a corresponding Wall Clock Timer
 * interrupt will be generated.  The interrupt will occur immediately for
 * values in the past, and at the time the Wall Clock achieves the written
 * value for values in the future.  Writing a new value while a previous
 * value is pending cancels pre-empts the previous interrupt request.
 * Reading the register always returns 0.
 */
#define IAXXX_AF_WCPT_TIMER_0_ADDR (0x40000124)
#define IAXXX_AF_WCPT_TIMER_0_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_0_WMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_0_RESET_VAL 0x00000000

/*
 * Requested Wall Clock Value (32 bits) for Timer 0
 */
#define IAXXX_AF_WCPT_TIMER_0_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_TIMER_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_TIMER_0_VAL_POS 0
#define IAXXX_AF_WCPT_TIMER_0_VAL_SIZE 32

/*** AF_WCPT_TIMER_1 (0x40000128) ***/
/*
 * When written with a value corresponding to the LS 32 bits of a Wall Clock
 * value that will be achieved in the next 131 seconds, or that had been
 * achieved in the previous 43 seconds, a corresponding Wall Clock Timer
 * interrupt will be generated.  The interrupt will occur immediately for
 * values in the past, and at the time the Wall Clock achieves the written
 * value for values in the future.  Writing a new value while a previous
 * value is pending cancels pre-empts the previous interrupt request.
 * Reading the register always returns 0.
 */
#define IAXXX_AF_WCPT_TIMER_1_ADDR (0x40000128)
#define IAXXX_AF_WCPT_TIMER_1_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_1_WMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_1_RESET_VAL 0x00000000

/*
 * Requested Wall Clock Value (32 bits) for Timer 1
 */
#define IAXXX_AF_WCPT_TIMER_1_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_TIMER_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_TIMER_1_VAL_POS 0
#define IAXXX_AF_WCPT_TIMER_1_VAL_SIZE 32

/*** AF_WCPT_TIMER_2 (0x4000012c) ***/
/*
 * When written with a value corresponding to the LS 32 bits of a Wall Clock
 * value that will be achieved in the next 131 seconds, or that had been
 * achieved in the previous 43 seconds, a corresponding Wall Clock Timer
 * interrupt will be generated.  The interrupt will occur immediately for
 * values in the past, and at the time the Wall Clock achieves the written
 * value for values in the future.  Writing a new value while a previous
 * value is pending cancels pre-empts the previous interrupt request.
 * Reading the register always returns 0.
 */
#define IAXXX_AF_WCPT_TIMER_2_ADDR (0x4000012c)
#define IAXXX_AF_WCPT_TIMER_2_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_2_WMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_2_RESET_VAL 0x00000000

/*
 * Requested Wall Clock Value (32 bits) for Timer 2
 */
#define IAXXX_AF_WCPT_TIMER_2_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_TIMER_2_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_TIMER_2_VAL_POS 0
#define IAXXX_AF_WCPT_TIMER_2_VAL_SIZE 32

/*** AF_WCPT_TIMER_3 (0x40000130) ***/
/*
 * When written with a value corresponding to the LS 32 bits of a Wall Clock
 * value that will be achieved in the next 131 seconds, or that had been
 * achieved in the previous 43 seconds, a corresponding Wall Clock Timer
 * interrupt will be generated.  The interrupt will occur immediately for
 * values in the past, and at the time the Wall Clock achieves the written
 * value for values in the future.  Writing a new value while a previous
 * value is pending cancels pre-empts the previous interrupt request.
 * Reading the register always returns 0.
 */
#define IAXXX_AF_WCPT_TIMER_3_ADDR (0x40000130)
#define IAXXX_AF_WCPT_TIMER_3_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_3_WMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_TIMER_3_RESET_VAL 0x00000000

/*
 * Requested Wall Clock Value (32 bits) for Timer 3
 */
#define IAXXX_AF_WCPT_TIMER_3_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_TIMER_3_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_TIMER_3_VAL_POS 0
#define IAXXX_AF_WCPT_TIMER_3_VAL_SIZE 32

/*** AF_WCPT_SCALE (0x40000134) ***/
/*
 * Must be programmed in combination with the Wall Clock NR Divider Register
 * to accommodate the Audio Clock rate and keep the Wall Clock LS bit
 * corresponding to a toggle rate of 24.576 MHz.
 * If the wall clock is less than 3.072 MHz, then the 3.072MHz tic to the
 * deadline scheduler will be at the lower rate, so any time stamps need to
 * be adjusted.
 * Note that if we don't need time stamps, the CPT_ALWAYS_INC field in
 * MISC_CTRL allows the AF to operate deadlines based on AF clock rather then
 * the scaled 3.072 MHz tic from the wcpt unit.
 */
#define IAXXX_AF_WCPT_SCALE_ADDR (0x40000134)
#define IAXXX_AF_WCPT_SCALE_MASK_VAL 0x00000003
#define IAXXX_AF_WCPT_SCALE_RMASK_VAL 0x00000003
#define IAXXX_AF_WCPT_SCALE_WMASK_VAL 0x00000003
#define IAXXX_AF_WCPT_SCALE_RESET_VAL 0x00000000

/*
 * Post NR WCPT Clock Scaling Factor
 * The fields should be programmed according to this table:
 * 00 - Wall Clock is greater than or equal to 24.576 MHz.
 * 01 - Wall Clock is less than 24.546 MHz, but greater than or equal to
 * 12.288 MHz.
 * 10 - Wall Clock is less than 12.288 MHz, but greater than or equal to
 * 6.144  MHz.
 * 11 - Wall Clock is less than 6.144  MHz, but greater than or equal to
 * 3.0732 MHz.
 *
 Field encoding values:
 *   0x0: grtr_or_eq_to_24_576
 *   0x1: grtr_or_eq_to_12_288
 *   0x2: grtr_or_eq_to_6_144
 *   0x3: grtr_or_eq_to_3_072
 */
#define IAXXX_AF_WCPT_SCALE_VAL_MASK 0x00000003
#define IAXXX_AF_WCPT_SCALE_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_SCALE_VAL_POS 0
#define IAXXX_AF_WCPT_SCALE_VAL_SIZE 2

/*** AF_WCPT_WALL_CLOCK_0 (0x40000138) ***/
/*
 * See WCPT_WALL_CLOCK_1.
 */
#define IAXXX_AF_WCPT_WALL_CLOCK_0_ADDR (0x40000138)
#define IAXXX_AF_WCPT_WALL_CLOCK_0_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_WALL_CLOCK_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_WALL_CLOCK_0_WMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_WALL_CLOCK_0_RESET_VAL 0x00000000

/*
 * Wall Clock Value to write (Lower bits)
 */
#define IAXXX_AF_WCPT_WALL_CLOCK_0_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_WALL_CLOCK_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_WALL_CLOCK_0_VAL_POS 0
#define IAXXX_AF_WCPT_WALL_CLOCK_0_VAL_SIZE 32

/*** AF_WCPT_WALL_CLOCK_1 (0x4000013c) ***/
/*
 * Upper bits to write for the Wall Clock Value.  Writing this register
 * triggers the transfer.
 */
#define IAXXX_AF_WCPT_WALL_CLOCK_1_ADDR (0x4000013c)
#define IAXXX_AF_WCPT_WALL_CLOCK_1_MASK_VAL 0x000fffff
#define IAXXX_AF_WCPT_WALL_CLOCK_1_RMASK_VAL 0x000fffff
#define IAXXX_AF_WCPT_WALL_CLOCK_1_WMASK_VAL 0x000fffff
#define IAXXX_AF_WCPT_WALL_CLOCK_1_RESET_VAL 0x00000000

/*
 * Wall Clock Value to write (Upper bits).  The write to this field triggers
 * the transfer of {WCPT_WALL_CLOCK_1, WCPT_WALL_CLOCK_0}.
 */
#define IAXXX_AF_WCPT_WALL_CLOCK_1_VAL_MASK 0x000fffff
#define IAXXX_AF_WCPT_WALL_CLOCK_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_WALL_CLOCK_1_VAL_POS 0
#define IAXXX_AF_WCPT_WALL_CLOCK_1_VAL_SIZE 20

/*** AF_WCPT_WALL_CLOCK_RD_0 (0x40000140) ***/
/*
 * Lower bits to read for the Wall Clock Value.  This readback path is for
 * debug only as it is unsynchronized.
 */
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_ADDR (0x40000140)
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_MASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_RESET_VAL 0x00000000

/*
 * Wall Clock Value to read (Lower bits)
 */
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_VAL_MASK 0xffffffff
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_VAL_POS 0
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_0_VAL_SIZE 32

/*** AF_WCPT_WALL_CLOCK_RD_1 (0x40000144) ***/
/*
 * Upper bits to read for the Wall Clock Value.  This readback path is for
 * debug only as it is unsynchronized.
 */
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_ADDR (0x40000144)
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_MASK_VAL 0x000fffff
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_RMASK_VAL 0x000fffff
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_WMASK_VAL 0x00000000
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_RESET_VAL 0x00000000

/*
 * Wall Clock Value to read (Upper bits).  The write to this field triggers
 * the transfer of {WCPT_WALL_CLOCK_1, WCPT_WALL_CLOCK_0}.
 */
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_VAL_MASK 0x000fffff
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_VAL_POS 0
#define IAXXX_AF_WCPT_WALL_CLOCK_RD_1_VAL_SIZE 20

/*** AF_LS_AFS_FIFO_ERR_UNMASK (0x40000148) ***/
/*
 * Contains the unmask control for the AFS FIFO error flags for each logical
 * stream. These bits are ANDed with the corresponding RAW FIFO Error flags
 * to generate actual interrupts.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_ADDR (0x40000148)
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_WMASK_VAL 0xffffffff
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_RESET_VAL 0x00000000

/*
 * Unmask the AFS FIFO Error Condition for logical stream 0.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_0_MASK 0x00000001
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_0_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_0_POS 0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_0_SIZE 1

/*
 * Unmask the AFS FIFO Error Condition for logical stream 1.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_1_MASK 0x00000002
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_1_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_1_POS 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_1_SIZE 1

/*
 * Unmask the AFS FIFO Error Condition for logical stream 2.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_2_MASK 0x00000004
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_2_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_2_POS 2
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_2_SIZE 1

/*
 * Unmask the AFS FIFO Error Condition for logical stream 3.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_3_MASK 0x00000008
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_3_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_3_POS 3
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_3_SIZE 1

/*
 * Unmask the AFS FIFO Error Condition for logical stream 4.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_4_MASK 0x00000010
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_4_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_4_POS 4
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_4_SIZE 1

/*
 * Unmask the AFS FIFO Error Condition for logical stream 5.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_5_MASK 0x00000020
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_5_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_5_POS 5
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_5_SIZE 1

/*
 * Unmask the AFS FIFO Error Condition for logical stream 6.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_6_MASK 0x00000040
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_6_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_6_POS 6
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_6_SIZE 1

/*
 * Unmask the AFS FIFO Error Condition for logical stream 7.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_7_MASK 0x00000080
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_7_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_7_POS 7
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_7_SIZE 1

/*
 * Unmask the AFS FIFO Error Condition for logical stream 8.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_8_MASK 0x00000100
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_8_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_8_POS 8
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_8_SIZE 1

/*
 * Unmask the AFS FIFO Error Condition for logical stream 9.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_9_MASK 0x00000200
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_9_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_9_POS 9
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_9_SIZE 1

/*
 * Unmask the AFS FIFO Error Condition for logical stream 10.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_10_MASK 0x00000400
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_10_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_10_POS 10
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_10_SIZE 1

/*
 * Unmask the AFS FIFO Error Condition for logical stream 11.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_11_MASK 0x00000800
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_11_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_11_POS 11
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_11_SIZE 1

/*
 * Unmask the AFS FIFO Error Condition for logical stream 12.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_12_MASK 0x00001000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_12_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_12_POS 12
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_12_SIZE 1

/*
 * Unmask the AFS FIFO Error Condition for logical stream 13.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_13_MASK 0x00002000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_13_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_13_POS 13
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_13_SIZE 1

/*
 * Unmask the AFS FIFO Error Condition for logical stream 14.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_14_MASK 0x00004000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_14_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_14_POS 14
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_14_SIZE 1

/*
 * Unmask the AFS FIFO Error Condition for logical stream 15.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_15_MASK 0x00008000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_15_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_15_POS 15
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_U_15_SIZE 1

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 0.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_0_MASK 0x00010000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_0_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_0_POS 16
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_0_SIZE 1

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 1.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_1_MASK 0x00020000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_1_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_1_POS 17
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_1_SIZE 1

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 2.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_2_MASK 0x00040000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_2_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_2_POS 18
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_2_SIZE 1

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 3.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_3_MASK 0x00080000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_3_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_3_POS 19
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_3_SIZE 1

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 4.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_4_MASK 0x00100000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_4_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_4_POS 20
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_4_SIZE 1

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 5.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_5_MASK 0x00200000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_5_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_5_POS 21
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_5_SIZE 1

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 6.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_6_MASK 0x00400000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_6_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_6_POS 22
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_6_SIZE 1

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 7.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_7_MASK 0x00800000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_7_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_7_POS 23
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_7_SIZE 1

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 8.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_8_MASK 0x01000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_8_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_8_POS 24
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_8_SIZE 1

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 9.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_9_MASK 0x02000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_9_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_9_POS 25
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_9_SIZE 1

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 10.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_10_MASK 0x04000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_10_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_10_POS 26
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_10_SIZE 1

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 11.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_11_MASK 0x08000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_11_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_11_POS 27
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_11_SIZE 1

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 12.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_12_MASK 0x10000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_12_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_12_POS 28
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_12_SIZE 1

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 13.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_13_MASK 0x20000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_13_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_13_POS 29
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_13_SIZE 1

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 14.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_14_MASK 0x40000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_14_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_14_POS 30
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_14_SIZE 1

/*
 * Unmask the AFS FIFO Overwrite Condition for logical stream 15.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_15_MASK 0x80000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_15_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_15_POS 31
#define IAXXX_AF_LS_AFS_FIFO_ERR_UNMASK_UOVR_15_SIZE 1

/*** AF_LS_AFS_FIFO_ERR (0x4000014c) ***/
/*
 * Contains the (post-mask) latched (sticky bit) AFS FIFO error flags for
 * each logical streams.  AFS_FIFO_ERROR indicates, for RX logical streams,
 * "popping" an empty FIFO; for TX streams, "pushing" a full FIFO.
 * AFS_FIFO_OVERWRITE indicates TX logical streams only, a data write to a
 * full FIFO.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_ADDR (0x4000014c)
#define IAXXX_AF_LS_AFS_FIFO_ERR_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_AFS_FIFO_ERR_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_AFS_FIFO_ERR_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_RESET_VAL 0x00000000

/*
 * A AFS FIFO Error Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_0_POS 0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_0_SIZE 1

/*
 * A AFS FIFO Error Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_1_POS 1
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_1_SIZE 1

/*
 * A AFS FIFO Error Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_2_POS 2
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_2_SIZE 1

/*
 * A AFS FIFO Error Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_3_POS 3
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_3_SIZE 1

/*
 * A AFS FIFO Error Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_4_POS 4
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_4_SIZE 1

/*
 * A AFS FIFO Error Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_5_POS 5
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_5_SIZE 1

/*
 * A AFS FIFO Error Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_6_POS 6
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_6_SIZE 1

/*
 * A AFS FIFO Error Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_7_POS 7
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_7_SIZE 1

/*
 * A AFS FIFO Error Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_8_POS 8
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_8_SIZE 1

/*
 * A AFS FIFO Error Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_9_POS 9
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_9_SIZE 1

/*
 * A AFS FIFO Error Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_10_POS 10
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_10_SIZE 1

/*
 * A AFS FIFO Error Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_11_POS 11
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_11_SIZE 1

/*
 * A AFS FIFO Error Condition has occurred for logical stream 12.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_12_MASK 0x00001000
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_12_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_12_POS 12
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_12_SIZE 1

/*
 * A AFS FIFO Error Condition has occurred for logical stream 13.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_13_MASK 0x00002000
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_13_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_13_POS 13
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_13_SIZE 1

/*
 * A AFS FIFO Error Condition has occurred for logical stream 14.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_14_MASK 0x00004000
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_14_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_14_POS 14
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_14_SIZE 1

/*
 * A AFS FIFO Error Condition has occurred for logical stream 15.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_15_MASK 0x00008000
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_15_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_15_POS 15
#define IAXXX_AF_LS_AFS_FIFO_ERR_E_15_SIZE 1

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_0_MASK 0x00010000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_0_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_0_POS 16
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_0_SIZE 1

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_1_MASK 0x00020000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_1_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_1_POS 17
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_1_SIZE 1

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_2_MASK 0x00040000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_2_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_2_POS 18
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_2_SIZE 1

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_3_MASK 0x00080000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_3_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_3_POS 19
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_3_SIZE 1

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_4_MASK 0x00100000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_4_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_4_POS 20
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_4_SIZE 1

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_5_MASK 0x00200000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_5_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_5_POS 21
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_5_SIZE 1

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_6_MASK 0x00400000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_6_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_6_POS 22
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_6_SIZE 1

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_7_MASK 0x00800000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_7_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_7_POS 23
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_7_SIZE 1

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_8_MASK 0x01000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_8_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_8_POS 24
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_8_SIZE 1

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_9_MASK 0x02000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_9_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_9_POS 25
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_9_SIZE 1

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_10_MASK 0x04000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_10_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_10_POS 26
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_10_SIZE 1

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_11_MASK 0x08000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_11_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_11_POS 27
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_11_SIZE 1

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 12.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_12_MASK 0x10000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_12_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_12_POS 28
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_12_SIZE 1

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 13.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_13_MASK 0x20000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_13_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_13_POS 29
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_13_SIZE 1

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 14.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_14_MASK 0x40000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_14_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_14_POS 30
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_14_SIZE 1

/*
 * A AFS FIFO Overwrite Condition has occurred for logical stream 15.
 */
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_15_MASK 0x80000000
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_15_RESET_VAL 0x0
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_15_POS 31
#define IAXXX_AF_LS_AFS_FIFO_ERR_OVERWRITE_15_SIZE 1

/*** AF_LS_RAW_AFS_FIFO_ERR (0x40000150) ***/
/*
 * Contains the RAW (pre-mask) latched (sticky bit) AFS FIFO error flags for
 * each logical streams.  AFS_FIFO_ERROR indicates, for RX logical streams,
 * "popping" an empty FIFO; for TX streams, "pushing" a full FIFO.
 * AFS_FIFO_OVERWRITE indicates TX logical streams only, a data write to a
 * full FIFO.  A write of a "1" to any bit will clear that bit.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_ADDR (0x40000150)
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_WMASK_VAL 0xffffffff
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_RESET_VAL 0x00000000

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_0_POS 0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_0_SIZE 1

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_1_POS 1
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_1_SIZE 1

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_2_POS 2
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_2_SIZE 1

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_3_POS 3
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_3_SIZE 1

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_4_POS 4
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_4_SIZE 1

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_5_POS 5
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_5_SIZE 1

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_6_POS 6
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_6_SIZE 1

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_7_POS 7
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_7_SIZE 1

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_8_POS 8
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_8_SIZE 1

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_9_POS 9
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_9_SIZE 1

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_10_POS 10
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_10_SIZE 1

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_11_POS 11
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_11_SIZE 1

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 12.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_12_MASK 0x00001000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_12_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_12_POS 12
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_12_SIZE 1

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 13.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_13_MASK 0x00002000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_13_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_13_POS 13
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_13_SIZE 1

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 14.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_14_MASK 0x00004000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_14_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_14_POS 14
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_14_SIZE 1

/*
 * A Raw AFS FIFO Error Condition has occurred for logical stream 15.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_15_MASK 0x00008000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_15_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_15_POS 15
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_E_15_SIZE 1

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_0_MASK 0x00010000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_0_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_0_POS 16
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_0_SIZE 1

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_1_MASK 0x00020000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_1_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_1_POS 17
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_1_SIZE 1

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_2_MASK 0x00040000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_2_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_2_POS 18
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_2_SIZE 1

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_3_MASK 0x00080000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_3_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_3_POS 19
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_3_SIZE 1

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_4_MASK 0x00100000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_4_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_4_POS 20
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_4_SIZE 1

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_5_MASK 0x00200000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_5_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_5_POS 21
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_5_SIZE 1

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_6_MASK 0x00400000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_6_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_6_POS 22
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_6_SIZE 1

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_7_MASK 0x00800000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_7_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_7_POS 23
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_7_SIZE 1

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_8_MASK 0x01000000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_8_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_8_POS 24
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_8_SIZE 1

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_9_MASK 0x02000000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_9_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_9_POS 25
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_9_SIZE 1

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_10_MASK 0x04000000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_10_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_10_POS 26
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_10_SIZE 1

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_11_MASK 0x08000000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_11_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_11_POS 27
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_11_SIZE 1

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 12.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_12_MASK 0x10000000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_12_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_12_POS 28
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_12_SIZE 1

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 13.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_13_MASK 0x20000000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_13_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_13_POS 29
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_13_SIZE 1

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 14.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_14_MASK 0x40000000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_14_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_14_POS 30
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_14_SIZE 1

/*
 * A Raw AFS FIFO Overwrite Condition has occurred for logical stream 15.
 */
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_15_MASK 0x80000000
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_15_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_15_POS 31
#define IAXXX_AF_LS_RAW_AFS_FIFO_ERR_OVERWRITE_15_SIZE 1

/*** AF_LS_TUS_FIFO_ERR_UNMASK (0x40000154) ***/
/*
 * Contains the unmask control for the TUS FIFO error flags for each logical
 * stream. These bits are ANDed with the corresponding RAW FIFO Error flags
 * to generate actual interrupts.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_ADDR (0x40000154)
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_WMASK_VAL 0xffffffff
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_RESET_VAL 0x00000000

/*
 * Unmask the TUS FIFO Error Condition for logical stream 0.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_0_MASK 0x00000001
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_0_POS 0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_0_SIZE 1

/*
 * Unmask the TUS FIFO Error Condition for logical stream 1.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_1_MASK 0x00000002
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_1_POS 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_1_SIZE 1

/*
 * Unmask the TUS FIFO Error Condition for logical stream 2.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_2_MASK 0x00000004
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_2_POS 2
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_2_SIZE 1

/*
 * Unmask the TUS FIFO Error Condition for logical stream 3.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_3_MASK 0x00000008
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_3_POS 3
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_3_SIZE 1

/*
 * Unmask the TUS FIFO Error Condition for logical stream 4.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_4_MASK 0x00000010
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_4_POS 4
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_4_SIZE 1

/*
 * Unmask the TUS FIFO Error Condition for logical stream 5.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_5_MASK 0x00000020
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_5_POS 5
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_5_SIZE 1

/*
 * Unmask the TUS FIFO Error Condition for logical stream 6.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_6_MASK 0x00000040
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_6_POS 6
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_6_SIZE 1

/*
 * Unmask the TUS FIFO Error Condition for logical stream 7.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_7_MASK 0x00000080
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_7_POS 7
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_7_SIZE 1

/*
 * Unmask the TUS FIFO Error Condition for logical stream 8.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_8_MASK 0x00000100
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_8_POS 8
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_8_SIZE 1

/*
 * Unmask the TUS FIFO Error Condition for logical stream 9.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_9_MASK 0x00000200
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_9_POS 9
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_9_SIZE 1

/*
 * Unmask the TUS FIFO Error Condition for logical stream 10.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_10_MASK 0x00000400
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_10_POS 10
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_10_SIZE 1

/*
 * Unmask the TUS FIFO Error Condition for logical stream 11.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_11_MASK 0x00000800
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_11_POS 11
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_11_SIZE 1

/*
 * Unmask the TUS FIFO Error Condition for logical stream 12.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_12_MASK 0x00001000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_12_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_12_POS 12
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_12_SIZE 1

/*
 * Unmask the TUS FIFO Error Condition for logical stream 13.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_13_MASK 0x00002000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_13_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_13_POS 13
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_13_SIZE 1

/*
 * Unmask the TUS FIFO Error Condition for logical stream 14.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_14_MASK 0x00004000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_14_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_14_POS 14
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_14_SIZE 1

/*
 * Unmask the TUS FIFO Error Condition for logical stream 15.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_15_MASK 0x00008000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_15_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_15_POS 15
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_U_15_SIZE 1

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 0.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_0_MASK 0x00010000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_0_POS 16
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_0_SIZE 1

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 1.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_1_MASK 0x00020000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_1_POS 17
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_1_SIZE 1

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 2.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_2_MASK 0x00040000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_2_POS 18
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_2_SIZE 1

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 3.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_3_MASK 0x00080000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_3_POS 19
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_3_SIZE 1

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 4.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_4_MASK 0x00100000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_4_POS 20
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_4_SIZE 1

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 5.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_5_MASK 0x00200000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_5_POS 21
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_5_SIZE 1

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 6.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_6_MASK 0x00400000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_6_POS 22
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_6_SIZE 1

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 7.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_7_MASK 0x00800000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_7_POS 23
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_7_SIZE 1

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 8.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_8_MASK 0x01000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_8_POS 24
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_8_SIZE 1

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 9.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_9_MASK 0x02000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_9_POS 25
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_9_SIZE 1

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 10.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_10_MASK 0x04000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_10_POS 26
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_10_SIZE 1

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 11.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_11_MASK 0x08000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_11_POS 27
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_11_SIZE 1

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 12.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_12_MASK 0x10000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_12_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_12_POS 28
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_12_SIZE 1

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 13.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_13_MASK 0x20000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_13_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_13_POS 29
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_13_SIZE 1

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 14.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_14_MASK 0x40000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_14_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_14_POS 30
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_14_SIZE 1

/*
 * Unmask the TUS FIFO Overwrite Condition for logical stream 15.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_15_MASK 0x80000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_15_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_15_POS 31
#define IAXXX_AF_LS_TUS_FIFO_ERR_UNMASK_UOVR_15_SIZE 1

/*** AF_LS_TUS_FIFO_ERR (0x40000158) ***/
/*
 * Contains the (post-mask) latched (sticky bit) TUS FIFO error flags for
 * each logical streams.  TUS_FIFO_ERROR indicates, for TX logical streams,
 * "popping" an empty FIFO. TUS_FIFO_OVERWRITE indicates RX logical streams
 * only, a data write to a full FIFO.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_ADDR (0x40000158)
#define IAXXX_AF_LS_TUS_FIFO_ERR_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_TUS_FIFO_ERR_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_TUS_FIFO_ERR_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_RESET_VAL 0x00000000

/*
 * A TUS FIFO Error Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_0_POS 0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_0_SIZE 1

/*
 * A TUS FIFO Error Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_1_POS 1
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_1_SIZE 1

/*
 * A TUS FIFO Error Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_2_POS 2
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_2_SIZE 1

/*
 * A TUS FIFO Error Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_3_POS 3
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_3_SIZE 1

/*
 * A TUS FIFO Error Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_4_POS 4
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_4_SIZE 1

/*
 * A TUS FIFO Error Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_5_POS 5
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_5_SIZE 1

/*
 * A TUS FIFO Error Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_6_POS 6
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_6_SIZE 1

/*
 * A TUS FIFO Error Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_7_POS 7
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_7_SIZE 1

/*
 * A TUS FIFO Error Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_8_POS 8
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_8_SIZE 1

/*
 * A TUS FIFO Error Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_9_POS 9
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_9_SIZE 1

/*
 * A TUS FIFO Error Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_10_POS 10
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_10_SIZE 1

/*
 * A TUS FIFO Error Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_11_POS 11
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_11_SIZE 1

/*
 * A TUS FIFO Error Condition has occurred for logical stream 12.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_12_MASK 0x00001000
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_12_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_12_POS 12
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_12_SIZE 1

/*
 * A TUS FIFO Error Condition has occurred for logical stream 13.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_13_MASK 0x00002000
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_13_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_13_POS 13
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_13_SIZE 1

/*
 * A TUS FIFO Error Condition has occurred for logical stream 14.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_14_MASK 0x00004000
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_14_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_14_POS 14
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_14_SIZE 1

/*
 * A TUS FIFO Error Condition has occurred for logical stream 15.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_15_MASK 0x00008000
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_15_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_15_POS 15
#define IAXXX_AF_LS_TUS_FIFO_ERR_E_15_SIZE 1

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_0_MASK 0x00010000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_0_POS 16
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_0_SIZE 1

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_1_MASK 0x00020000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_1_POS 17
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_1_SIZE 1

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_2_MASK 0x00040000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_2_POS 18
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_2_SIZE 1

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_3_MASK 0x00080000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_3_POS 19
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_3_SIZE 1

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_4_MASK 0x00100000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_4_POS 20
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_4_SIZE 1

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_5_MASK 0x00200000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_5_POS 21
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_5_SIZE 1

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_6_MASK 0x00400000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_6_POS 22
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_6_SIZE 1

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_7_MASK 0x00800000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_7_POS 23
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_7_SIZE 1

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_8_MASK 0x01000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_8_POS 24
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_8_SIZE 1

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_9_MASK 0x02000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_9_POS 25
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_9_SIZE 1

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_10_MASK 0x04000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_10_POS 26
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_10_SIZE 1

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_11_MASK 0x08000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_11_POS 27
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_11_SIZE 1

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 12.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_12_MASK 0x10000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_12_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_12_POS 28
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_12_SIZE 1

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 13.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_13_MASK 0x20000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_13_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_13_POS 29
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_13_SIZE 1

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 14.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_14_MASK 0x40000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_14_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_14_POS 30
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_14_SIZE 1

/*
 * A TUS FIFO Overwrite Condition has occurred for logical stream 15.
 */
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_15_MASK 0x80000000
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_15_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_15_POS 31
#define IAXXX_AF_LS_TUS_FIFO_ERR_OVERWRITE_15_SIZE 1

/*** AF_LS_RAW_TUS_FIFO_ERR (0x4000015c) ***/
/*
 * Contains the RAW (pre-mask) latched (sticky bit) TUS FIFO error flags for
 * each logical streams.  TUS_FIFO_ERROR indicates, for TX logical streams,
 * "popping" an empty FIFO. TUS_FIFO_OVERWRITE indicates RX logical streams
 * only, a data write to a full FIFO.  A write of a "1" to any bit will clear
 * that bit.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_ADDR (0x4000015c)
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_WMASK_VAL 0xffffffff
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_RESET_VAL 0x00000000

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_0_POS 0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_0_SIZE 1

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_1_POS 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_1_SIZE 1

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_2_POS 2
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_2_SIZE 1

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_3_POS 3
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_3_SIZE 1

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_4_POS 4
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_4_SIZE 1

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_5_POS 5
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_5_SIZE 1

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_6_POS 6
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_6_SIZE 1

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_7_POS 7
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_7_SIZE 1

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_8_POS 8
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_8_SIZE 1

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_9_POS 9
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_9_SIZE 1

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_10_POS 10
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_10_SIZE 1

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_11_POS 11
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_11_SIZE 1

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 12.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_12_MASK 0x00001000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_12_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_12_POS 12
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_12_SIZE 1

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 13.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_13_MASK 0x00002000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_13_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_13_POS 13
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_13_SIZE 1

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 14.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_14_MASK 0x00004000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_14_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_14_POS 14
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_14_SIZE 1

/*
 * A Raw TUS FIFO Error Condition has occurred for logical stream 15.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_15_MASK 0x00008000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_15_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_15_POS 15
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_E_15_SIZE 1

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_0_MASK 0x00010000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_0_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_0_POS 16
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_0_SIZE 1

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_1_MASK 0x00020000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_1_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_1_POS 17
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_1_SIZE 1

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_2_MASK 0x00040000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_2_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_2_POS 18
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_2_SIZE 1

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_3_MASK 0x00080000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_3_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_3_POS 19
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_3_SIZE 1

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_4_MASK 0x00100000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_4_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_4_POS 20
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_4_SIZE 1

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_5_MASK 0x00200000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_5_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_5_POS 21
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_5_SIZE 1

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_6_MASK 0x00400000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_6_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_6_POS 22
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_6_SIZE 1

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_7_MASK 0x00800000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_7_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_7_POS 23
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_7_SIZE 1

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_8_MASK 0x01000000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_8_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_8_POS 24
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_8_SIZE 1

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_9_MASK 0x02000000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_9_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_9_POS 25
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_9_SIZE 1

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_10_MASK 0x04000000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_10_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_10_POS 26
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_10_SIZE 1

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_11_MASK 0x08000000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_11_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_11_POS 27
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_11_SIZE 1

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 12.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_12_MASK 0x10000000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_12_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_12_POS 28
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_12_SIZE 1

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 13.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_13_MASK 0x20000000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_13_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_13_POS 29
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_13_SIZE 1

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 14.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_14_MASK 0x40000000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_14_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_14_POS 30
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_14_SIZE 1

/*
 * A Raw TUS FIFO Overwrite Condition has occurred for logical stream 15.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_15_MASK 0x80000000
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_15_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_15_POS 31
#define IAXXX_AF_LS_RAW_TUS_FIFO_ERR_OVERWRITE_15_SIZE 1

/*** AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK (0x40000160) ***/
/*
 * Contains the unmask control for the TUS FIFO Coherency error flags for
 * each logical stream. These bits are ANDed with the corresponding RAW TUS
 * FIFO Coherency error flags to generate actual interrupts.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_ADDR (0x40000160)
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_WMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_RESET_VAL 0x00000000

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 0.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_0_MASK 0x00000001
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_0_POS 0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_0_SIZE 1

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 1.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_1_MASK 0x00000002
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_1_POS 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_1_SIZE 1

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 2.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_2_MASK 0x00000004
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_2_POS 2
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_2_SIZE 1

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 3.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_3_MASK 0x00000008
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_3_POS 3
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_3_SIZE 1

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 4.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_4_MASK 0x00000010
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_4_POS 4
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_4_SIZE 1

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 5.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_5_MASK 0x00000020
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_5_POS 5
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_5_SIZE 1

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 6.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_6_MASK 0x00000040
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_6_POS 6
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_6_SIZE 1

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 7.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_7_MASK 0x00000080
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_7_POS 7
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_7_SIZE 1

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 8.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_8_MASK 0x00000100
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_8_POS 8
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_8_SIZE 1

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 9.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_9_MASK 0x00000200
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_9_POS 9
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_9_SIZE 1

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 10.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_10_MASK 0x00000400
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_10_POS 10
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_10_SIZE 1

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 11.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_11_MASK 0x00000800
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_11_POS 11
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_11_SIZE 1

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 12.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_12_MASK 0x00001000
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_12_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_12_POS 12
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_12_SIZE 1

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 13.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_13_MASK 0x00002000
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_13_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_13_POS 13
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_13_SIZE 1

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 14.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_14_MASK 0x00004000
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_14_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_14_POS 14
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_14_SIZE 1

/*
 * Unmask the TUS FIFO Coherency Error Condition for logical stream 15.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_15_MASK 0x00008000
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_15_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_15_POS 15
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_UNMASK_U_15_SIZE 1

/*** AF_LS_TUS_FIFO_COHERENCY_ERR (0x40000164) ***/
/*
 * Contains the (post-mask) latched (sticky bit) TUS FIFO Coherency error
 * flag for each logical stream.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_ADDR (0x40000164)
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_RESET_VAL 0x00000000

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_0_POS 0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_0_SIZE 1

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_1_POS 1
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_1_SIZE 1

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_2_POS 2
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_2_SIZE 1

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_3_POS 3
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_3_SIZE 1

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_4_POS 4
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_4_SIZE 1

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_5_POS 5
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_5_SIZE 1

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_6_POS 6
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_6_SIZE 1

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_7_POS 7
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_7_SIZE 1

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_8_POS 8
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_8_SIZE 1

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_9_POS 9
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_9_SIZE 1

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_10_POS 10
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_10_SIZE 1

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_11_POS 11
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_11_SIZE 1

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 12.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_12_MASK 0x00001000
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_12_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_12_POS 12
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_12_SIZE 1

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 13.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_13_MASK 0x00002000
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_13_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_13_POS 13
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_13_SIZE 1

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 14.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_14_MASK 0x00004000
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_14_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_14_POS 14
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_14_SIZE 1

/*
 * A TUS FIFO Coherency Error Condition has occurred for logical stream 15.
 */
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_15_MASK 0x00008000
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_15_RESET_VAL 0x0
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_15_POS 15
#define IAXXX_AF_LS_TUS_FIFO_COHERENCY_ERR_E_15_SIZE 1

/*** AF_LS_RAW_TUS_FIFO_COHERENCY_ERR (0x40000168) ***/
/*
 * Contains the RAW (pre-mask) latched (sticky bit) TUS FIFO Coherency error
 * flag for each logical stream. A write of a '1' to any bit will clear that
 * bit.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_ADDR (0x40000168)
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_WMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_RESET_VAL 0x00000000

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 0.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_0_POS 0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_0_SIZE 1

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 1.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_1_POS 1
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_1_SIZE 1

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 2.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_2_POS 2
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_2_SIZE 1

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 3.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_3_POS 3
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_3_SIZE 1

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 4.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_4_POS 4
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_4_SIZE 1

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 5.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_5_POS 5
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_5_SIZE 1

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 6.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_6_POS 6
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_6_SIZE 1

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 7.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_7_POS 7
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_7_SIZE 1

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 8.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_8_POS 8
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_8_SIZE 1

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 9.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_9_POS 9
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_9_SIZE 1

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 10.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_10_POS 10
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_10_SIZE 1

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 11.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_11_POS 11
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_11_SIZE 1

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 12.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_12_MASK 0x00001000
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_12_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_12_POS 12
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_12_SIZE 1

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 13.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_13_MASK 0x00002000
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_13_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_13_POS 13
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_13_SIZE 1

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 14.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_14_MASK 0x00004000
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_14_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_14_POS 14
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_14_SIZE 1

/*
 * A Raw TUS FIFO Coherency Error Condition has occurred for logical stream
 * 15.
 */
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_15_MASK 0x00008000
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_15_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_15_POS 15
#define IAXXX_AF_LS_RAW_TUS_FIFO_COHERENCY_ERR_E_15_SIZE 1

/*** AF_LS_DEADLINE_ERR_UNMASK (0x4000016c) ***/
/*
 * Contains the unmask control for the Deadline error flags for each logical
 * stream. These bits are ANDed with the corresponding RAW Deadline error
 * flags to generate actual interrupts.  These error conditions are for debug
 * use
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_ADDR (0x4000016c)
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_WMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_RESET_VAL 0x00000000

/*
 * Unmask the Deadline Not Met Condition for logical stream 0.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_0_MASK 0x00000001
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_0_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_0_POS 0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_0_SIZE 1

/*
 * Unmask the Deadline Not Met Condition for logical stream 1.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_1_MASK 0x00000002
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_1_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_1_POS 1
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_1_SIZE 1

/*
 * Unmask the Deadline Not Met Condition for logical stream 2.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_2_MASK 0x00000004
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_2_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_2_POS 2
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_2_SIZE 1

/*
 * Unmask the Deadline Not Met Condition for logical stream 3.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_3_MASK 0x00000008
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_3_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_3_POS 3
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_3_SIZE 1

/*
 * Unmask the Deadline Not Met Condition for logical stream 4.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_4_MASK 0x00000010
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_4_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_4_POS 4
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_4_SIZE 1

/*
 * Unmask the Deadline Not Met Condition for logical stream 5.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_5_MASK 0x00000020
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_5_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_5_POS 5
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_5_SIZE 1

/*
 * Unmask the Deadline Not Met Condition for logical stream 6.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_6_MASK 0x00000040
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_6_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_6_POS 6
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_6_SIZE 1

/*
 * Unmask the Deadline Not Met Condition for logical stream 7.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_7_MASK 0x00000080
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_7_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_7_POS 7
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_7_SIZE 1

/*
 * Unmask the Deadline Not Met Condition for logical stream 8.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_8_MASK 0x00000100
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_8_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_8_POS 8
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_8_SIZE 1

/*
 * Unmask the Deadline Not Met Condition for logical stream 9.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_9_MASK 0x00000200
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_9_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_9_POS 9
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_9_SIZE 1

/*
 * Unmask the Deadline Not Met Condition for logical stream 10.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_10_MASK 0x00000400
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_10_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_10_POS 10
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_10_SIZE 1

/*
 * Unmask the Deadline Not Met Condition for logical stream 11.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_11_MASK 0x00000800
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_11_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_11_POS 11
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_11_SIZE 1

/*
 * Unmask the Deadline Not Met Condition for logical stream 12.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_12_MASK 0x00001000
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_12_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_12_POS 12
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_12_SIZE 1

/*
 * Unmask the Deadline Not Met Condition for logical stream 13.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_13_MASK 0x00002000
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_13_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_13_POS 13
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_13_SIZE 1

/*
 * Unmask the Deadline Not Met Condition for logical stream 14.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_14_MASK 0x00004000
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_14_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_14_POS 14
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_14_SIZE 1

/*
 * Unmask the Deadline Not Met Condition for logical stream 15.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_15_MASK 0x00008000
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_15_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_15_POS 15
#define IAXXX_AF_LS_DEADLINE_ERR_UNMASK_U_15_SIZE 1

/*** AF_LS_DEADLINE_ERR (0x40000170) ***/
/*
 * Contains the (post-mask) latched (sticky bit) Deadline error flag for each
 * logical streams.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_ADDR (0x40000170)
#define IAXXX_AF_LS_DEADLINE_ERR_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_DEADLINE_ERR_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_DEADLINE_ERR_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_DEADLINE_ERR_RESET_VAL 0x00000000

/*
 * A Deadline Not Met Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_DEADLINE_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_0_POS 0
#define IAXXX_AF_LS_DEADLINE_ERR_E_0_SIZE 1

/*
 * A Deadline Not Met Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_DEADLINE_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_1_POS 1
#define IAXXX_AF_LS_DEADLINE_ERR_E_1_SIZE 1

/*
 * A Deadline Not Met Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_DEADLINE_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_2_POS 2
#define IAXXX_AF_LS_DEADLINE_ERR_E_2_SIZE 1

/*
 * A Deadline Not Met Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_DEADLINE_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_3_POS 3
#define IAXXX_AF_LS_DEADLINE_ERR_E_3_SIZE 1

/*
 * A Deadline Not Met Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_DEADLINE_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_4_POS 4
#define IAXXX_AF_LS_DEADLINE_ERR_E_4_SIZE 1

/*
 * A Deadline Not Met Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_DEADLINE_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_5_POS 5
#define IAXXX_AF_LS_DEADLINE_ERR_E_5_SIZE 1

/*
 * A Deadline Not Met Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_DEADLINE_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_6_POS 6
#define IAXXX_AF_LS_DEADLINE_ERR_E_6_SIZE 1

/*
 * A Deadline Not Met Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_DEADLINE_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_7_POS 7
#define IAXXX_AF_LS_DEADLINE_ERR_E_7_SIZE 1

/*
 * A Deadline Not Met Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_DEADLINE_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_8_POS 8
#define IAXXX_AF_LS_DEADLINE_ERR_E_8_SIZE 1

/*
 * A Deadline Not Met Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_DEADLINE_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_9_POS 9
#define IAXXX_AF_LS_DEADLINE_ERR_E_9_SIZE 1

/*
 * A Deadline Not Met Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_DEADLINE_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_10_POS 10
#define IAXXX_AF_LS_DEADLINE_ERR_E_10_SIZE 1

/*
 * A Deadline Not Met Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_DEADLINE_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_11_POS 11
#define IAXXX_AF_LS_DEADLINE_ERR_E_11_SIZE 1

/*
 * A Deadline Not Met Condition has occurred for logical stream 12.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_12_MASK 0x00001000
#define IAXXX_AF_LS_DEADLINE_ERR_E_12_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_12_POS 12
#define IAXXX_AF_LS_DEADLINE_ERR_E_12_SIZE 1

/*
 * A Deadline Not Met Condition has occurred for logical stream 13.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_13_MASK 0x00002000
#define IAXXX_AF_LS_DEADLINE_ERR_E_13_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_13_POS 13
#define IAXXX_AF_LS_DEADLINE_ERR_E_13_SIZE 1

/*
 * A Deadline Not Met Condition has occurred for logical stream 14.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_14_MASK 0x00004000
#define IAXXX_AF_LS_DEADLINE_ERR_E_14_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_14_POS 14
#define IAXXX_AF_LS_DEADLINE_ERR_E_14_SIZE 1

/*
 * A Deadline Not Met Condition has occurred for logical stream 15.
 */
#define IAXXX_AF_LS_DEADLINE_ERR_E_15_MASK 0x00008000
#define IAXXX_AF_LS_DEADLINE_ERR_E_15_RESET_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_ERR_E_15_POS 15
#define IAXXX_AF_LS_DEADLINE_ERR_E_15_SIZE 1

/*** AF_LS_RAW_DEADLINE_ERR (0x40000174) ***/
/*
 * Contains the RAW (pre-mask) latched (sticky bit) Deadline error flag for
 * each logical streams. A write of a '1' to any bit will clear that bit.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_ADDR (0x40000174)
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_WMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_RESET_VAL 0x00000000

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_0_POS 0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_0_SIZE 1

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_1_POS 1
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_1_SIZE 1

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_2_POS 2
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_2_SIZE 1

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_3_POS 3
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_3_SIZE 1

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_4_POS 4
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_4_SIZE 1

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_5_POS 5
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_5_SIZE 1

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_6_POS 6
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_6_SIZE 1

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_7_POS 7
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_7_SIZE 1

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_8_POS 8
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_8_SIZE 1

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_9_POS 9
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_9_SIZE 1

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_10_POS 10
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_10_SIZE 1

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_11_POS 11
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_11_SIZE 1

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 12.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_12_MASK 0x00001000
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_12_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_12_POS 12
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_12_SIZE 1

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 13.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_13_MASK 0x00002000
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_13_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_13_POS 13
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_13_SIZE 1

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 14.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_14_MASK 0x00004000
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_14_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_14_POS 14
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_14_SIZE 1

/*
 * A Raw Deadline Not Met Condition has occurred for logical stream 15.
 */
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_15_MASK 0x00008000
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_15_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_15_POS 15
#define IAXXX_AF_LS_RAW_DEADLINE_ERR_E_15_SIZE 1

/*** AF_LS_TIMEOUT_ERR_UNMASK (0x40000178) ***/
/*
 * Contains the unmask control for the Timeout error flags for each logical
 * stream. These bits are ANDed with the corresponding RAW Timeout error
 * flags to generate actual interrupts.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_ADDR (0x40000178)
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_WMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_RESET_VAL 0x00000000

/*
 * Unmask the Timeout Condition for logical stream 0.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_0_MASK 0x00000001
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_0_POS 0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_0_SIZE 1

/*
 * Unmask the Timeout Condition for logical stream 1.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_1_MASK 0x00000002
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_1_POS 1
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_1_SIZE 1

/*
 * Unmask the Timeout Condition for logical stream 2.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_2_MASK 0x00000004
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_2_POS 2
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_2_SIZE 1

/*
 * Unmask the Timeout Condition for logical stream 3.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_3_MASK 0x00000008
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_3_POS 3
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_3_SIZE 1

/*
 * Unmask the Timeout Condition for logical stream 4.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_4_MASK 0x00000010
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_4_POS 4
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_4_SIZE 1

/*
 * Unmask the Timeout Condition for logical stream 5.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_5_MASK 0x00000020
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_5_POS 5
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_5_SIZE 1

/*
 * Unmask the Timeout Condition for logical stream 6.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_6_MASK 0x00000040
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_6_POS 6
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_6_SIZE 1

/*
 * Unmask the Timeout Condition for logical stream 7.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_7_MASK 0x00000080
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_7_POS 7
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_7_SIZE 1

/*
 * Unmask the Timeout Condition for logical stream 8.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_8_MASK 0x00000100
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_8_POS 8
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_8_SIZE 1

/*
 * Unmask the Timeout Condition for logical stream 9.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_9_MASK 0x00000200
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_9_POS 9
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_9_SIZE 1

/*
 * Unmask the Timeout Condition for logical stream 10.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_10_MASK 0x00000400
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_10_POS 10
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_10_SIZE 1

/*
 * Unmask the Timeout Condition for logical stream 11.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_11_MASK 0x00000800
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_11_POS 11
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_11_SIZE 1

/*
 * Unmask the Timeout Condition for logical stream 12.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_12_MASK 0x00001000
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_12_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_12_POS 12
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_12_SIZE 1

/*
 * Unmask the Timeout Condition for logical stream 13.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_13_MASK 0x00002000
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_13_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_13_POS 13
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_13_SIZE 1

/*
 * Unmask the Timeout Condition for logical stream 14.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_14_MASK 0x00004000
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_14_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_14_POS 14
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_14_SIZE 1

/*
 * Unmask the Timeout Condition for logical stream 15.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_15_MASK 0x00008000
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_15_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_15_POS 15
#define IAXXX_AF_LS_TIMEOUT_ERR_UNMASK_U_15_SIZE 1

/*** AF_LS_TIMEOUT_ERR (0x4000017c) ***/
/*
 * Contains the (post-mask) latched (sticky bit) Timeout error flag for each
 * logical streams.  Indicates that a new sample was not transferred by the
 * port within the selected timeout period.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_ADDR (0x4000017c)
#define IAXXX_AF_LS_TIMEOUT_ERR_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_TIMEOUT_ERR_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_TIMEOUT_ERR_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_TIMEOUT_ERR_RESET_VAL 0x00000000

/*
 * A Timeout Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_TIMEOUT_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_0_POS 0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_0_SIZE 1

/*
 * A Timeout Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_TIMEOUT_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_1_POS 1
#define IAXXX_AF_LS_TIMEOUT_ERR_E_1_SIZE 1

/*
 * A Timeout Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_TIMEOUT_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_2_POS 2
#define IAXXX_AF_LS_TIMEOUT_ERR_E_2_SIZE 1

/*
 * A Timeout Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_TIMEOUT_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_3_POS 3
#define IAXXX_AF_LS_TIMEOUT_ERR_E_3_SIZE 1

/*
 * A Timeout Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_TIMEOUT_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_4_POS 4
#define IAXXX_AF_LS_TIMEOUT_ERR_E_4_SIZE 1

/*
 * A Timeout Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_TIMEOUT_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_5_POS 5
#define IAXXX_AF_LS_TIMEOUT_ERR_E_5_SIZE 1

/*
 * A Timeout Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_TIMEOUT_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_6_POS 6
#define IAXXX_AF_LS_TIMEOUT_ERR_E_6_SIZE 1

/*
 * A Timeout Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_TIMEOUT_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_7_POS 7
#define IAXXX_AF_LS_TIMEOUT_ERR_E_7_SIZE 1

/*
 * A Timeout Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_TIMEOUT_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_8_POS 8
#define IAXXX_AF_LS_TIMEOUT_ERR_E_8_SIZE 1

/*
 * A Timeout Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_TIMEOUT_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_9_POS 9
#define IAXXX_AF_LS_TIMEOUT_ERR_E_9_SIZE 1

/*
 * A Timeout Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_TIMEOUT_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_10_POS 10
#define IAXXX_AF_LS_TIMEOUT_ERR_E_10_SIZE 1

/*
 * A Timeout Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_TIMEOUT_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_11_POS 11
#define IAXXX_AF_LS_TIMEOUT_ERR_E_11_SIZE 1

/*
 * A Timeout Condition has occurred for logical stream 12.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_12_MASK 0x00001000
#define IAXXX_AF_LS_TIMEOUT_ERR_E_12_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_12_POS 12
#define IAXXX_AF_LS_TIMEOUT_ERR_E_12_SIZE 1

/*
 * A Timeout Condition has occurred for logical stream 13.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_13_MASK 0x00002000
#define IAXXX_AF_LS_TIMEOUT_ERR_E_13_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_13_POS 13
#define IAXXX_AF_LS_TIMEOUT_ERR_E_13_SIZE 1

/*
 * A Timeout Condition has occurred for logical stream 14.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_14_MASK 0x00004000
#define IAXXX_AF_LS_TIMEOUT_ERR_E_14_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_14_POS 14
#define IAXXX_AF_LS_TIMEOUT_ERR_E_14_SIZE 1

/*
 * A Timeout Condition has occurred for logical stream 15.
 */
#define IAXXX_AF_LS_TIMEOUT_ERR_E_15_MASK 0x00008000
#define IAXXX_AF_LS_TIMEOUT_ERR_E_15_RESET_VAL 0x0
#define IAXXX_AF_LS_TIMEOUT_ERR_E_15_POS 15
#define IAXXX_AF_LS_TIMEOUT_ERR_E_15_SIZE 1

/*** AF_LS_RAW_TIMEOUT_ERR (0x40000180) ***/
/*
 * Contains the RAW (pre-mask) latched (sticky bit) Timeout error flag for
 * each logical streams.  Indicates that a new sample was not transferred by
 * the port within the selected timeout period.  A write of a '1' to any bit
 * will clear that bit.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_ADDR (0x40000180)
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_WMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_RESET_VAL 0x00000000

/*
 * A Raw Timeout Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_0_POS 0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_0_SIZE 1

/*
 * A Raw Timeout Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_1_POS 1
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_1_SIZE 1

/*
 * A Raw Timeout Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_2_POS 2
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_2_SIZE 1

/*
 * A Raw Timeout Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_3_POS 3
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_3_SIZE 1

/*
 * A Raw Timeout Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_4_POS 4
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_4_SIZE 1

/*
 * A Raw Timeout Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_5_POS 5
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_5_SIZE 1

/*
 * A Raw Timeout Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_6_POS 6
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_6_SIZE 1

/*
 * A Raw Timeout Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_7_POS 7
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_7_SIZE 1

/*
 * A Raw Timeout Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_8_POS 8
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_8_SIZE 1

/*
 * A Raw Timeout Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_9_POS 9
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_9_SIZE 1

/*
 * A Raw Timeout Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_10_POS 10
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_10_SIZE 1

/*
 * A Raw Timeout Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_11_POS 11
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_11_SIZE 1

/*
 * A Raw Timeout Condition has occurred for logical stream 12.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_12_MASK 0x00001000
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_12_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_12_POS 12
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_12_SIZE 1

/*
 * A Raw Timeout Condition has occurred for logical stream 13.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_13_MASK 0x00002000
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_13_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_13_POS 13
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_13_SIZE 1

/*
 * A Raw Timeout Condition has occurred for logical stream 14.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_14_MASK 0x00004000
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_14_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_14_POS 14
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_14_SIZE 1

/*
 * A Raw Timeout Condition has occurred for logical stream 15.
 */
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_15_MASK 0x00008000
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_15_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_15_POS 15
#define IAXXX_AF_LS_RAW_TIMEOUT_ERR_E_15_SIZE 1

/*** AF_LS_PHY_ERR_UNMASK (0x40000184) ***/
/*
 * Contains the unmask control for the Phy error flags for each logical
 * stream (currently only available for pcm streams). These bits are ANDed
 * with the corresponding RAW Phy error flags to generate actual interrupts.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_ADDR (0x40000184)
#define IAXXX_AF_LS_PHY_ERR_UNMASK_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_PHY_ERR_UNMASK_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_PHY_ERR_UNMASK_WMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_PHY_ERR_UNMASK_RESET_VAL 0x00000000

/*
 * Unmask the Phy Error Condition for logical stream 0.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_0_MASK 0x00000001
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_0_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_0_POS 0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_0_SIZE 1

/*
 * Unmask the Phy Error Condition for logical stream 1.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_1_MASK 0x00000002
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_1_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_1_POS 1
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_1_SIZE 1

/*
 * Unmask the Phy Error Condition for logical stream 2.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_2_MASK 0x00000004
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_2_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_2_POS 2
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_2_SIZE 1

/*
 * Unmask the Phy Error Condition for logical stream 3.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_3_MASK 0x00000008
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_3_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_3_POS 3
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_3_SIZE 1

/*
 * Unmask the Phy Error Condition for logical stream 4.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_4_MASK 0x00000010
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_4_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_4_POS 4
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_4_SIZE 1

/*
 * Unmask the Phy Error Condition for logical stream 5.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_5_MASK 0x00000020
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_5_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_5_POS 5
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_5_SIZE 1

/*
 * Unmask the Phy Error Condition for logical stream 6.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_6_MASK 0x00000040
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_6_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_6_POS 6
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_6_SIZE 1

/*
 * Unmask the Phy Error Condition for logical stream 7.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_7_MASK 0x00000080
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_7_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_7_POS 7
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_7_SIZE 1

/*
 * Unmask the Phy Error Condition for logical stream 8.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_8_MASK 0x00000100
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_8_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_8_POS 8
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_8_SIZE 1

/*
 * Unmask the Phy Error Condition for logical stream 9.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_9_MASK 0x00000200
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_9_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_9_POS 9
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_9_SIZE 1

/*
 * Unmask the Phy Error Condition for logical stream 10.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_10_MASK 0x00000400
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_10_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_10_POS 10
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_10_SIZE 1

/*
 * Unmask the Phy Error Condition for logical stream 11.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_11_MASK 0x00000800
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_11_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_11_POS 11
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_11_SIZE 1

/*
 * Unmask the Phy Error Condition for logical stream 12.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_12_MASK 0x00001000
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_12_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_12_POS 12
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_12_SIZE 1

/*
 * Unmask the Phy Error Condition for logical stream 13.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_13_MASK 0x00002000
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_13_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_13_POS 13
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_13_SIZE 1

/*
 * Unmask the Phy Error Condition for logical stream 14.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_14_MASK 0x00004000
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_14_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_14_POS 14
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_14_SIZE 1

/*
 * Unmask the Phy Error Condition for logical stream 15.
 */
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_15_MASK 0x00008000
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_15_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_15_POS 15
#define IAXXX_AF_LS_PHY_ERR_UNMASK_U_15_SIZE 1

/*** AF_LS_PHY_ERR (0x40000188) ***/
/*
 * Contains the (post-mask) latched (sticky bit) Phy error flag for each
 * logical stream (currently only available for pcm streams).  Indicates that
 * a new sample was not transferred by the port within the selected timeout
 * period.
 */
#define IAXXX_AF_LS_PHY_ERR_ADDR (0x40000188)
#define IAXXX_AF_LS_PHY_ERR_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_PHY_ERR_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_PHY_ERR_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_PHY_ERR_RESET_VAL 0x00000000

/*
 * A Phy Error Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_PHY_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_PHY_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_0_POS 0
#define IAXXX_AF_LS_PHY_ERR_E_0_SIZE 1

/*
 * A Phy Error Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_PHY_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_PHY_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_1_POS 1
#define IAXXX_AF_LS_PHY_ERR_E_1_SIZE 1

/*
 * A Phy Error Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_PHY_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_PHY_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_2_POS 2
#define IAXXX_AF_LS_PHY_ERR_E_2_SIZE 1

/*
 * A Phy Error Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_PHY_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_PHY_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_3_POS 3
#define IAXXX_AF_LS_PHY_ERR_E_3_SIZE 1

/*
 * A Phy Error Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_PHY_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_PHY_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_4_POS 4
#define IAXXX_AF_LS_PHY_ERR_E_4_SIZE 1

/*
 * A Phy Error Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_PHY_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_PHY_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_5_POS 5
#define IAXXX_AF_LS_PHY_ERR_E_5_SIZE 1

/*
 * A Phy Error Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_PHY_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_PHY_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_6_POS 6
#define IAXXX_AF_LS_PHY_ERR_E_6_SIZE 1

/*
 * A Phy Error Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_PHY_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_PHY_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_7_POS 7
#define IAXXX_AF_LS_PHY_ERR_E_7_SIZE 1

/*
 * A Phy Error Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_PHY_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_PHY_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_8_POS 8
#define IAXXX_AF_LS_PHY_ERR_E_8_SIZE 1

/*
 * A Phy Error Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_PHY_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_PHY_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_9_POS 9
#define IAXXX_AF_LS_PHY_ERR_E_9_SIZE 1

/*
 * A Phy Error Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_PHY_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_PHY_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_10_POS 10
#define IAXXX_AF_LS_PHY_ERR_E_10_SIZE 1

/*
 * A Phy Error Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_PHY_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_PHY_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_11_POS 11
#define IAXXX_AF_LS_PHY_ERR_E_11_SIZE 1

/*
 * A Phy Error Condition has occurred for logical stream 12.
 */
#define IAXXX_AF_LS_PHY_ERR_E_12_MASK 0x00001000
#define IAXXX_AF_LS_PHY_ERR_E_12_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_12_POS 12
#define IAXXX_AF_LS_PHY_ERR_E_12_SIZE 1

/*
 * A Phy Error Condition has occurred for logical stream 13.
 */
#define IAXXX_AF_LS_PHY_ERR_E_13_MASK 0x00002000
#define IAXXX_AF_LS_PHY_ERR_E_13_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_13_POS 13
#define IAXXX_AF_LS_PHY_ERR_E_13_SIZE 1

/*
 * A Phy Error Condition has occurred for logical stream 14.
 */
#define IAXXX_AF_LS_PHY_ERR_E_14_MASK 0x00004000
#define IAXXX_AF_LS_PHY_ERR_E_14_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_14_POS 14
#define IAXXX_AF_LS_PHY_ERR_E_14_SIZE 1

/*
 * A Phy Error Condition has occurred for logical stream 15.
 */
#define IAXXX_AF_LS_PHY_ERR_E_15_MASK 0x00008000
#define IAXXX_AF_LS_PHY_ERR_E_15_RESET_VAL 0x0
#define IAXXX_AF_LS_PHY_ERR_E_15_POS 15
#define IAXXX_AF_LS_PHY_ERR_E_15_SIZE 1

/*** AF_LS_RAW_PHY_ERR (0x4000018c) ***/
/*
 * Contains the RAW (pre-mask) latched (sticky bit) Phy error flag for each
 * logical stream (currently only available for pcm streams).  Indicates that
 * a new sample was not transferred by the port within the selected timeout
 * period.  A write of a '1' to any bit will clear that bit.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_ADDR (0x4000018c)
#define IAXXX_AF_LS_RAW_PHY_ERR_MASK_VAL 0x0000ffff
#define IAXXX_AF_LS_RAW_PHY_ERR_RMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_RAW_PHY_ERR_WMASK_VAL 0x0000ffff
#define IAXXX_AF_LS_RAW_PHY_ERR_RESET_VAL 0x00000000

/*
 * A Raw Phy Error Condition has occurred for logical stream 0.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_0_MASK 0x00000001
#define IAXXX_AF_LS_RAW_PHY_ERR_E_0_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_0_POS 0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_0_SIZE 1

/*
 * A Raw Phy Error Condition has occurred for logical stream 1.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_1_MASK 0x00000002
#define IAXXX_AF_LS_RAW_PHY_ERR_E_1_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_1_POS 1
#define IAXXX_AF_LS_RAW_PHY_ERR_E_1_SIZE 1

/*
 * A Raw Phy Error Condition has occurred for logical stream 2.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_2_MASK 0x00000004
#define IAXXX_AF_LS_RAW_PHY_ERR_E_2_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_2_POS 2
#define IAXXX_AF_LS_RAW_PHY_ERR_E_2_SIZE 1

/*
 * A Raw Phy Error Condition has occurred for logical stream 3.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_3_MASK 0x00000008
#define IAXXX_AF_LS_RAW_PHY_ERR_E_3_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_3_POS 3
#define IAXXX_AF_LS_RAW_PHY_ERR_E_3_SIZE 1

/*
 * A Raw Phy Error Condition has occurred for logical stream 4.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_4_MASK 0x00000010
#define IAXXX_AF_LS_RAW_PHY_ERR_E_4_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_4_POS 4
#define IAXXX_AF_LS_RAW_PHY_ERR_E_4_SIZE 1

/*
 * A Raw Phy Error Condition has occurred for logical stream 5.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_5_MASK 0x00000020
#define IAXXX_AF_LS_RAW_PHY_ERR_E_5_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_5_POS 5
#define IAXXX_AF_LS_RAW_PHY_ERR_E_5_SIZE 1

/*
 * A Raw Phy Error Condition has occurred for logical stream 6.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_6_MASK 0x00000040
#define IAXXX_AF_LS_RAW_PHY_ERR_E_6_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_6_POS 6
#define IAXXX_AF_LS_RAW_PHY_ERR_E_6_SIZE 1

/*
 * A Raw Phy Error Condition has occurred for logical stream 7.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_7_MASK 0x00000080
#define IAXXX_AF_LS_RAW_PHY_ERR_E_7_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_7_POS 7
#define IAXXX_AF_LS_RAW_PHY_ERR_E_7_SIZE 1

/*
 * A Raw Phy Error Condition has occurred for logical stream 8.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_8_MASK 0x00000100
#define IAXXX_AF_LS_RAW_PHY_ERR_E_8_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_8_POS 8
#define IAXXX_AF_LS_RAW_PHY_ERR_E_8_SIZE 1

/*
 * A Raw Phy Error Condition has occurred for logical stream 9.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_9_MASK 0x00000200
#define IAXXX_AF_LS_RAW_PHY_ERR_E_9_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_9_POS 9
#define IAXXX_AF_LS_RAW_PHY_ERR_E_9_SIZE 1

/*
 * A Raw Phy Error Condition has occurred for logical stream 10.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_10_MASK 0x00000400
#define IAXXX_AF_LS_RAW_PHY_ERR_E_10_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_10_POS 10
#define IAXXX_AF_LS_RAW_PHY_ERR_E_10_SIZE 1

/*
 * A Raw Phy Error Condition has occurred for logical stream 11.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_11_MASK 0x00000800
#define IAXXX_AF_LS_RAW_PHY_ERR_E_11_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_11_POS 11
#define IAXXX_AF_LS_RAW_PHY_ERR_E_11_SIZE 1

/*
 * A Raw Phy Error Condition has occurred for logical stream 12.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_12_MASK 0x00001000
#define IAXXX_AF_LS_RAW_PHY_ERR_E_12_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_12_POS 12
#define IAXXX_AF_LS_RAW_PHY_ERR_E_12_SIZE 1

/*
 * A Raw Phy Error Condition has occurred for logical stream 13.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_13_MASK 0x00002000
#define IAXXX_AF_LS_RAW_PHY_ERR_E_13_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_13_POS 13
#define IAXXX_AF_LS_RAW_PHY_ERR_E_13_SIZE 1

/*
 * A Raw Phy Error Condition has occurred for logical stream 14.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_14_MASK 0x00004000
#define IAXXX_AF_LS_RAW_PHY_ERR_E_14_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_14_POS 14
#define IAXXX_AF_LS_RAW_PHY_ERR_E_14_SIZE 1

/*
 * A Raw Phy Error Condition has occurred for logical stream 15.
 */
#define IAXXX_AF_LS_RAW_PHY_ERR_E_15_MASK 0x00008000
#define IAXXX_AF_LS_RAW_PHY_ERR_E_15_RESET_VAL 0x0
#define IAXXX_AF_LS_RAW_PHY_ERR_E_15_POS 15
#define IAXXX_AF_LS_RAW_PHY_ERR_E_15_SIZE 1

/*** AF_SPARE_GATES_AF (0x40000190) ***/
/*
 * This is a dummy register which is tied to the spare_gates module. It does
 * not serve any functional purpose.
 */
#define IAXXX_AF_SPARE_GATES_AF_ADDR (0x40000190)
#define IAXXX_AF_SPARE_GATES_AF_MASK_VAL 0xffffffff
#define IAXXX_AF_SPARE_GATES_AF_RMASK_VAL 0xffffffff
#define IAXXX_AF_SPARE_GATES_AF_WMASK_VAL 0x0000ffff
#define IAXXX_AF_SPARE_GATES_AF_RESET_VAL 0x00000000

/*
 * Dummy field whose output goes in to the spare_gates module.
 */
#define IAXXX_AF_SPARE_GATES_AF_FIELD_1_MASK 0x0000ffff
#define IAXXX_AF_SPARE_GATES_AF_FIELD_1_RESET_VAL 0x0
#define IAXXX_AF_SPARE_GATES_AF_FIELD_1_POS 0
#define IAXXX_AF_SPARE_GATES_AF_FIELD_1_SIZE 16

/*
 * Dummy field which reads the output of the spare_gates module.
 */
#define IAXXX_AF_SPARE_GATES_AF_FIELD_2_MASK 0xffff0000
#define IAXXX_AF_SPARE_GATES_AF_FIELD_2_RESET_VAL 0x0
#define IAXXX_AF_SPARE_GATES_AF_FIELD_2_POS 16
#define IAXXX_AF_SPARE_GATES_AF_FIELD_2_SIZE 16

/*** AF_SPARE_GATES_WCPT (0x40000194) ***/
/*
 * This is a dummy register which is tied to the spare_gates module. It does
 * not serve any functional purpose.
 */
#define IAXXX_AF_SPARE_GATES_WCPT_ADDR (0x40000194)
#define IAXXX_AF_SPARE_GATES_WCPT_MASK_VAL 0xffffffff
#define IAXXX_AF_SPARE_GATES_WCPT_RMASK_VAL 0xffffffff
#define IAXXX_AF_SPARE_GATES_WCPT_WMASK_VAL 0x0000ffff
#define IAXXX_AF_SPARE_GATES_WCPT_RESET_VAL 0x00000000

/*
 * Dummy field whose output goes in to the spare_gates module.
 */
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_1_MASK 0x0000ffff
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_1_RESET_VAL 0x0
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_1_POS 0
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_1_SIZE 16

/*
 * Dummy field which reads the output of the spare_gates module.
 */
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_2_MASK 0xffff0000
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_2_RESET_VAL 0x0
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_2_POS 16
#define IAXXX_AF_SPARE_GATES_WCPT_FIELD_2_SIZE 16

/*** AF_LS_DEADLINE_LINE_DBG_A (0x40000198) ***/
/*
 * Debug state A for sm for ls 0 - 7.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_ADDR (0x40000198)
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_RESET_VAL 0x33333333

/*
 * The Deadline state machine line number for logical stream 0.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_0_MASK 0x0000000f
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_0_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_0_POS 0
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_0_SIZE 4

/*
 * The Deadline state machine line number for logical stream 1.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_1_MASK 0x000000f0
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_1_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_1_POS 4
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_1_SIZE 4

/*
 * The Deadline state machine line number for logical stream 2.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_2_MASK 0x00000f00
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_2_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_2_POS 8
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_2_SIZE 4

/*
 * The Deadline state machine line number for logical stream 3.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_3_MASK 0x0000f000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_3_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_3_POS 12
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_3_SIZE 4

/*
 * The Deadline state machine line number for logical stream 4.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_4_MASK 0x000f0000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_4_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_4_POS 16
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_4_SIZE 4

/*
 * The Deadline state machine line number for logical stream 5.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_5_MASK 0x00f00000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_5_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_5_POS 20
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_5_SIZE 4

/*
 * The Deadline state machine line number for logical stream 6.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_6_MASK 0x0f000000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_6_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_6_POS 24
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_6_SIZE 4

/*
 * The Deadline state machine line number for logical stream 7.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_7_MASK 0xf0000000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_7_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_7_POS 28
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_A_L_7_SIZE 4

/*** AF_LS_DEADLINE_LINE_DBG_B (0x4000019c) ***/
/*
 * Debug state B for sm for ls 8 - 16.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_ADDR (0x4000019c)
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_RESET_VAL 0x33333333

/*
 * The Deadline state machine line number for logical stream 8.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_8_MASK 0x0000000f
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_8_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_8_POS 0
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_8_SIZE 4

/*
 * The Deadline state machine line number for logical stream 9.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_9_MASK 0x000000f0
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_9_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_9_POS 4
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_9_SIZE 4

/*
 * The Deadline state machine line number for logical stream 10.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_10_MASK 0x00000f00
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_10_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_10_POS 8
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_10_SIZE 4

/*
 * The Deadline state machine line number for logical stream 11.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_11_MASK 0x0000f000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_11_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_11_POS 12
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_11_SIZE 4

/*
 * The Deadline state machine line number for logical stream 12.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_12_MASK 0x000f0000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_12_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_12_POS 16
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_12_SIZE 4

/*
 * The Deadline state machine line number for logical stream 13.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_13_MASK 0x00f00000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_13_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_13_POS 20
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_13_SIZE 4

/*
 * The Deadline state machine line number for logical stream 14.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_14_MASK 0x0f000000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_14_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_14_POS 24
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_14_SIZE 4

/*
 * The Deadline state machine line number for logical stream 15.
 */
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_15_MASK 0xf0000000
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_15_RESET_VAL 0x3
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_15_POS 28
#define IAXXX_AF_LS_DEADLINE_LINE_DBG_B_L_15_SIZE 4

/*** AF_H2X_MSTR_ACC (0x400001a0) ***/
/*
 * This register has the protection access registers.
 */
#define IAXXX_AF_H2X_MSTR_ACC_ADDR (0x400001a0)
#define IAXXX_AF_H2X_MSTR_ACC_MASK_VAL 0x000000ff
#define IAXXX_AF_H2X_MSTR_ACC_RMASK_VAL 0x000000ff
#define IAXXX_AF_H2X_MSTR_ACC_WMASK_VAL 0x0000007c
#define IAXXX_AF_H2X_MSTR_ACC_RESET_VAL 0x00000087

/*
 * BOSS will not issue XLMI requests through AHB but will use XLMI interface
 * directly
 */
#define IAXXX_AF_H2X_MSTR_ACC_BOSS_MASK 0x00000001
#define IAXXX_AF_H2X_MSTR_ACC_BOSS_RESET_VAL 0x1
#define IAXXX_AF_H2X_MSTR_ACC_BOSS_POS 0
#define IAXXX_AF_H2X_MSTR_ACC_BOSS_SIZE 1

/*
 * SSP will not issue XLMI requests through AHB but will use XLMI interface
 * directly
 */
#define IAXXX_AF_H2X_MSTR_ACC_SSP_MASK 0x00000002
#define IAXXX_AF_H2X_MSTR_ACC_SSP_RESET_VAL 0x1
#define IAXXX_AF_H2X_MSTR_ACC_SSP_POS 1
#define IAXXX_AF_H2X_MSTR_ACC_SSP_SIZE 1

/*
 * Controls CM4 access to XLMI registers through AHB. 1 means access is
 * granted
 */
#define IAXXX_AF_H2X_MSTR_ACC_CM4_MASK 0x00000004
#define IAXXX_AF_H2X_MSTR_ACC_CM4_RESET_VAL 0x1
#define IAXXX_AF_H2X_MSTR_ACC_CM4_POS 2
#define IAXXX_AF_H2X_MSTR_ACC_CM4_SIZE 1

/*
 * Controls HMD access to XLMI registers through AHB. 1 means access is
 * granted
 */
#define IAXXX_AF_H2X_MSTR_ACC_HMD_MASK 0x00000008
#define IAXXX_AF_H2X_MSTR_ACC_HMD_RESET_VAL 0x0
#define IAXXX_AF_H2X_MSTR_ACC_HMD_POS 3
#define IAXXX_AF_H2X_MSTR_ACC_HMD_SIZE 1

/*
 * Controls DMX access to XLMI registers through AHB. 1 means access is
 * granted
 */
#define IAXXX_AF_H2X_MSTR_ACC_DMX_MASK 0x00000010
#define IAXXX_AF_H2X_MSTR_ACC_DMX_RESET_VAL 0x0
#define IAXXX_AF_H2X_MSTR_ACC_DMX_POS 4
#define IAXXX_AF_H2X_MSTR_ACC_DMX_SIZE 1

/*
 * Controls DMA M0 access to XLMI registers through AHB. 1 means access is
 * granted
 */
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M0_MASK 0x00000020
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M0_RESET_VAL 0x0
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M0_POS 5
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M0_SIZE 1

/*
 * Controls DMA M1 access to XLMI registers through AHB. 1 means access is
 * granted
 */
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M1_MASK 0x00000040
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M1_RESET_VAL 0x0
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M1_POS 6
#define IAXXX_AF_H2X_MSTR_ACC_DMA_M1_SIZE 1

/*
 * DAP master will always have access to XLMI registers
 */
#define IAXXX_AF_H2X_MSTR_ACC_DAP_MASK 0x00000080
#define IAXXX_AF_H2X_MSTR_ACC_DAP_RESET_VAL 0x1
#define IAXXX_AF_H2X_MSTR_ACC_DAP_POS 7
#define IAXXX_AF_H2X_MSTR_ACC_DAP_SIZE 1

/*** AF_ACC_ERR (0x400001a4) ***/
/*
 * This register has information on H2X accesses that have been denied
 */
#define IAXXX_AF_ACC_ERR_ADDR (0x400001a4)
#define IAXXX_AF_ACC_ERR_MASK_VAL 0x1ffe00ff
#define IAXXX_AF_ACC_ERR_RMASK_VAL 0x1ffe00ff
#define IAXXX_AF_ACC_ERR_WMASK_VAL 0x0000007c
#define IAXXX_AF_ACC_ERR_RESET_VAL 0x00000000

/*
 * BOSS accesses are always allowed and therefore this bit will never be set
 */
#define IAXXX_AF_ACC_ERR_BOSS_MASK 0x00000001
#define IAXXX_AF_ACC_ERR_BOSS_RESET_VAL 0x0
#define IAXXX_AF_ACC_ERR_BOSS_POS 0
#define IAXXX_AF_ACC_ERR_BOSS_SIZE 1

/*
 * SSP accesses are always allowed and therefore this bit will never be set
 */
#define IAXXX_AF_ACC_ERR_SSP_MASK 0x00000002
#define IAXXX_AF_ACC_ERR_SSP_RESET_VAL 0x0
#define IAXXX_AF_ACC_ERR_SSP_POS 1
#define IAXXX_AF_ACC_ERR_SSP_SIZE 1

/*
 * CM4 access to AF registers has been denied as indicated by H2X_MSTR_ACC
 * register
 */
#define IAXXX_AF_ACC_ERR_CM4_MASK 0x00000004
#define IAXXX_AF_ACC_ERR_CM4_RESET_VAL 0x0
#define IAXXX_AF_ACC_ERR_CM4_POS 2
#define IAXXX_AF_ACC_ERR_CM4_SIZE 1

/*
 * HMD access to AF registers has been denied as indicated by H2X_MSTR_ACC
 * register
 */
#define IAXXX_AF_ACC_ERR_HMD_MASK 0x00000008
#define IAXXX_AF_ACC_ERR_HMD_RESET_VAL 0x0
#define IAXXX_AF_ACC_ERR_HMD_POS 3
#define IAXXX_AF_ACC_ERR_HMD_SIZE 1

/*
 * DMX access to AF registers has been denied as indicated by H2X_MSTR_ACC
 * register
 */
#define IAXXX_AF_ACC_ERR_DMX_MASK 0x00000010
#define IAXXX_AF_ACC_ERR_DMX_RESET_VAL 0x0
#define IAXXX_AF_ACC_ERR_DMX_POS 4
#define IAXXX_AF_ACC_ERR_DMX_SIZE 1

/*
 * DMA Master 0 access to AF registers has been denied as indicated by
 * H2X_MSTR_ACC register
 */
#define IAXXX_AF_ACC_ERR_DMA_M0_MASK 0x00000020
#define IAXXX_AF_ACC_ERR_DMA_M0_RESET_VAL 0x0
#define IAXXX_AF_ACC_ERR_DMA_M0_POS 5
#define IAXXX_AF_ACC_ERR_DMA_M0_SIZE 1

/*
 * DMA Master 1 access to AF registers has been denied as indicated by
 * H2X_MSTR_ACC register
 */
#define IAXXX_AF_ACC_ERR_DMA_M1_MASK 0x00000040
#define IAXXX_AF_ACC_ERR_DMA_M1_RESET_VAL 0x0
#define IAXXX_AF_ACC_ERR_DMA_M1_POS 6
#define IAXXX_AF_ACC_ERR_DMA_M1_SIZE 1

/*
 * DAP accesses are always allowed and therefore this bit will never be set
 */
#define IAXXX_AF_ACC_ERR_DAP_MASK 0x00000080
#define IAXXX_AF_ACC_ERR_DAP_RESET_VAL 0x0
#define IAXXX_AF_ACC_ERR_DAP_POS 7
#define IAXXX_AF_ACC_ERR_DAP_SIZE 1

/*
 * Address for which access is denied (Address is trimmed according to AF reg
 * space; Hence contains only lower significant bits)
 */
#define IAXXX_AF_ACC_ERR_ADDRESS_MASK 0x1ffe0000
#define IAXXX_AF_ACC_ERR_ADDRESS_RESET_VAL 0x0
#define IAXXX_AF_ACC_ERR_ADDRESS_POS 17
#define IAXXX_AF_ACC_ERR_ADDRESS_SIZE 12

/*** AF_LS_0_CNL_0 (0x40000400) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 0.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_0_CNL_0_ADDR (0x40000400)
#define IAXXX_AF_LS_0_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_CNL_0_LS0_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_0_CNL_0_LS0_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_0_CNL_0_LS0_CH_0_POS 0
#define IAXXX_AF_LS_0_CNL_0_LS0_CH_0_SIZE 32

/*** AF_LS_0_CNL_1 (0x40000404) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 0.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_0_CNL_1_ADDR (0x40000404)
#define IAXXX_AF_LS_0_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_CNL_1_LS0_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_0_CNL_1_LS0_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_0_CNL_1_LS0_CH_1_POS 0
#define IAXXX_AF_LS_0_CNL_1_LS0_CH_1_SIZE 32

/*** AF_LS_0_CNL_2 (0x40000408) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 0.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_0_CNL_2_ADDR (0x40000408)
#define IAXXX_AF_LS_0_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_CNL_2_LS0_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_0_CNL_2_LS0_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_0_CNL_2_LS0_CH_2_POS 0
#define IAXXX_AF_LS_0_CNL_2_LS0_CH_2_SIZE 32

/*** AF_LS_0_CNL_3 (0x4000040c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 0.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_0_CNL_3_ADDR (0x4000040c)
#define IAXXX_AF_LS_0_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_CNL_3_LS0_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_0_CNL_3_LS0_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_0_CNL_3_LS0_CH_3_POS 0
#define IAXXX_AF_LS_0_CNL_3_LS0_CH_3_SIZE 32

/*** AF_LS_0_CNL_4 (0x40000410) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 4 of Logical
 * Stream 0.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_0_CNL_4_ADDR (0x40000410)
#define IAXXX_AF_LS_0_CNL_4_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_4_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_CNL_4_RESET_VAL 0x00000000

/*
 * Channel 4 Audio Sample Data for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_CNL_4_LS0_CH_4_MASK 0xffffffff
#define IAXXX_AF_LS_0_CNL_4_LS0_CH_4_RESET_VAL 0x0
#define IAXXX_AF_LS_0_CNL_4_LS0_CH_4_POS 0
#define IAXXX_AF_LS_0_CNL_4_LS0_CH_4_SIZE 32

/*** AF_LS_0_CNL_5 (0x40000414) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 5 of Logical
 * Stream 0.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_0_CNL_5_ADDR (0x40000414)
#define IAXXX_AF_LS_0_CNL_5_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_5_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_CNL_5_RESET_VAL 0x00000000

/*
 * Channel 5 Audio Sample Data for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_CNL_5_LS0_CH_5_MASK 0xffffffff
#define IAXXX_AF_LS_0_CNL_5_LS0_CH_5_RESET_VAL 0x0
#define IAXXX_AF_LS_0_CNL_5_LS0_CH_5_POS 0
#define IAXXX_AF_LS_0_CNL_5_LS0_CH_5_SIZE 32

/*** AF_LS_0_CNL_6 (0x40000418) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 6 of Logical
 * Stream 0.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_0_CNL_6_ADDR (0x40000418)
#define IAXXX_AF_LS_0_CNL_6_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_6_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_CNL_6_RESET_VAL 0x00000000

/*
 * Channel 6 Audio Sample Data for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_CNL_6_LS0_CH_6_MASK 0xffffffff
#define IAXXX_AF_LS_0_CNL_6_LS0_CH_6_RESET_VAL 0x0
#define IAXXX_AF_LS_0_CNL_6_LS0_CH_6_POS 0
#define IAXXX_AF_LS_0_CNL_6_LS0_CH_6_SIZE 32

/*** AF_LS_0_CNL_7 (0x4000041c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 7 of Logical
 * Stream 0.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_0_CNL_7_ADDR (0x4000041c)
#define IAXXX_AF_LS_0_CNL_7_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_7_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_CNL_7_RESET_VAL 0x00000000

/*
 * Channel 7 Audio Sample Data for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_CNL_7_LS0_CH_7_MASK 0xffffffff
#define IAXXX_AF_LS_0_CNL_7_LS0_CH_7_RESET_VAL 0x0
#define IAXXX_AF_LS_0_CNL_7_LS0_CH_7_POS 0
#define IAXXX_AF_LS_0_CNL_7_LS0_CH_7_SIZE 32

/*** AF_LS_0_CNL_8 (0x40000420) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 8 of Logical
 * Stream 0.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_0_CNL_8_ADDR (0x40000420)
#define IAXXX_AF_LS_0_CNL_8_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_8_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_CNL_8_RESET_VAL 0x00000000

/*
 * Channel 8 Audio Sample Data for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_CNL_8_LS0_CH_8_MASK 0xffffffff
#define IAXXX_AF_LS_0_CNL_8_LS0_CH_8_RESET_VAL 0x0
#define IAXXX_AF_LS_0_CNL_8_LS0_CH_8_POS 0
#define IAXXX_AF_LS_0_CNL_8_LS0_CH_8_SIZE 32

/*** AF_LS_0_CNL_9 (0x40000424) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 9 of Logical
 * Stream 0.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_0_CNL_9_ADDR (0x40000424)
#define IAXXX_AF_LS_0_CNL_9_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_9_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_CNL_9_RESET_VAL 0x00000000

/*
 * Channel 9 Audio Sample Data for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_CNL_9_LS0_CH_9_MASK 0xffffffff
#define IAXXX_AF_LS_0_CNL_9_LS0_CH_9_RESET_VAL 0x0
#define IAXXX_AF_LS_0_CNL_9_LS0_CH_9_POS 0
#define IAXXX_AF_LS_0_CNL_9_LS0_CH_9_SIZE 32

/*** AF_LS_0_CNL_10 (0x40000428) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 10 of
 * Logical Stream 0.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_0_CNL_10_ADDR (0x40000428)
#define IAXXX_AF_LS_0_CNL_10_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_10_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_CNL_10_RESET_VAL 0x00000000

/*
 * Channel 10 Audio Sample Data for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_CNL_10_LS0_CH_10_MASK 0xffffffff
#define IAXXX_AF_LS_0_CNL_10_LS0_CH_10_RESET_VAL 0x0
#define IAXXX_AF_LS_0_CNL_10_LS0_CH_10_POS 0
#define IAXXX_AF_LS_0_CNL_10_LS0_CH_10_SIZE 32

/*** AF_LS_0_CNL_11 (0x4000042c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 11 of
 * Logical Stream 0.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_0_CNL_11_ADDR (0x4000042c)
#define IAXXX_AF_LS_0_CNL_11_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_11_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_CNL_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_CNL_11_RESET_VAL 0x00000000

/*
 * Channel 11 Audio Sample Data for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_CNL_11_LS0_CH_11_MASK 0xffffffff
#define IAXXX_AF_LS_0_CNL_11_LS0_CH_11_RESET_VAL 0x0
#define IAXXX_AF_LS_0_CNL_11_LS0_CH_11_POS 0
#define IAXXX_AF_LS_0_CNL_11_LS0_CH_11_SIZE 32

/*** AF_LS_0_RESERVED_0 (0x40000430) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_0_ADDR (0x40000430)
#define IAXXX_AF_LS_0_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_0_RESERVED_1 (0x40000434) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_0_RESERVED_1_ADDR (0x40000434)
#define IAXXX_AF_LS_0_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_0_PT_0 (0x40000438) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_0_PT_0_ADDR (0x40000438)
#define IAXXX_AF_LS_0_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_0_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_0_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_0_PT_0_VAL_POS 0
#define IAXXX_AF_LS_0_PT_0_VAL_SIZE 32

/*** AF_LS_0_PT_1 (0x4000043c) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 0,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_0_PT_1_ADDR (0x4000043c)
#define IAXXX_AF_LS_0_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_0_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_0_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_0_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 0.
 */
#define IAXXX_AF_LS_0_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_0_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_0_PT_1_VAL_POS 0
#define IAXXX_AF_LS_0_PT_1_VAL_SIZE 20

/*
 * Presentation Time Valid bit, if LS_DMA[0] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_0_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_0_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_0_PT_1_VLD_POS 31
#define IAXXX_AF_LS_0_PT_1_VLD_SIZE 1

/*** AF_LS_1_CNL_0 (0x40000440) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 1.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_1_CNL_0_ADDR (0x40000440)
#define IAXXX_AF_LS_1_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_CNL_0_LS1_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_1_CNL_0_LS1_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_1_CNL_0_LS1_CH_0_POS 0
#define IAXXX_AF_LS_1_CNL_0_LS1_CH_0_SIZE 32

/*** AF_LS_1_CNL_1 (0x40000444) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 1.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_1_CNL_1_ADDR (0x40000444)
#define IAXXX_AF_LS_1_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_CNL_1_LS1_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_1_CNL_1_LS1_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_1_CNL_1_LS1_CH_1_POS 0
#define IAXXX_AF_LS_1_CNL_1_LS1_CH_1_SIZE 32

/*** AF_LS_1_CNL_2 (0x40000448) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 1.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_1_CNL_2_ADDR (0x40000448)
#define IAXXX_AF_LS_1_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_CNL_2_LS1_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_1_CNL_2_LS1_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_1_CNL_2_LS1_CH_2_POS 0
#define IAXXX_AF_LS_1_CNL_2_LS1_CH_2_SIZE 32

/*** AF_LS_1_CNL_3 (0x4000044c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 1.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_1_CNL_3_ADDR (0x4000044c)
#define IAXXX_AF_LS_1_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_CNL_3_LS1_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_1_CNL_3_LS1_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_1_CNL_3_LS1_CH_3_POS 0
#define IAXXX_AF_LS_1_CNL_3_LS1_CH_3_SIZE 32

/*** AF_LS_1_CNL_4 (0x40000450) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 4 of Logical
 * Stream 1.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_1_CNL_4_ADDR (0x40000450)
#define IAXXX_AF_LS_1_CNL_4_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_4_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_CNL_4_RESET_VAL 0x00000000

/*
 * Channel 4 Audio Sample Data for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_CNL_4_LS1_CH_4_MASK 0xffffffff
#define IAXXX_AF_LS_1_CNL_4_LS1_CH_4_RESET_VAL 0x0
#define IAXXX_AF_LS_1_CNL_4_LS1_CH_4_POS 0
#define IAXXX_AF_LS_1_CNL_4_LS1_CH_4_SIZE 32

/*** AF_LS_1_CNL_5 (0x40000454) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 5 of Logical
 * Stream 1.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_1_CNL_5_ADDR (0x40000454)
#define IAXXX_AF_LS_1_CNL_5_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_5_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_CNL_5_RESET_VAL 0x00000000

/*
 * Channel 5 Audio Sample Data for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_CNL_5_LS1_CH_5_MASK 0xffffffff
#define IAXXX_AF_LS_1_CNL_5_LS1_CH_5_RESET_VAL 0x0
#define IAXXX_AF_LS_1_CNL_5_LS1_CH_5_POS 0
#define IAXXX_AF_LS_1_CNL_5_LS1_CH_5_SIZE 32

/*** AF_LS_1_CNL_6 (0x40000458) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 6 of Logical
 * Stream 1.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_1_CNL_6_ADDR (0x40000458)
#define IAXXX_AF_LS_1_CNL_6_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_6_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_CNL_6_RESET_VAL 0x00000000

/*
 * Channel 6 Audio Sample Data for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_CNL_6_LS1_CH_6_MASK 0xffffffff
#define IAXXX_AF_LS_1_CNL_6_LS1_CH_6_RESET_VAL 0x0
#define IAXXX_AF_LS_1_CNL_6_LS1_CH_6_POS 0
#define IAXXX_AF_LS_1_CNL_6_LS1_CH_6_SIZE 32

/*** AF_LS_1_CNL_7 (0x4000045c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 7 of Logical
 * Stream 1.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_1_CNL_7_ADDR (0x4000045c)
#define IAXXX_AF_LS_1_CNL_7_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_7_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_CNL_7_RESET_VAL 0x00000000

/*
 * Channel 7 Audio Sample Data for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_CNL_7_LS1_CH_7_MASK 0xffffffff
#define IAXXX_AF_LS_1_CNL_7_LS1_CH_7_RESET_VAL 0x0
#define IAXXX_AF_LS_1_CNL_7_LS1_CH_7_POS 0
#define IAXXX_AF_LS_1_CNL_7_LS1_CH_7_SIZE 32

/*** AF_LS_1_CNL_8 (0x40000460) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 8 of Logical
 * Stream 1.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_1_CNL_8_ADDR (0x40000460)
#define IAXXX_AF_LS_1_CNL_8_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_8_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_CNL_8_RESET_VAL 0x00000000

/*
 * Channel 8 Audio Sample Data for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_CNL_8_LS1_CH_8_MASK 0xffffffff
#define IAXXX_AF_LS_1_CNL_8_LS1_CH_8_RESET_VAL 0x0
#define IAXXX_AF_LS_1_CNL_8_LS1_CH_8_POS 0
#define IAXXX_AF_LS_1_CNL_8_LS1_CH_8_SIZE 32

/*** AF_LS_1_CNL_9 (0x40000464) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 9 of Logical
 * Stream 1.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_1_CNL_9_ADDR (0x40000464)
#define IAXXX_AF_LS_1_CNL_9_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_9_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_CNL_9_RESET_VAL 0x00000000

/*
 * Channel 9 Audio Sample Data for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_CNL_9_LS1_CH_9_MASK 0xffffffff
#define IAXXX_AF_LS_1_CNL_9_LS1_CH_9_RESET_VAL 0x0
#define IAXXX_AF_LS_1_CNL_9_LS1_CH_9_POS 0
#define IAXXX_AF_LS_1_CNL_9_LS1_CH_9_SIZE 32

/*** AF_LS_1_CNL_10 (0x40000468) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 10 of
 * Logical Stream 1.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_1_CNL_10_ADDR (0x40000468)
#define IAXXX_AF_LS_1_CNL_10_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_10_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_CNL_10_RESET_VAL 0x00000000

/*
 * Channel 10 Audio Sample Data for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_CNL_10_LS1_CH_10_MASK 0xffffffff
#define IAXXX_AF_LS_1_CNL_10_LS1_CH_10_RESET_VAL 0x0
#define IAXXX_AF_LS_1_CNL_10_LS1_CH_10_POS 0
#define IAXXX_AF_LS_1_CNL_10_LS1_CH_10_SIZE 32

/*** AF_LS_1_CNL_11 (0x4000046c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 11 of
 * Logical Stream 1.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_1_CNL_11_ADDR (0x4000046c)
#define IAXXX_AF_LS_1_CNL_11_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_11_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_CNL_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_CNL_11_RESET_VAL 0x00000000

/*
 * Channel 11 Audio Sample Data for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_CNL_11_LS1_CH_11_MASK 0xffffffff
#define IAXXX_AF_LS_1_CNL_11_LS1_CH_11_RESET_VAL 0x0
#define IAXXX_AF_LS_1_CNL_11_LS1_CH_11_POS 0
#define IAXXX_AF_LS_1_CNL_11_LS1_CH_11_SIZE 32

/*** AF_LS_1_RESERVED_0 (0x40000470) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_0_ADDR (0x40000470)
#define IAXXX_AF_LS_1_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_1_RESERVED_1 (0x40000474) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_1_RESERVED_1_ADDR (0x40000474)
#define IAXXX_AF_LS_1_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_1_PT_0 (0x40000478) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_1_PT_0_ADDR (0x40000478)
#define IAXXX_AF_LS_1_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_1_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_1_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_1_PT_0_VAL_POS 0
#define IAXXX_AF_LS_1_PT_0_VAL_SIZE 32

/*** AF_LS_1_PT_1 (0x4000047c) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 1,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_1_PT_1_ADDR (0x4000047c)
#define IAXXX_AF_LS_1_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_1_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_1_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_1_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 1.
 */
#define IAXXX_AF_LS_1_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_1_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_1_PT_1_VAL_POS 0
#define IAXXX_AF_LS_1_PT_1_VAL_SIZE 20

/*
 * Presentation Time Valid bit, if LS_DMA[1] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_1_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_1_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_1_PT_1_VLD_POS 31
#define IAXXX_AF_LS_1_PT_1_VLD_SIZE 1

/*** AF_LS_2_CNL_0 (0x40000480) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 2.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_2_CNL_0_ADDR (0x40000480)
#define IAXXX_AF_LS_2_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_CNL_0_LS2_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_2_CNL_0_LS2_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_2_CNL_0_LS2_CH_0_POS 0
#define IAXXX_AF_LS_2_CNL_0_LS2_CH_0_SIZE 32

/*** AF_LS_2_CNL_1 (0x40000484) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 2.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_2_CNL_1_ADDR (0x40000484)
#define IAXXX_AF_LS_2_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_CNL_1_LS2_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_2_CNL_1_LS2_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_2_CNL_1_LS2_CH_1_POS 0
#define IAXXX_AF_LS_2_CNL_1_LS2_CH_1_SIZE 32

/*** AF_LS_2_CNL_2 (0x40000488) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 2.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_2_CNL_2_ADDR (0x40000488)
#define IAXXX_AF_LS_2_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_CNL_2_LS2_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_2_CNL_2_LS2_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_2_CNL_2_LS2_CH_2_POS 0
#define IAXXX_AF_LS_2_CNL_2_LS2_CH_2_SIZE 32

/*** AF_LS_2_CNL_3 (0x4000048c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 2.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_2_CNL_3_ADDR (0x4000048c)
#define IAXXX_AF_LS_2_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_CNL_3_LS2_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_2_CNL_3_LS2_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_2_CNL_3_LS2_CH_3_POS 0
#define IAXXX_AF_LS_2_CNL_3_LS2_CH_3_SIZE 32

/*** AF_LS_2_CNL_4 (0x40000490) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 4 of Logical
 * Stream 2.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_2_CNL_4_ADDR (0x40000490)
#define IAXXX_AF_LS_2_CNL_4_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_4_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_CNL_4_RESET_VAL 0x00000000

/*
 * Channel 4 Audio Sample Data for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_CNL_4_LS2_CH_4_MASK 0xffffffff
#define IAXXX_AF_LS_2_CNL_4_LS2_CH_4_RESET_VAL 0x0
#define IAXXX_AF_LS_2_CNL_4_LS2_CH_4_POS 0
#define IAXXX_AF_LS_2_CNL_4_LS2_CH_4_SIZE 32

/*** AF_LS_2_CNL_5 (0x40000494) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 5 of Logical
 * Stream 2.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_2_CNL_5_ADDR (0x40000494)
#define IAXXX_AF_LS_2_CNL_5_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_5_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_CNL_5_RESET_VAL 0x00000000

/*
 * Channel 5 Audio Sample Data for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_CNL_5_LS2_CH_5_MASK 0xffffffff
#define IAXXX_AF_LS_2_CNL_5_LS2_CH_5_RESET_VAL 0x0
#define IAXXX_AF_LS_2_CNL_5_LS2_CH_5_POS 0
#define IAXXX_AF_LS_2_CNL_5_LS2_CH_5_SIZE 32

/*** AF_LS_2_CNL_6 (0x40000498) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 6 of Logical
 * Stream 2.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_2_CNL_6_ADDR (0x40000498)
#define IAXXX_AF_LS_2_CNL_6_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_6_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_CNL_6_RESET_VAL 0x00000000

/*
 * Channel 6 Audio Sample Data for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_CNL_6_LS2_CH_6_MASK 0xffffffff
#define IAXXX_AF_LS_2_CNL_6_LS2_CH_6_RESET_VAL 0x0
#define IAXXX_AF_LS_2_CNL_6_LS2_CH_6_POS 0
#define IAXXX_AF_LS_2_CNL_6_LS2_CH_6_SIZE 32

/*** AF_LS_2_CNL_7 (0x4000049c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 7 of Logical
 * Stream 2.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_2_CNL_7_ADDR (0x4000049c)
#define IAXXX_AF_LS_2_CNL_7_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_7_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_CNL_7_RESET_VAL 0x00000000

/*
 * Channel 7 Audio Sample Data for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_CNL_7_LS2_CH_7_MASK 0xffffffff
#define IAXXX_AF_LS_2_CNL_7_LS2_CH_7_RESET_VAL 0x0
#define IAXXX_AF_LS_2_CNL_7_LS2_CH_7_POS 0
#define IAXXX_AF_LS_2_CNL_7_LS2_CH_7_SIZE 32

/*** AF_LS_2_CNL_8 (0x400004a0) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 8 of Logical
 * Stream 2.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_2_CNL_8_ADDR (0x400004a0)
#define IAXXX_AF_LS_2_CNL_8_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_8_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_CNL_8_RESET_VAL 0x00000000

/*
 * Channel 8 Audio Sample Data for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_CNL_8_LS2_CH_8_MASK 0xffffffff
#define IAXXX_AF_LS_2_CNL_8_LS2_CH_8_RESET_VAL 0x0
#define IAXXX_AF_LS_2_CNL_8_LS2_CH_8_POS 0
#define IAXXX_AF_LS_2_CNL_8_LS2_CH_8_SIZE 32

/*** AF_LS_2_CNL_9 (0x400004a4) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 9 of Logical
 * Stream 2.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_2_CNL_9_ADDR (0x400004a4)
#define IAXXX_AF_LS_2_CNL_9_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_9_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_CNL_9_RESET_VAL 0x00000000

/*
 * Channel 9 Audio Sample Data for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_CNL_9_LS2_CH_9_MASK 0xffffffff
#define IAXXX_AF_LS_2_CNL_9_LS2_CH_9_RESET_VAL 0x0
#define IAXXX_AF_LS_2_CNL_9_LS2_CH_9_POS 0
#define IAXXX_AF_LS_2_CNL_9_LS2_CH_9_SIZE 32

/*** AF_LS_2_CNL_10 (0x400004a8) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 10 of
 * Logical Stream 2.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_2_CNL_10_ADDR (0x400004a8)
#define IAXXX_AF_LS_2_CNL_10_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_10_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_CNL_10_RESET_VAL 0x00000000

/*
 * Channel 10 Audio Sample Data for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_CNL_10_LS2_CH_10_MASK 0xffffffff
#define IAXXX_AF_LS_2_CNL_10_LS2_CH_10_RESET_VAL 0x0
#define IAXXX_AF_LS_2_CNL_10_LS2_CH_10_POS 0
#define IAXXX_AF_LS_2_CNL_10_LS2_CH_10_SIZE 32

/*** AF_LS_2_CNL_11 (0x400004ac) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 11 of
 * Logical Stream 2.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_2_CNL_11_ADDR (0x400004ac)
#define IAXXX_AF_LS_2_CNL_11_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_11_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_CNL_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_CNL_11_RESET_VAL 0x00000000

/*
 * Channel 11 Audio Sample Data for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_CNL_11_LS2_CH_11_MASK 0xffffffff
#define IAXXX_AF_LS_2_CNL_11_LS2_CH_11_RESET_VAL 0x0
#define IAXXX_AF_LS_2_CNL_11_LS2_CH_11_POS 0
#define IAXXX_AF_LS_2_CNL_11_LS2_CH_11_SIZE 32

/*** AF_LS_2_RESERVED_0 (0x400004b0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_0_ADDR (0x400004b0)
#define IAXXX_AF_LS_2_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_2_RESERVED_1 (0x400004b4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_2_RESERVED_1_ADDR (0x400004b4)
#define IAXXX_AF_LS_2_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_2_PT_0 (0x400004b8) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_2_PT_0_ADDR (0x400004b8)
#define IAXXX_AF_LS_2_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_2_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_2_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_2_PT_0_VAL_POS 0
#define IAXXX_AF_LS_2_PT_0_VAL_SIZE 32

/*** AF_LS_2_PT_1 (0x400004bc) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 2,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_2_PT_1_ADDR (0x400004bc)
#define IAXXX_AF_LS_2_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_2_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_2_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_2_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 2.
 */
#define IAXXX_AF_LS_2_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_2_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_2_PT_1_VAL_POS 0
#define IAXXX_AF_LS_2_PT_1_VAL_SIZE 20

/*
 * Presentation Time Valid bit, if LS_DMA[2] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_2_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_2_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_2_PT_1_VLD_POS 31
#define IAXXX_AF_LS_2_PT_1_VLD_SIZE 1

/*** AF_LS_3_CNL_0 (0x400004c0) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 3.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_3_CNL_0_ADDR (0x400004c0)
#define IAXXX_AF_LS_3_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_CNL_0_LS3_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_3_CNL_0_LS3_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_3_CNL_0_LS3_CH_0_POS 0
#define IAXXX_AF_LS_3_CNL_0_LS3_CH_0_SIZE 32

/*** AF_LS_3_CNL_1 (0x400004c4) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 3.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_3_CNL_1_ADDR (0x400004c4)
#define IAXXX_AF_LS_3_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_CNL_1_LS3_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_3_CNL_1_LS3_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_3_CNL_1_LS3_CH_1_POS 0
#define IAXXX_AF_LS_3_CNL_1_LS3_CH_1_SIZE 32

/*** AF_LS_3_CNL_2 (0x400004c8) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 3.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_3_CNL_2_ADDR (0x400004c8)
#define IAXXX_AF_LS_3_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_CNL_2_LS3_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_3_CNL_2_LS3_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_3_CNL_2_LS3_CH_2_POS 0
#define IAXXX_AF_LS_3_CNL_2_LS3_CH_2_SIZE 32

/*** AF_LS_3_CNL_3 (0x400004cc) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 3.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_3_CNL_3_ADDR (0x400004cc)
#define IAXXX_AF_LS_3_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_CNL_3_LS3_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_3_CNL_3_LS3_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_3_CNL_3_LS3_CH_3_POS 0
#define IAXXX_AF_LS_3_CNL_3_LS3_CH_3_SIZE 32

/*** AF_LS_3_CNL_4 (0x400004d0) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 4 of Logical
 * Stream 3.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_3_CNL_4_ADDR (0x400004d0)
#define IAXXX_AF_LS_3_CNL_4_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_4_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_CNL_4_RESET_VAL 0x00000000

/*
 * Channel 4 Audio Sample Data for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_CNL_4_LS3_CH_4_MASK 0xffffffff
#define IAXXX_AF_LS_3_CNL_4_LS3_CH_4_RESET_VAL 0x0
#define IAXXX_AF_LS_3_CNL_4_LS3_CH_4_POS 0
#define IAXXX_AF_LS_3_CNL_4_LS3_CH_4_SIZE 32

/*** AF_LS_3_CNL_5 (0x400004d4) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 5 of Logical
 * Stream 3.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_3_CNL_5_ADDR (0x400004d4)
#define IAXXX_AF_LS_3_CNL_5_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_5_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_CNL_5_RESET_VAL 0x00000000

/*
 * Channel 5 Audio Sample Data for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_CNL_5_LS3_CH_5_MASK 0xffffffff
#define IAXXX_AF_LS_3_CNL_5_LS3_CH_5_RESET_VAL 0x0
#define IAXXX_AF_LS_3_CNL_5_LS3_CH_5_POS 0
#define IAXXX_AF_LS_3_CNL_5_LS3_CH_5_SIZE 32

/*** AF_LS_3_CNL_6 (0x400004d8) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 6 of Logical
 * Stream 3.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_3_CNL_6_ADDR (0x400004d8)
#define IAXXX_AF_LS_3_CNL_6_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_6_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_CNL_6_RESET_VAL 0x00000000

/*
 * Channel 6 Audio Sample Data for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_CNL_6_LS3_CH_6_MASK 0xffffffff
#define IAXXX_AF_LS_3_CNL_6_LS3_CH_6_RESET_VAL 0x0
#define IAXXX_AF_LS_3_CNL_6_LS3_CH_6_POS 0
#define IAXXX_AF_LS_3_CNL_6_LS3_CH_6_SIZE 32

/*** AF_LS_3_CNL_7 (0x400004dc) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 7 of Logical
 * Stream 3.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_3_CNL_7_ADDR (0x400004dc)
#define IAXXX_AF_LS_3_CNL_7_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_7_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_CNL_7_RESET_VAL 0x00000000

/*
 * Channel 7 Audio Sample Data for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_CNL_7_LS3_CH_7_MASK 0xffffffff
#define IAXXX_AF_LS_3_CNL_7_LS3_CH_7_RESET_VAL 0x0
#define IAXXX_AF_LS_3_CNL_7_LS3_CH_7_POS 0
#define IAXXX_AF_LS_3_CNL_7_LS3_CH_7_SIZE 32

/*** AF_LS_3_CNL_8 (0x400004e0) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 8 of Logical
 * Stream 3.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_3_CNL_8_ADDR (0x400004e0)
#define IAXXX_AF_LS_3_CNL_8_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_8_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_CNL_8_RESET_VAL 0x00000000

/*
 * Channel 8 Audio Sample Data for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_CNL_8_LS3_CH_8_MASK 0xffffffff
#define IAXXX_AF_LS_3_CNL_8_LS3_CH_8_RESET_VAL 0x0
#define IAXXX_AF_LS_3_CNL_8_LS3_CH_8_POS 0
#define IAXXX_AF_LS_3_CNL_8_LS3_CH_8_SIZE 32

/*** AF_LS_3_CNL_9 (0x400004e4) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 9 of Logical
 * Stream 3.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_3_CNL_9_ADDR (0x400004e4)
#define IAXXX_AF_LS_3_CNL_9_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_9_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_CNL_9_RESET_VAL 0x00000000

/*
 * Channel 9 Audio Sample Data for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_CNL_9_LS3_CH_9_MASK 0xffffffff
#define IAXXX_AF_LS_3_CNL_9_LS3_CH_9_RESET_VAL 0x0
#define IAXXX_AF_LS_3_CNL_9_LS3_CH_9_POS 0
#define IAXXX_AF_LS_3_CNL_9_LS3_CH_9_SIZE 32

/*** AF_LS_3_CNL_10 (0x400004e8) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 10 of
 * Logical Stream 3.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_3_CNL_10_ADDR (0x400004e8)
#define IAXXX_AF_LS_3_CNL_10_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_10_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_CNL_10_RESET_VAL 0x00000000

/*
 * Channel 10 Audio Sample Data for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_CNL_10_LS3_CH_10_MASK 0xffffffff
#define IAXXX_AF_LS_3_CNL_10_LS3_CH_10_RESET_VAL 0x0
#define IAXXX_AF_LS_3_CNL_10_LS3_CH_10_POS 0
#define IAXXX_AF_LS_3_CNL_10_LS3_CH_10_SIZE 32

/*** AF_LS_3_CNL_11 (0x400004ec) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 11 of
 * Logical Stream 3.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_3_CNL_11_ADDR (0x400004ec)
#define IAXXX_AF_LS_3_CNL_11_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_11_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_CNL_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_CNL_11_RESET_VAL 0x00000000

/*
 * Channel 11 Audio Sample Data for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_CNL_11_LS3_CH_11_MASK 0xffffffff
#define IAXXX_AF_LS_3_CNL_11_LS3_CH_11_RESET_VAL 0x0
#define IAXXX_AF_LS_3_CNL_11_LS3_CH_11_POS 0
#define IAXXX_AF_LS_3_CNL_11_LS3_CH_11_SIZE 32

/*** AF_LS_3_RESERVED_0 (0x400004f0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_0_ADDR (0x400004f0)
#define IAXXX_AF_LS_3_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_3_RESERVED_1 (0x400004f4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_3_RESERVED_1_ADDR (0x400004f4)
#define IAXXX_AF_LS_3_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_3_PT_0 (0x400004f8) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_3_PT_0_ADDR (0x400004f8)
#define IAXXX_AF_LS_3_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_3_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_3_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_3_PT_0_VAL_POS 0
#define IAXXX_AF_LS_3_PT_0_VAL_SIZE 32

/*** AF_LS_3_PT_1 (0x400004fc) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 3,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_3_PT_1_ADDR (0x400004fc)
#define IAXXX_AF_LS_3_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_3_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_3_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_3_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 3.
 */
#define IAXXX_AF_LS_3_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_3_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_3_PT_1_VAL_POS 0
#define IAXXX_AF_LS_3_PT_1_VAL_SIZE 20

/*
 * Presentation Time Valid bit, if LS_DMA[3] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_3_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_3_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_3_PT_1_VLD_POS 31
#define IAXXX_AF_LS_3_PT_1_VLD_SIZE 1

/*** AF_LS_4_CNL_0 (0x40000500) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 4.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_4_CNL_0_ADDR (0x40000500)
#define IAXXX_AF_LS_4_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_CNL_0_LS4_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_4_CNL_0_LS4_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_4_CNL_0_LS4_CH_0_POS 0
#define IAXXX_AF_LS_4_CNL_0_LS4_CH_0_SIZE 32

/*** AF_LS_4_CNL_1 (0x40000504) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 4.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_4_CNL_1_ADDR (0x40000504)
#define IAXXX_AF_LS_4_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_CNL_1_LS4_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_4_CNL_1_LS4_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_4_CNL_1_LS4_CH_1_POS 0
#define IAXXX_AF_LS_4_CNL_1_LS4_CH_1_SIZE 32

/*** AF_LS_4_CNL_2 (0x40000508) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 4.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_4_CNL_2_ADDR (0x40000508)
#define IAXXX_AF_LS_4_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_CNL_2_LS4_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_4_CNL_2_LS4_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_4_CNL_2_LS4_CH_2_POS 0
#define IAXXX_AF_LS_4_CNL_2_LS4_CH_2_SIZE 32

/*** AF_LS_4_CNL_3 (0x4000050c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 4.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_4_CNL_3_ADDR (0x4000050c)
#define IAXXX_AF_LS_4_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_CNL_3_LS4_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_4_CNL_3_LS4_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_4_CNL_3_LS4_CH_3_POS 0
#define IAXXX_AF_LS_4_CNL_3_LS4_CH_3_SIZE 32

/*** AF_LS_4_CNL_4 (0x40000510) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 4 of Logical
 * Stream 4.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_4_CNL_4_ADDR (0x40000510)
#define IAXXX_AF_LS_4_CNL_4_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_4_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_CNL_4_RESET_VAL 0x00000000

/*
 * Channel 4 Audio Sample Data for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_CNL_4_LS4_CH_4_MASK 0xffffffff
#define IAXXX_AF_LS_4_CNL_4_LS4_CH_4_RESET_VAL 0x0
#define IAXXX_AF_LS_4_CNL_4_LS4_CH_4_POS 0
#define IAXXX_AF_LS_4_CNL_4_LS4_CH_4_SIZE 32

/*** AF_LS_4_CNL_5 (0x40000514) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 5 of Logical
 * Stream 4.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_4_CNL_5_ADDR (0x40000514)
#define IAXXX_AF_LS_4_CNL_5_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_5_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_CNL_5_RESET_VAL 0x00000000

/*
 * Channel 5 Audio Sample Data for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_CNL_5_LS4_CH_5_MASK 0xffffffff
#define IAXXX_AF_LS_4_CNL_5_LS4_CH_5_RESET_VAL 0x0
#define IAXXX_AF_LS_4_CNL_5_LS4_CH_5_POS 0
#define IAXXX_AF_LS_4_CNL_5_LS4_CH_5_SIZE 32

/*** AF_LS_4_CNL_6 (0x40000518) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 6 of Logical
 * Stream 4.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_4_CNL_6_ADDR (0x40000518)
#define IAXXX_AF_LS_4_CNL_6_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_6_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_CNL_6_RESET_VAL 0x00000000

/*
 * Channel 6 Audio Sample Data for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_CNL_6_LS4_CH_6_MASK 0xffffffff
#define IAXXX_AF_LS_4_CNL_6_LS4_CH_6_RESET_VAL 0x0
#define IAXXX_AF_LS_4_CNL_6_LS4_CH_6_POS 0
#define IAXXX_AF_LS_4_CNL_6_LS4_CH_6_SIZE 32

/*** AF_LS_4_CNL_7 (0x4000051c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 7 of Logical
 * Stream 4.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_4_CNL_7_ADDR (0x4000051c)
#define IAXXX_AF_LS_4_CNL_7_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_7_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_CNL_7_RESET_VAL 0x00000000

/*
 * Channel 7 Audio Sample Data for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_CNL_7_LS4_CH_7_MASK 0xffffffff
#define IAXXX_AF_LS_4_CNL_7_LS4_CH_7_RESET_VAL 0x0
#define IAXXX_AF_LS_4_CNL_7_LS4_CH_7_POS 0
#define IAXXX_AF_LS_4_CNL_7_LS4_CH_7_SIZE 32

/*** AF_LS_4_CNL_8 (0x40000520) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 8 of Logical
 * Stream 4.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_4_CNL_8_ADDR (0x40000520)
#define IAXXX_AF_LS_4_CNL_8_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_8_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_CNL_8_RESET_VAL 0x00000000

/*
 * Channel 8 Audio Sample Data for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_CNL_8_LS4_CH_8_MASK 0xffffffff
#define IAXXX_AF_LS_4_CNL_8_LS4_CH_8_RESET_VAL 0x0
#define IAXXX_AF_LS_4_CNL_8_LS4_CH_8_POS 0
#define IAXXX_AF_LS_4_CNL_8_LS4_CH_8_SIZE 32

/*** AF_LS_4_CNL_9 (0x40000524) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 9 of Logical
 * Stream 4.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_4_CNL_9_ADDR (0x40000524)
#define IAXXX_AF_LS_4_CNL_9_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_9_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_CNL_9_RESET_VAL 0x00000000

/*
 * Channel 9 Audio Sample Data for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_CNL_9_LS4_CH_9_MASK 0xffffffff
#define IAXXX_AF_LS_4_CNL_9_LS4_CH_9_RESET_VAL 0x0
#define IAXXX_AF_LS_4_CNL_9_LS4_CH_9_POS 0
#define IAXXX_AF_LS_4_CNL_9_LS4_CH_9_SIZE 32

/*** AF_LS_4_CNL_10 (0x40000528) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 10 of
 * Logical Stream 4.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_4_CNL_10_ADDR (0x40000528)
#define IAXXX_AF_LS_4_CNL_10_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_10_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_CNL_10_RESET_VAL 0x00000000

/*
 * Channel 10 Audio Sample Data for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_CNL_10_LS4_CH_10_MASK 0xffffffff
#define IAXXX_AF_LS_4_CNL_10_LS4_CH_10_RESET_VAL 0x0
#define IAXXX_AF_LS_4_CNL_10_LS4_CH_10_POS 0
#define IAXXX_AF_LS_4_CNL_10_LS4_CH_10_SIZE 32

/*** AF_LS_4_CNL_11 (0x4000052c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 11 of
 * Logical Stream 4.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_4_CNL_11_ADDR (0x4000052c)
#define IAXXX_AF_LS_4_CNL_11_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_11_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_CNL_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_CNL_11_RESET_VAL 0x00000000

/*
 * Channel 11 Audio Sample Data for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_CNL_11_LS4_CH_11_MASK 0xffffffff
#define IAXXX_AF_LS_4_CNL_11_LS4_CH_11_RESET_VAL 0x0
#define IAXXX_AF_LS_4_CNL_11_LS4_CH_11_POS 0
#define IAXXX_AF_LS_4_CNL_11_LS4_CH_11_SIZE 32

/*** AF_LS_4_RESERVED_0 (0x40000530) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_0_ADDR (0x40000530)
#define IAXXX_AF_LS_4_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_4_RESERVED_1 (0x40000534) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_4_RESERVED_1_ADDR (0x40000534)
#define IAXXX_AF_LS_4_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_4_PT_0 (0x40000538) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_4_PT_0_ADDR (0x40000538)
#define IAXXX_AF_LS_4_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_4_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_4_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_4_PT_0_VAL_POS 0
#define IAXXX_AF_LS_4_PT_0_VAL_SIZE 32

/*** AF_LS_4_PT_1 (0x4000053c) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 4,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_4_PT_1_ADDR (0x4000053c)
#define IAXXX_AF_LS_4_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_4_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_4_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_4_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 4.
 */
#define IAXXX_AF_LS_4_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_4_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_4_PT_1_VAL_POS 0
#define IAXXX_AF_LS_4_PT_1_VAL_SIZE 20

/*
 * Presentation Time Valid bit, if LS_DMA[4] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_4_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_4_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_4_PT_1_VLD_POS 31
#define IAXXX_AF_LS_4_PT_1_VLD_SIZE 1

/*** AF_LS_5_CNL_0 (0x40000540) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 5.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_5_CNL_0_ADDR (0x40000540)
#define IAXXX_AF_LS_5_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_CNL_0_LS5_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_5_CNL_0_LS5_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_5_CNL_0_LS5_CH_0_POS 0
#define IAXXX_AF_LS_5_CNL_0_LS5_CH_0_SIZE 32

/*** AF_LS_5_CNL_1 (0x40000544) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 5.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_5_CNL_1_ADDR (0x40000544)
#define IAXXX_AF_LS_5_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_CNL_1_LS5_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_5_CNL_1_LS5_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_5_CNL_1_LS5_CH_1_POS 0
#define IAXXX_AF_LS_5_CNL_1_LS5_CH_1_SIZE 32

/*** AF_LS_5_CNL_2 (0x40000548) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 5.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_5_CNL_2_ADDR (0x40000548)
#define IAXXX_AF_LS_5_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_CNL_2_LS5_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_5_CNL_2_LS5_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_5_CNL_2_LS5_CH_2_POS 0
#define IAXXX_AF_LS_5_CNL_2_LS5_CH_2_SIZE 32

/*** AF_LS_5_CNL_3 (0x4000054c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 5.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_5_CNL_3_ADDR (0x4000054c)
#define IAXXX_AF_LS_5_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_CNL_3_LS5_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_5_CNL_3_LS5_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_5_CNL_3_LS5_CH_3_POS 0
#define IAXXX_AF_LS_5_CNL_3_LS5_CH_3_SIZE 32

/*** AF_LS_5_CNL_4 (0x40000550) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 4 of Logical
 * Stream 5.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_5_CNL_4_ADDR (0x40000550)
#define IAXXX_AF_LS_5_CNL_4_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_4_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_CNL_4_RESET_VAL 0x00000000

/*
 * Channel 4 Audio Sample Data for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_CNL_4_LS5_CH_4_MASK 0xffffffff
#define IAXXX_AF_LS_5_CNL_4_LS5_CH_4_RESET_VAL 0x0
#define IAXXX_AF_LS_5_CNL_4_LS5_CH_4_POS 0
#define IAXXX_AF_LS_5_CNL_4_LS5_CH_4_SIZE 32

/*** AF_LS_5_CNL_5 (0x40000554) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 5 of Logical
 * Stream 5.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_5_CNL_5_ADDR (0x40000554)
#define IAXXX_AF_LS_5_CNL_5_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_5_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_CNL_5_RESET_VAL 0x00000000

/*
 * Channel 5 Audio Sample Data for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_CNL_5_LS5_CH_5_MASK 0xffffffff
#define IAXXX_AF_LS_5_CNL_5_LS5_CH_5_RESET_VAL 0x0
#define IAXXX_AF_LS_5_CNL_5_LS5_CH_5_POS 0
#define IAXXX_AF_LS_5_CNL_5_LS5_CH_5_SIZE 32

/*** AF_LS_5_CNL_6 (0x40000558) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 6 of Logical
 * Stream 5.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_5_CNL_6_ADDR (0x40000558)
#define IAXXX_AF_LS_5_CNL_6_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_6_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_CNL_6_RESET_VAL 0x00000000

/*
 * Channel 6 Audio Sample Data for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_CNL_6_LS5_CH_6_MASK 0xffffffff
#define IAXXX_AF_LS_5_CNL_6_LS5_CH_6_RESET_VAL 0x0
#define IAXXX_AF_LS_5_CNL_6_LS5_CH_6_POS 0
#define IAXXX_AF_LS_5_CNL_6_LS5_CH_6_SIZE 32

/*** AF_LS_5_CNL_7 (0x4000055c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 7 of Logical
 * Stream 5.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_5_CNL_7_ADDR (0x4000055c)
#define IAXXX_AF_LS_5_CNL_7_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_7_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_CNL_7_RESET_VAL 0x00000000

/*
 * Channel 7 Audio Sample Data for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_CNL_7_LS5_CH_7_MASK 0xffffffff
#define IAXXX_AF_LS_5_CNL_7_LS5_CH_7_RESET_VAL 0x0
#define IAXXX_AF_LS_5_CNL_7_LS5_CH_7_POS 0
#define IAXXX_AF_LS_5_CNL_7_LS5_CH_7_SIZE 32

/*** AF_LS_5_CNL_8 (0x40000560) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 8 of Logical
 * Stream 5.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_5_CNL_8_ADDR (0x40000560)
#define IAXXX_AF_LS_5_CNL_8_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_8_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_CNL_8_RESET_VAL 0x00000000

/*
 * Channel 8 Audio Sample Data for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_CNL_8_LS5_CH_8_MASK 0xffffffff
#define IAXXX_AF_LS_5_CNL_8_LS5_CH_8_RESET_VAL 0x0
#define IAXXX_AF_LS_5_CNL_8_LS5_CH_8_POS 0
#define IAXXX_AF_LS_5_CNL_8_LS5_CH_8_SIZE 32

/*** AF_LS_5_CNL_9 (0x40000564) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 9 of Logical
 * Stream 5.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_5_CNL_9_ADDR (0x40000564)
#define IAXXX_AF_LS_5_CNL_9_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_9_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_CNL_9_RESET_VAL 0x00000000

/*
 * Channel 9 Audio Sample Data for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_CNL_9_LS5_CH_9_MASK 0xffffffff
#define IAXXX_AF_LS_5_CNL_9_LS5_CH_9_RESET_VAL 0x0
#define IAXXX_AF_LS_5_CNL_9_LS5_CH_9_POS 0
#define IAXXX_AF_LS_5_CNL_9_LS5_CH_9_SIZE 32

/*** AF_LS_5_CNL_10 (0x40000568) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 10 of
 * Logical Stream 5.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_5_CNL_10_ADDR (0x40000568)
#define IAXXX_AF_LS_5_CNL_10_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_10_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_CNL_10_RESET_VAL 0x00000000

/*
 * Channel 10 Audio Sample Data for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_CNL_10_LS5_CH_10_MASK 0xffffffff
#define IAXXX_AF_LS_5_CNL_10_LS5_CH_10_RESET_VAL 0x0
#define IAXXX_AF_LS_5_CNL_10_LS5_CH_10_POS 0
#define IAXXX_AF_LS_5_CNL_10_LS5_CH_10_SIZE 32

/*** AF_LS_5_CNL_11 (0x4000056c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 11 of
 * Logical Stream 5.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_5_CNL_11_ADDR (0x4000056c)
#define IAXXX_AF_LS_5_CNL_11_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_11_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_CNL_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_CNL_11_RESET_VAL 0x00000000

/*
 * Channel 11 Audio Sample Data for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_CNL_11_LS5_CH_11_MASK 0xffffffff
#define IAXXX_AF_LS_5_CNL_11_LS5_CH_11_RESET_VAL 0x0
#define IAXXX_AF_LS_5_CNL_11_LS5_CH_11_POS 0
#define IAXXX_AF_LS_5_CNL_11_LS5_CH_11_SIZE 32

/*** AF_LS_5_RESERVED_0 (0x40000570) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_0_ADDR (0x40000570)
#define IAXXX_AF_LS_5_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_5_RESERVED_1 (0x40000574) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_5_RESERVED_1_ADDR (0x40000574)
#define IAXXX_AF_LS_5_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_5_PT_0 (0x40000578) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_5_PT_0_ADDR (0x40000578)
#define IAXXX_AF_LS_5_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_5_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_5_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_5_PT_0_VAL_POS 0
#define IAXXX_AF_LS_5_PT_0_VAL_SIZE 32

/*** AF_LS_5_PT_1 (0x4000057c) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 5,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_5_PT_1_ADDR (0x4000057c)
#define IAXXX_AF_LS_5_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_5_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_5_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_5_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 5.
 */
#define IAXXX_AF_LS_5_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_5_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_5_PT_1_VAL_POS 0
#define IAXXX_AF_LS_5_PT_1_VAL_SIZE 20

/*
 * Presentation Time Valid bit, if LS_DMA[5] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_5_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_5_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_5_PT_1_VLD_POS 31
#define IAXXX_AF_LS_5_PT_1_VLD_SIZE 1

/*** AF_LS_6_CNL_0 (0x40000580) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 6.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_6_CNL_0_ADDR (0x40000580)
#define IAXXX_AF_LS_6_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_CNL_0_LS6_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_6_CNL_0_LS6_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_6_CNL_0_LS6_CH_0_POS 0
#define IAXXX_AF_LS_6_CNL_0_LS6_CH_0_SIZE 32

/*** AF_LS_6_CNL_1 (0x40000584) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 6.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_6_CNL_1_ADDR (0x40000584)
#define IAXXX_AF_LS_6_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_CNL_1_LS6_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_6_CNL_1_LS6_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_6_CNL_1_LS6_CH_1_POS 0
#define IAXXX_AF_LS_6_CNL_1_LS6_CH_1_SIZE 32

/*** AF_LS_6_CNL_2 (0x40000588) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 6.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_6_CNL_2_ADDR (0x40000588)
#define IAXXX_AF_LS_6_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_CNL_2_LS6_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_6_CNL_2_LS6_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_6_CNL_2_LS6_CH_2_POS 0
#define IAXXX_AF_LS_6_CNL_2_LS6_CH_2_SIZE 32

/*** AF_LS_6_CNL_3 (0x4000058c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 6.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_6_CNL_3_ADDR (0x4000058c)
#define IAXXX_AF_LS_6_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_CNL_3_LS6_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_6_CNL_3_LS6_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_6_CNL_3_LS6_CH_3_POS 0
#define IAXXX_AF_LS_6_CNL_3_LS6_CH_3_SIZE 32

/*** AF_LS_6_CNL_4 (0x40000590) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 4 of Logical
 * Stream 6.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_6_CNL_4_ADDR (0x40000590)
#define IAXXX_AF_LS_6_CNL_4_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_4_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_CNL_4_RESET_VAL 0x00000000

/*
 * Channel 4 Audio Sample Data for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_CNL_4_LS6_CH_4_MASK 0xffffffff
#define IAXXX_AF_LS_6_CNL_4_LS6_CH_4_RESET_VAL 0x0
#define IAXXX_AF_LS_6_CNL_4_LS6_CH_4_POS 0
#define IAXXX_AF_LS_6_CNL_4_LS6_CH_4_SIZE 32

/*** AF_LS_6_CNL_5 (0x40000594) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 5 of Logical
 * Stream 6.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_6_CNL_5_ADDR (0x40000594)
#define IAXXX_AF_LS_6_CNL_5_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_5_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_CNL_5_RESET_VAL 0x00000000

/*
 * Channel 5 Audio Sample Data for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_CNL_5_LS6_CH_5_MASK 0xffffffff
#define IAXXX_AF_LS_6_CNL_5_LS6_CH_5_RESET_VAL 0x0
#define IAXXX_AF_LS_6_CNL_5_LS6_CH_5_POS 0
#define IAXXX_AF_LS_6_CNL_5_LS6_CH_5_SIZE 32

/*** AF_LS_6_CNL_6 (0x40000598) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 6 of Logical
 * Stream 6.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_6_CNL_6_ADDR (0x40000598)
#define IAXXX_AF_LS_6_CNL_6_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_6_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_CNL_6_RESET_VAL 0x00000000

/*
 * Channel 6 Audio Sample Data for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_CNL_6_LS6_CH_6_MASK 0xffffffff
#define IAXXX_AF_LS_6_CNL_6_LS6_CH_6_RESET_VAL 0x0
#define IAXXX_AF_LS_6_CNL_6_LS6_CH_6_POS 0
#define IAXXX_AF_LS_6_CNL_6_LS6_CH_6_SIZE 32

/*** AF_LS_6_CNL_7 (0x4000059c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 7 of Logical
 * Stream 6.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_6_CNL_7_ADDR (0x4000059c)
#define IAXXX_AF_LS_6_CNL_7_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_7_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_CNL_7_RESET_VAL 0x00000000

/*
 * Channel 7 Audio Sample Data for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_CNL_7_LS6_CH_7_MASK 0xffffffff
#define IAXXX_AF_LS_6_CNL_7_LS6_CH_7_RESET_VAL 0x0
#define IAXXX_AF_LS_6_CNL_7_LS6_CH_7_POS 0
#define IAXXX_AF_LS_6_CNL_7_LS6_CH_7_SIZE 32

/*** AF_LS_6_CNL_8 (0x400005a0) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 8 of Logical
 * Stream 6.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_6_CNL_8_ADDR (0x400005a0)
#define IAXXX_AF_LS_6_CNL_8_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_8_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_CNL_8_RESET_VAL 0x00000000

/*
 * Channel 8 Audio Sample Data for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_CNL_8_LS6_CH_8_MASK 0xffffffff
#define IAXXX_AF_LS_6_CNL_8_LS6_CH_8_RESET_VAL 0x0
#define IAXXX_AF_LS_6_CNL_8_LS6_CH_8_POS 0
#define IAXXX_AF_LS_6_CNL_8_LS6_CH_8_SIZE 32

/*** AF_LS_6_CNL_9 (0x400005a4) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 9 of Logical
 * Stream 6.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_6_CNL_9_ADDR (0x400005a4)
#define IAXXX_AF_LS_6_CNL_9_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_9_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_CNL_9_RESET_VAL 0x00000000

/*
 * Channel 9 Audio Sample Data for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_CNL_9_LS6_CH_9_MASK 0xffffffff
#define IAXXX_AF_LS_6_CNL_9_LS6_CH_9_RESET_VAL 0x0
#define IAXXX_AF_LS_6_CNL_9_LS6_CH_9_POS 0
#define IAXXX_AF_LS_6_CNL_9_LS6_CH_9_SIZE 32

/*** AF_LS_6_CNL_10 (0x400005a8) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 10 of
 * Logical Stream 6.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_6_CNL_10_ADDR (0x400005a8)
#define IAXXX_AF_LS_6_CNL_10_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_10_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_CNL_10_RESET_VAL 0x00000000

/*
 * Channel 10 Audio Sample Data for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_CNL_10_LS6_CH_10_MASK 0xffffffff
#define IAXXX_AF_LS_6_CNL_10_LS6_CH_10_RESET_VAL 0x0
#define IAXXX_AF_LS_6_CNL_10_LS6_CH_10_POS 0
#define IAXXX_AF_LS_6_CNL_10_LS6_CH_10_SIZE 32

/*** AF_LS_6_CNL_11 (0x400005ac) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 11 of
 * Logical Stream 6.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_6_CNL_11_ADDR (0x400005ac)
#define IAXXX_AF_LS_6_CNL_11_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_11_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_CNL_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_CNL_11_RESET_VAL 0x00000000

/*
 * Channel 11 Audio Sample Data for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_CNL_11_LS6_CH_11_MASK 0xffffffff
#define IAXXX_AF_LS_6_CNL_11_LS6_CH_11_RESET_VAL 0x0
#define IAXXX_AF_LS_6_CNL_11_LS6_CH_11_POS 0
#define IAXXX_AF_LS_6_CNL_11_LS6_CH_11_SIZE 32

/*** AF_LS_6_RESERVED_0 (0x400005b0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_0_ADDR (0x400005b0)
#define IAXXX_AF_LS_6_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_6_RESERVED_1 (0x400005b4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_6_RESERVED_1_ADDR (0x400005b4)
#define IAXXX_AF_LS_6_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_6_PT_0 (0x400005b8) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_6_PT_0_ADDR (0x400005b8)
#define IAXXX_AF_LS_6_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_6_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_6_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_6_PT_0_VAL_POS 0
#define IAXXX_AF_LS_6_PT_0_VAL_SIZE 32

/*** AF_LS_6_PT_1 (0x400005bc) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 6,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_6_PT_1_ADDR (0x400005bc)
#define IAXXX_AF_LS_6_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_6_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_6_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_6_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 6.
 */
#define IAXXX_AF_LS_6_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_6_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_6_PT_1_VAL_POS 0
#define IAXXX_AF_LS_6_PT_1_VAL_SIZE 20

/*
 * Presentation Time Valid bit, if LS_DMA[6] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_6_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_6_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_6_PT_1_VLD_POS 31
#define IAXXX_AF_LS_6_PT_1_VLD_SIZE 1

/*** AF_LS_7_CNL_0 (0x400005c0) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 7.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_7_CNL_0_ADDR (0x400005c0)
#define IAXXX_AF_LS_7_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_CNL_0_LS7_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_7_CNL_0_LS7_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_7_CNL_0_LS7_CH_0_POS 0
#define IAXXX_AF_LS_7_CNL_0_LS7_CH_0_SIZE 32

/*** AF_LS_7_CNL_1 (0x400005c4) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 7.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_7_CNL_1_ADDR (0x400005c4)
#define IAXXX_AF_LS_7_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_CNL_1_LS7_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_7_CNL_1_LS7_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_7_CNL_1_LS7_CH_1_POS 0
#define IAXXX_AF_LS_7_CNL_1_LS7_CH_1_SIZE 32

/*** AF_LS_7_CNL_2 (0x400005c8) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 7.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_7_CNL_2_ADDR (0x400005c8)
#define IAXXX_AF_LS_7_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_CNL_2_LS7_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_7_CNL_2_LS7_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_7_CNL_2_LS7_CH_2_POS 0
#define IAXXX_AF_LS_7_CNL_2_LS7_CH_2_SIZE 32

/*** AF_LS_7_CNL_3 (0x400005cc) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 7.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_7_CNL_3_ADDR (0x400005cc)
#define IAXXX_AF_LS_7_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_CNL_3_LS7_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_7_CNL_3_LS7_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_7_CNL_3_LS7_CH_3_POS 0
#define IAXXX_AF_LS_7_CNL_3_LS7_CH_3_SIZE 32

/*** AF_LS_7_CNL_4 (0x400005d0) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 4 of Logical
 * Stream 7.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_7_CNL_4_ADDR (0x400005d0)
#define IAXXX_AF_LS_7_CNL_4_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_4_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_CNL_4_RESET_VAL 0x00000000

/*
 * Channel 4 Audio Sample Data for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_CNL_4_LS7_CH_4_MASK 0xffffffff
#define IAXXX_AF_LS_7_CNL_4_LS7_CH_4_RESET_VAL 0x0
#define IAXXX_AF_LS_7_CNL_4_LS7_CH_4_POS 0
#define IAXXX_AF_LS_7_CNL_4_LS7_CH_4_SIZE 32

/*** AF_LS_7_CNL_5 (0x400005d4) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 5 of Logical
 * Stream 7.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_7_CNL_5_ADDR (0x400005d4)
#define IAXXX_AF_LS_7_CNL_5_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_5_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_CNL_5_RESET_VAL 0x00000000

/*
 * Channel 5 Audio Sample Data for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_CNL_5_LS7_CH_5_MASK 0xffffffff
#define IAXXX_AF_LS_7_CNL_5_LS7_CH_5_RESET_VAL 0x0
#define IAXXX_AF_LS_7_CNL_5_LS7_CH_5_POS 0
#define IAXXX_AF_LS_7_CNL_5_LS7_CH_5_SIZE 32

/*** AF_LS_7_CNL_6 (0x400005d8) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 6 of Logical
 * Stream 7.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_7_CNL_6_ADDR (0x400005d8)
#define IAXXX_AF_LS_7_CNL_6_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_6_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_CNL_6_RESET_VAL 0x00000000

/*
 * Channel 6 Audio Sample Data for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_CNL_6_LS7_CH_6_MASK 0xffffffff
#define IAXXX_AF_LS_7_CNL_6_LS7_CH_6_RESET_VAL 0x0
#define IAXXX_AF_LS_7_CNL_6_LS7_CH_6_POS 0
#define IAXXX_AF_LS_7_CNL_6_LS7_CH_6_SIZE 32

/*** AF_LS_7_CNL_7 (0x400005dc) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 7 of Logical
 * Stream 7.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_7_CNL_7_ADDR (0x400005dc)
#define IAXXX_AF_LS_7_CNL_7_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_7_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_CNL_7_RESET_VAL 0x00000000

/*
 * Channel 7 Audio Sample Data for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_CNL_7_LS7_CH_7_MASK 0xffffffff
#define IAXXX_AF_LS_7_CNL_7_LS7_CH_7_RESET_VAL 0x0
#define IAXXX_AF_LS_7_CNL_7_LS7_CH_7_POS 0
#define IAXXX_AF_LS_7_CNL_7_LS7_CH_7_SIZE 32

/*** AF_LS_7_CNL_8 (0x400005e0) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 8 of Logical
 * Stream 7.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_7_CNL_8_ADDR (0x400005e0)
#define IAXXX_AF_LS_7_CNL_8_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_8_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_CNL_8_RESET_VAL 0x00000000

/*
 * Channel 8 Audio Sample Data for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_CNL_8_LS7_CH_8_MASK 0xffffffff
#define IAXXX_AF_LS_7_CNL_8_LS7_CH_8_RESET_VAL 0x0
#define IAXXX_AF_LS_7_CNL_8_LS7_CH_8_POS 0
#define IAXXX_AF_LS_7_CNL_8_LS7_CH_8_SIZE 32

/*** AF_LS_7_CNL_9 (0x400005e4) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 9 of Logical
 * Stream 7.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_7_CNL_9_ADDR (0x400005e4)
#define IAXXX_AF_LS_7_CNL_9_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_9_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_CNL_9_RESET_VAL 0x00000000

/*
 * Channel 9 Audio Sample Data for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_CNL_9_LS7_CH_9_MASK 0xffffffff
#define IAXXX_AF_LS_7_CNL_9_LS7_CH_9_RESET_VAL 0x0
#define IAXXX_AF_LS_7_CNL_9_LS7_CH_9_POS 0
#define IAXXX_AF_LS_7_CNL_9_LS7_CH_9_SIZE 32

/*** AF_LS_7_CNL_10 (0x400005e8) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 10 of
 * Logical Stream 7.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_7_CNL_10_ADDR (0x400005e8)
#define IAXXX_AF_LS_7_CNL_10_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_10_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_CNL_10_RESET_VAL 0x00000000

/*
 * Channel 10 Audio Sample Data for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_CNL_10_LS7_CH_10_MASK 0xffffffff
#define IAXXX_AF_LS_7_CNL_10_LS7_CH_10_RESET_VAL 0x0
#define IAXXX_AF_LS_7_CNL_10_LS7_CH_10_POS 0
#define IAXXX_AF_LS_7_CNL_10_LS7_CH_10_SIZE 32

/*** AF_LS_7_CNL_11 (0x400005ec) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 11 of
 * Logical Stream 7.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_7_CNL_11_ADDR (0x400005ec)
#define IAXXX_AF_LS_7_CNL_11_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_11_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_CNL_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_CNL_11_RESET_VAL 0x00000000

/*
 * Channel 11 Audio Sample Data for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_CNL_11_LS7_CH_11_MASK 0xffffffff
#define IAXXX_AF_LS_7_CNL_11_LS7_CH_11_RESET_VAL 0x0
#define IAXXX_AF_LS_7_CNL_11_LS7_CH_11_POS 0
#define IAXXX_AF_LS_7_CNL_11_LS7_CH_11_SIZE 32

/*** AF_LS_7_RESERVED_0 (0x400005f0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_0_ADDR (0x400005f0)
#define IAXXX_AF_LS_7_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_7_RESERVED_1 (0x400005f4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_7_RESERVED_1_ADDR (0x400005f4)
#define IAXXX_AF_LS_7_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_7_PT_0 (0x400005f8) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_7_PT_0_ADDR (0x400005f8)
#define IAXXX_AF_LS_7_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_7_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_7_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_7_PT_0_VAL_POS 0
#define IAXXX_AF_LS_7_PT_0_VAL_SIZE 32

/*** AF_LS_7_PT_1 (0x400005fc) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 7,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_7_PT_1_ADDR (0x400005fc)
#define IAXXX_AF_LS_7_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_7_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_7_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_7_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 7.
 */
#define IAXXX_AF_LS_7_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_7_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_7_PT_1_VAL_POS 0
#define IAXXX_AF_LS_7_PT_1_VAL_SIZE 20

/*
 * Presentation Time Valid bit, if LS_DMA[7] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_7_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_7_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_7_PT_1_VLD_POS 31
#define IAXXX_AF_LS_7_PT_1_VLD_SIZE 1

/*** AF_LS_8_CNL_0 (0x40000600) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 8.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_8_CNL_0_ADDR (0x40000600)
#define IAXXX_AF_LS_8_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_CNL_0_LS8_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_8_CNL_0_LS8_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_8_CNL_0_LS8_CH_0_POS 0
#define IAXXX_AF_LS_8_CNL_0_LS8_CH_0_SIZE 32

/*** AF_LS_8_CNL_1 (0x40000604) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 8.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_8_CNL_1_ADDR (0x40000604)
#define IAXXX_AF_LS_8_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_CNL_1_LS8_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_8_CNL_1_LS8_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_8_CNL_1_LS8_CH_1_POS 0
#define IAXXX_AF_LS_8_CNL_1_LS8_CH_1_SIZE 32

/*** AF_LS_8_CNL_2 (0x40000608) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 8.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_8_CNL_2_ADDR (0x40000608)
#define IAXXX_AF_LS_8_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_CNL_2_LS8_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_8_CNL_2_LS8_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_8_CNL_2_LS8_CH_2_POS 0
#define IAXXX_AF_LS_8_CNL_2_LS8_CH_2_SIZE 32

/*** AF_LS_8_CNL_3 (0x4000060c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 8.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_8_CNL_3_ADDR (0x4000060c)
#define IAXXX_AF_LS_8_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_CNL_3_LS8_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_8_CNL_3_LS8_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_8_CNL_3_LS8_CH_3_POS 0
#define IAXXX_AF_LS_8_CNL_3_LS8_CH_3_SIZE 32

/*** AF_LS_8_CNL_4 (0x40000610) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 4 of Logical
 * Stream 8.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_8_CNL_4_ADDR (0x40000610)
#define IAXXX_AF_LS_8_CNL_4_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_4_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_CNL_4_RESET_VAL 0x00000000

/*
 * Channel 4 Audio Sample Data for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_CNL_4_LS8_CH_4_MASK 0xffffffff
#define IAXXX_AF_LS_8_CNL_4_LS8_CH_4_RESET_VAL 0x0
#define IAXXX_AF_LS_8_CNL_4_LS8_CH_4_POS 0
#define IAXXX_AF_LS_8_CNL_4_LS8_CH_4_SIZE 32

/*** AF_LS_8_CNL_5 (0x40000614) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 5 of Logical
 * Stream 8.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_8_CNL_5_ADDR (0x40000614)
#define IAXXX_AF_LS_8_CNL_5_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_5_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_CNL_5_RESET_VAL 0x00000000

/*
 * Channel 5 Audio Sample Data for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_CNL_5_LS8_CH_5_MASK 0xffffffff
#define IAXXX_AF_LS_8_CNL_5_LS8_CH_5_RESET_VAL 0x0
#define IAXXX_AF_LS_8_CNL_5_LS8_CH_5_POS 0
#define IAXXX_AF_LS_8_CNL_5_LS8_CH_5_SIZE 32

/*** AF_LS_8_CNL_6 (0x40000618) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 6 of Logical
 * Stream 8.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_8_CNL_6_ADDR (0x40000618)
#define IAXXX_AF_LS_8_CNL_6_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_6_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_CNL_6_RESET_VAL 0x00000000

/*
 * Channel 6 Audio Sample Data for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_CNL_6_LS8_CH_6_MASK 0xffffffff
#define IAXXX_AF_LS_8_CNL_6_LS8_CH_6_RESET_VAL 0x0
#define IAXXX_AF_LS_8_CNL_6_LS8_CH_6_POS 0
#define IAXXX_AF_LS_8_CNL_6_LS8_CH_6_SIZE 32

/*** AF_LS_8_CNL_7 (0x4000061c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 7 of Logical
 * Stream 8.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_8_CNL_7_ADDR (0x4000061c)
#define IAXXX_AF_LS_8_CNL_7_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_7_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_CNL_7_RESET_VAL 0x00000000

/*
 * Channel 7 Audio Sample Data for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_CNL_7_LS8_CH_7_MASK 0xffffffff
#define IAXXX_AF_LS_8_CNL_7_LS8_CH_7_RESET_VAL 0x0
#define IAXXX_AF_LS_8_CNL_7_LS8_CH_7_POS 0
#define IAXXX_AF_LS_8_CNL_7_LS8_CH_7_SIZE 32

/*** AF_LS_8_CNL_8 (0x40000620) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 8 of Logical
 * Stream 8.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_8_CNL_8_ADDR (0x40000620)
#define IAXXX_AF_LS_8_CNL_8_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_8_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_CNL_8_RESET_VAL 0x00000000

/*
 * Channel 8 Audio Sample Data for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_CNL_8_LS8_CH_8_MASK 0xffffffff
#define IAXXX_AF_LS_8_CNL_8_LS8_CH_8_RESET_VAL 0x0
#define IAXXX_AF_LS_8_CNL_8_LS8_CH_8_POS 0
#define IAXXX_AF_LS_8_CNL_8_LS8_CH_8_SIZE 32

/*** AF_LS_8_CNL_9 (0x40000624) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 9 of Logical
 * Stream 8.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_8_CNL_9_ADDR (0x40000624)
#define IAXXX_AF_LS_8_CNL_9_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_9_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_CNL_9_RESET_VAL 0x00000000

/*
 * Channel 9 Audio Sample Data for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_CNL_9_LS8_CH_9_MASK 0xffffffff
#define IAXXX_AF_LS_8_CNL_9_LS8_CH_9_RESET_VAL 0x0
#define IAXXX_AF_LS_8_CNL_9_LS8_CH_9_POS 0
#define IAXXX_AF_LS_8_CNL_9_LS8_CH_9_SIZE 32

/*** AF_LS_8_CNL_10 (0x40000628) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 10 of
 * Logical Stream 8.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_8_CNL_10_ADDR (0x40000628)
#define IAXXX_AF_LS_8_CNL_10_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_10_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_CNL_10_RESET_VAL 0x00000000

/*
 * Channel 10 Audio Sample Data for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_CNL_10_LS8_CH_10_MASK 0xffffffff
#define IAXXX_AF_LS_8_CNL_10_LS8_CH_10_RESET_VAL 0x0
#define IAXXX_AF_LS_8_CNL_10_LS8_CH_10_POS 0
#define IAXXX_AF_LS_8_CNL_10_LS8_CH_10_SIZE 32

/*** AF_LS_8_CNL_11 (0x4000062c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 11 of
 * Logical Stream 8.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_8_CNL_11_ADDR (0x4000062c)
#define IAXXX_AF_LS_8_CNL_11_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_11_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_CNL_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_CNL_11_RESET_VAL 0x00000000

/*
 * Channel 11 Audio Sample Data for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_CNL_11_LS8_CH_11_MASK 0xffffffff
#define IAXXX_AF_LS_8_CNL_11_LS8_CH_11_RESET_VAL 0x0
#define IAXXX_AF_LS_8_CNL_11_LS8_CH_11_POS 0
#define IAXXX_AF_LS_8_CNL_11_LS8_CH_11_SIZE 32

/*** AF_LS_8_RESERVED_0 (0x40000630) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_0_ADDR (0x40000630)
#define IAXXX_AF_LS_8_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_8_RESERVED_1 (0x40000634) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_8_RESERVED_1_ADDR (0x40000634)
#define IAXXX_AF_LS_8_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_8_PT_0 (0x40000638) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_8_PT_0_ADDR (0x40000638)
#define IAXXX_AF_LS_8_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_8_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_8_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_8_PT_0_VAL_POS 0
#define IAXXX_AF_LS_8_PT_0_VAL_SIZE 32

/*** AF_LS_8_PT_1 (0x4000063c) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 8,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_8_PT_1_ADDR (0x4000063c)
#define IAXXX_AF_LS_8_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_8_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_8_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_8_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 8.
 */
#define IAXXX_AF_LS_8_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_8_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_8_PT_1_VAL_POS 0
#define IAXXX_AF_LS_8_PT_1_VAL_SIZE 20

/*
 * Presentation Time Valid bit, if LS_DMA[8] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_8_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_8_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_8_PT_1_VLD_POS 31
#define IAXXX_AF_LS_8_PT_1_VLD_SIZE 1

/*** AF_LS_9_CNL_0 (0x40000640) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 9.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_9_CNL_0_ADDR (0x40000640)
#define IAXXX_AF_LS_9_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_CNL_0_LS9_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_9_CNL_0_LS9_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_9_CNL_0_LS9_CH_0_POS 0
#define IAXXX_AF_LS_9_CNL_0_LS9_CH_0_SIZE 32

/*** AF_LS_9_CNL_1 (0x40000644) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 9.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_9_CNL_1_ADDR (0x40000644)
#define IAXXX_AF_LS_9_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_CNL_1_LS9_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_9_CNL_1_LS9_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_9_CNL_1_LS9_CH_1_POS 0
#define IAXXX_AF_LS_9_CNL_1_LS9_CH_1_SIZE 32

/*** AF_LS_9_CNL_2 (0x40000648) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 9.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_9_CNL_2_ADDR (0x40000648)
#define IAXXX_AF_LS_9_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_CNL_2_LS9_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_9_CNL_2_LS9_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_9_CNL_2_LS9_CH_2_POS 0
#define IAXXX_AF_LS_9_CNL_2_LS9_CH_2_SIZE 32

/*** AF_LS_9_CNL_3 (0x4000064c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 9.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_9_CNL_3_ADDR (0x4000064c)
#define IAXXX_AF_LS_9_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_CNL_3_LS9_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_9_CNL_3_LS9_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_9_CNL_3_LS9_CH_3_POS 0
#define IAXXX_AF_LS_9_CNL_3_LS9_CH_3_SIZE 32

/*** AF_LS_9_CNL_4 (0x40000650) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 4 of Logical
 * Stream 9.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_9_CNL_4_ADDR (0x40000650)
#define IAXXX_AF_LS_9_CNL_4_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_4_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_CNL_4_RESET_VAL 0x00000000

/*
 * Channel 4 Audio Sample Data for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_CNL_4_LS9_CH_4_MASK 0xffffffff
#define IAXXX_AF_LS_9_CNL_4_LS9_CH_4_RESET_VAL 0x0
#define IAXXX_AF_LS_9_CNL_4_LS9_CH_4_POS 0
#define IAXXX_AF_LS_9_CNL_4_LS9_CH_4_SIZE 32

/*** AF_LS_9_CNL_5 (0x40000654) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 5 of Logical
 * Stream 9.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_9_CNL_5_ADDR (0x40000654)
#define IAXXX_AF_LS_9_CNL_5_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_5_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_CNL_5_RESET_VAL 0x00000000

/*
 * Channel 5 Audio Sample Data for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_CNL_5_LS9_CH_5_MASK 0xffffffff
#define IAXXX_AF_LS_9_CNL_5_LS9_CH_5_RESET_VAL 0x0
#define IAXXX_AF_LS_9_CNL_5_LS9_CH_5_POS 0
#define IAXXX_AF_LS_9_CNL_5_LS9_CH_5_SIZE 32

/*** AF_LS_9_CNL_6 (0x40000658) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 6 of Logical
 * Stream 9.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_9_CNL_6_ADDR (0x40000658)
#define IAXXX_AF_LS_9_CNL_6_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_6_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_CNL_6_RESET_VAL 0x00000000

/*
 * Channel 6 Audio Sample Data for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_CNL_6_LS9_CH_6_MASK 0xffffffff
#define IAXXX_AF_LS_9_CNL_6_LS9_CH_6_RESET_VAL 0x0
#define IAXXX_AF_LS_9_CNL_6_LS9_CH_6_POS 0
#define IAXXX_AF_LS_9_CNL_6_LS9_CH_6_SIZE 32

/*** AF_LS_9_CNL_7 (0x4000065c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 7 of Logical
 * Stream 9.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_9_CNL_7_ADDR (0x4000065c)
#define IAXXX_AF_LS_9_CNL_7_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_7_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_CNL_7_RESET_VAL 0x00000000

/*
 * Channel 7 Audio Sample Data for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_CNL_7_LS9_CH_7_MASK 0xffffffff
#define IAXXX_AF_LS_9_CNL_7_LS9_CH_7_RESET_VAL 0x0
#define IAXXX_AF_LS_9_CNL_7_LS9_CH_7_POS 0
#define IAXXX_AF_LS_9_CNL_7_LS9_CH_7_SIZE 32

/*** AF_LS_9_CNL_8 (0x40000660) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 8 of Logical
 * Stream 9.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_9_CNL_8_ADDR (0x40000660)
#define IAXXX_AF_LS_9_CNL_8_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_8_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_CNL_8_RESET_VAL 0x00000000

/*
 * Channel 8 Audio Sample Data for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_CNL_8_LS9_CH_8_MASK 0xffffffff
#define IAXXX_AF_LS_9_CNL_8_LS9_CH_8_RESET_VAL 0x0
#define IAXXX_AF_LS_9_CNL_8_LS9_CH_8_POS 0
#define IAXXX_AF_LS_9_CNL_8_LS9_CH_8_SIZE 32

/*** AF_LS_9_CNL_9 (0x40000664) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 9 of Logical
 * Stream 9.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_9_CNL_9_ADDR (0x40000664)
#define IAXXX_AF_LS_9_CNL_9_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_9_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_CNL_9_RESET_VAL 0x00000000

/*
 * Channel 9 Audio Sample Data for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_CNL_9_LS9_CH_9_MASK 0xffffffff
#define IAXXX_AF_LS_9_CNL_9_LS9_CH_9_RESET_VAL 0x0
#define IAXXX_AF_LS_9_CNL_9_LS9_CH_9_POS 0
#define IAXXX_AF_LS_9_CNL_9_LS9_CH_9_SIZE 32

/*** AF_LS_9_CNL_10 (0x40000668) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 10 of
 * Logical Stream 9.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_9_CNL_10_ADDR (0x40000668)
#define IAXXX_AF_LS_9_CNL_10_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_10_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_CNL_10_RESET_VAL 0x00000000

/*
 * Channel 10 Audio Sample Data for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_CNL_10_LS9_CH_10_MASK 0xffffffff
#define IAXXX_AF_LS_9_CNL_10_LS9_CH_10_RESET_VAL 0x0
#define IAXXX_AF_LS_9_CNL_10_LS9_CH_10_POS 0
#define IAXXX_AF_LS_9_CNL_10_LS9_CH_10_SIZE 32

/*** AF_LS_9_CNL_11 (0x4000066c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 11 of
 * Logical Stream 9.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_9_CNL_11_ADDR (0x4000066c)
#define IAXXX_AF_LS_9_CNL_11_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_11_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_CNL_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_CNL_11_RESET_VAL 0x00000000

/*
 * Channel 11 Audio Sample Data for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_CNL_11_LS9_CH_11_MASK 0xffffffff
#define IAXXX_AF_LS_9_CNL_11_LS9_CH_11_RESET_VAL 0x0
#define IAXXX_AF_LS_9_CNL_11_LS9_CH_11_POS 0
#define IAXXX_AF_LS_9_CNL_11_LS9_CH_11_SIZE 32

/*** AF_LS_9_RESERVED_0 (0x40000670) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_0_ADDR (0x40000670)
#define IAXXX_AF_LS_9_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_9_RESERVED_1 (0x40000674) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_9_RESERVED_1_ADDR (0x40000674)
#define IAXXX_AF_LS_9_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_9_PT_0 (0x40000678) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_9_PT_0_ADDR (0x40000678)
#define IAXXX_AF_LS_9_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_9_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_9_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_9_PT_0_VAL_POS 0
#define IAXXX_AF_LS_9_PT_0_VAL_SIZE 32

/*** AF_LS_9_PT_1 (0x4000067c) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 9,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_9_PT_1_ADDR (0x4000067c)
#define IAXXX_AF_LS_9_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_9_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_9_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_9_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 9.
 */
#define IAXXX_AF_LS_9_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_9_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_9_PT_1_VAL_POS 0
#define IAXXX_AF_LS_9_PT_1_VAL_SIZE 20

/*
 * Presentation Time Valid bit, if LS_DMA[9] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_9_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_9_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_9_PT_1_VLD_POS 31
#define IAXXX_AF_LS_9_PT_1_VLD_SIZE 1

/*** AF_LS_10_CNL_0 (0x40000680) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 10.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_10_CNL_0_ADDR (0x40000680)
#define IAXXX_AF_LS_10_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_CNL_0_LS10_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_10_CNL_0_LS10_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_10_CNL_0_LS10_CH_0_POS 0
#define IAXXX_AF_LS_10_CNL_0_LS10_CH_0_SIZE 32

/*** AF_LS_10_CNL_1 (0x40000684) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 10.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_10_CNL_1_ADDR (0x40000684)
#define IAXXX_AF_LS_10_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_CNL_1_LS10_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_10_CNL_1_LS10_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_10_CNL_1_LS10_CH_1_POS 0
#define IAXXX_AF_LS_10_CNL_1_LS10_CH_1_SIZE 32

/*** AF_LS_10_CNL_2 (0x40000688) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 10.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_10_CNL_2_ADDR (0x40000688)
#define IAXXX_AF_LS_10_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_CNL_2_LS10_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_10_CNL_2_LS10_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_10_CNL_2_LS10_CH_2_POS 0
#define IAXXX_AF_LS_10_CNL_2_LS10_CH_2_SIZE 32

/*** AF_LS_10_CNL_3 (0x4000068c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 10.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_10_CNL_3_ADDR (0x4000068c)
#define IAXXX_AF_LS_10_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_CNL_3_LS10_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_10_CNL_3_LS10_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_10_CNL_3_LS10_CH_3_POS 0
#define IAXXX_AF_LS_10_CNL_3_LS10_CH_3_SIZE 32

/*** AF_LS_10_CNL_4 (0x40000690) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 4 of Logical
 * Stream 10.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_10_CNL_4_ADDR (0x40000690)
#define IAXXX_AF_LS_10_CNL_4_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_4_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_CNL_4_RESET_VAL 0x00000000

/*
 * Channel 4 Audio Sample Data for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_CNL_4_LS10_CH_4_MASK 0xffffffff
#define IAXXX_AF_LS_10_CNL_4_LS10_CH_4_RESET_VAL 0x0
#define IAXXX_AF_LS_10_CNL_4_LS10_CH_4_POS 0
#define IAXXX_AF_LS_10_CNL_4_LS10_CH_4_SIZE 32

/*** AF_LS_10_CNL_5 (0x40000694) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 5 of Logical
 * Stream 10.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_10_CNL_5_ADDR (0x40000694)
#define IAXXX_AF_LS_10_CNL_5_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_5_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_CNL_5_RESET_VAL 0x00000000

/*
 * Channel 5 Audio Sample Data for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_CNL_5_LS10_CH_5_MASK 0xffffffff
#define IAXXX_AF_LS_10_CNL_5_LS10_CH_5_RESET_VAL 0x0
#define IAXXX_AF_LS_10_CNL_5_LS10_CH_5_POS 0
#define IAXXX_AF_LS_10_CNL_5_LS10_CH_5_SIZE 32

/*** AF_LS_10_CNL_6 (0x40000698) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 6 of Logical
 * Stream 10.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_10_CNL_6_ADDR (0x40000698)
#define IAXXX_AF_LS_10_CNL_6_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_6_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_CNL_6_RESET_VAL 0x00000000

/*
 * Channel 6 Audio Sample Data for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_CNL_6_LS10_CH_6_MASK 0xffffffff
#define IAXXX_AF_LS_10_CNL_6_LS10_CH_6_RESET_VAL 0x0
#define IAXXX_AF_LS_10_CNL_6_LS10_CH_6_POS 0
#define IAXXX_AF_LS_10_CNL_6_LS10_CH_6_SIZE 32

/*** AF_LS_10_CNL_7 (0x4000069c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 7 of Logical
 * Stream 10.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_10_CNL_7_ADDR (0x4000069c)
#define IAXXX_AF_LS_10_CNL_7_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_7_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_CNL_7_RESET_VAL 0x00000000

/*
 * Channel 7 Audio Sample Data for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_CNL_7_LS10_CH_7_MASK 0xffffffff
#define IAXXX_AF_LS_10_CNL_7_LS10_CH_7_RESET_VAL 0x0
#define IAXXX_AF_LS_10_CNL_7_LS10_CH_7_POS 0
#define IAXXX_AF_LS_10_CNL_7_LS10_CH_7_SIZE 32

/*** AF_LS_10_CNL_8 (0x400006a0) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 8 of Logical
 * Stream 10.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_10_CNL_8_ADDR (0x400006a0)
#define IAXXX_AF_LS_10_CNL_8_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_8_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_CNL_8_RESET_VAL 0x00000000

/*
 * Channel 8 Audio Sample Data for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_CNL_8_LS10_CH_8_MASK 0xffffffff
#define IAXXX_AF_LS_10_CNL_8_LS10_CH_8_RESET_VAL 0x0
#define IAXXX_AF_LS_10_CNL_8_LS10_CH_8_POS 0
#define IAXXX_AF_LS_10_CNL_8_LS10_CH_8_SIZE 32

/*** AF_LS_10_CNL_9 (0x400006a4) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 9 of Logical
 * Stream 10.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_10_CNL_9_ADDR (0x400006a4)
#define IAXXX_AF_LS_10_CNL_9_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_9_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_CNL_9_RESET_VAL 0x00000000

/*
 * Channel 9 Audio Sample Data for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_CNL_9_LS10_CH_9_MASK 0xffffffff
#define IAXXX_AF_LS_10_CNL_9_LS10_CH_9_RESET_VAL 0x0
#define IAXXX_AF_LS_10_CNL_9_LS10_CH_9_POS 0
#define IAXXX_AF_LS_10_CNL_9_LS10_CH_9_SIZE 32

/*** AF_LS_10_CNL_10 (0x400006a8) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 10 of
 * Logical Stream 10.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_10_CNL_10_ADDR (0x400006a8)
#define IAXXX_AF_LS_10_CNL_10_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_10_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_CNL_10_RESET_VAL 0x00000000

/*
 * Channel 10 Audio Sample Data for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_CNL_10_LS10_CH_10_MASK 0xffffffff
#define IAXXX_AF_LS_10_CNL_10_LS10_CH_10_RESET_VAL 0x0
#define IAXXX_AF_LS_10_CNL_10_LS10_CH_10_POS 0
#define IAXXX_AF_LS_10_CNL_10_LS10_CH_10_SIZE 32

/*** AF_LS_10_CNL_11 (0x400006ac) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 11 of
 * Logical Stream 10.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_10_CNL_11_ADDR (0x400006ac)
#define IAXXX_AF_LS_10_CNL_11_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_11_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_CNL_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_CNL_11_RESET_VAL 0x00000000

/*
 * Channel 11 Audio Sample Data for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_CNL_11_LS10_CH_11_MASK 0xffffffff
#define IAXXX_AF_LS_10_CNL_11_LS10_CH_11_RESET_VAL 0x0
#define IAXXX_AF_LS_10_CNL_11_LS10_CH_11_POS 0
#define IAXXX_AF_LS_10_CNL_11_LS10_CH_11_SIZE 32

/*** AF_LS_10_RESERVED_0 (0x400006b0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_0_ADDR (0x400006b0)
#define IAXXX_AF_LS_10_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_10_RESERVED_1 (0x400006b4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_10_RESERVED_1_ADDR (0x400006b4)
#define IAXXX_AF_LS_10_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_10_PT_0 (0x400006b8) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_10_PT_0_ADDR (0x400006b8)
#define IAXXX_AF_LS_10_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_10_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_10_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_10_PT_0_VAL_POS 0
#define IAXXX_AF_LS_10_PT_0_VAL_SIZE 32

/*** AF_LS_10_PT_1 (0x400006bc) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 10,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_10_PT_1_ADDR (0x400006bc)
#define IAXXX_AF_LS_10_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_10_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_10_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_10_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 10.
 */
#define IAXXX_AF_LS_10_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_10_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_10_PT_1_VAL_POS 0
#define IAXXX_AF_LS_10_PT_1_VAL_SIZE 20

/*
 * Presentation Time Valid bit, if LS_DMA[10] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_10_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_10_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_10_PT_1_VLD_POS 31
#define IAXXX_AF_LS_10_PT_1_VLD_SIZE 1

/*** AF_LS_11_CNL_0 (0x400006c0) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 11.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_11_CNL_0_ADDR (0x400006c0)
#define IAXXX_AF_LS_11_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_CNL_0_LS11_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_11_CNL_0_LS11_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_11_CNL_0_LS11_CH_0_POS 0
#define IAXXX_AF_LS_11_CNL_0_LS11_CH_0_SIZE 32

/*** AF_LS_11_CNL_1 (0x400006c4) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 11.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_11_CNL_1_ADDR (0x400006c4)
#define IAXXX_AF_LS_11_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_CNL_1_LS11_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_11_CNL_1_LS11_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_11_CNL_1_LS11_CH_1_POS 0
#define IAXXX_AF_LS_11_CNL_1_LS11_CH_1_SIZE 32

/*** AF_LS_11_CNL_2 (0x400006c8) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 11.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_11_CNL_2_ADDR (0x400006c8)
#define IAXXX_AF_LS_11_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_CNL_2_LS11_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_11_CNL_2_LS11_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_11_CNL_2_LS11_CH_2_POS 0
#define IAXXX_AF_LS_11_CNL_2_LS11_CH_2_SIZE 32

/*** AF_LS_11_CNL_3 (0x400006cc) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 11.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_11_CNL_3_ADDR (0x400006cc)
#define IAXXX_AF_LS_11_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_CNL_3_LS11_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_11_CNL_3_LS11_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_11_CNL_3_LS11_CH_3_POS 0
#define IAXXX_AF_LS_11_CNL_3_LS11_CH_3_SIZE 32

/*** AF_LS_11_CNL_4 (0x400006d0) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 4 of Logical
 * Stream 11.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_11_CNL_4_ADDR (0x400006d0)
#define IAXXX_AF_LS_11_CNL_4_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_4_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_CNL_4_RESET_VAL 0x00000000

/*
 * Channel 4 Audio Sample Data for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_CNL_4_LS11_CH_4_MASK 0xffffffff
#define IAXXX_AF_LS_11_CNL_4_LS11_CH_4_RESET_VAL 0x0
#define IAXXX_AF_LS_11_CNL_4_LS11_CH_4_POS 0
#define IAXXX_AF_LS_11_CNL_4_LS11_CH_4_SIZE 32

/*** AF_LS_11_CNL_5 (0x400006d4) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 5 of Logical
 * Stream 11.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_11_CNL_5_ADDR (0x400006d4)
#define IAXXX_AF_LS_11_CNL_5_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_5_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_CNL_5_RESET_VAL 0x00000000

/*
 * Channel 5 Audio Sample Data for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_CNL_5_LS11_CH_5_MASK 0xffffffff
#define IAXXX_AF_LS_11_CNL_5_LS11_CH_5_RESET_VAL 0x0
#define IAXXX_AF_LS_11_CNL_5_LS11_CH_5_POS 0
#define IAXXX_AF_LS_11_CNL_5_LS11_CH_5_SIZE 32

/*** AF_LS_11_CNL_6 (0x400006d8) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 6 of Logical
 * Stream 11.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_11_CNL_6_ADDR (0x400006d8)
#define IAXXX_AF_LS_11_CNL_6_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_6_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_CNL_6_RESET_VAL 0x00000000

/*
 * Channel 6 Audio Sample Data for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_CNL_6_LS11_CH_6_MASK 0xffffffff
#define IAXXX_AF_LS_11_CNL_6_LS11_CH_6_RESET_VAL 0x0
#define IAXXX_AF_LS_11_CNL_6_LS11_CH_6_POS 0
#define IAXXX_AF_LS_11_CNL_6_LS11_CH_6_SIZE 32

/*** AF_LS_11_CNL_7 (0x400006dc) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 7 of Logical
 * Stream 11.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_11_CNL_7_ADDR (0x400006dc)
#define IAXXX_AF_LS_11_CNL_7_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_7_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_CNL_7_RESET_VAL 0x00000000

/*
 * Channel 7 Audio Sample Data for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_CNL_7_LS11_CH_7_MASK 0xffffffff
#define IAXXX_AF_LS_11_CNL_7_LS11_CH_7_RESET_VAL 0x0
#define IAXXX_AF_LS_11_CNL_7_LS11_CH_7_POS 0
#define IAXXX_AF_LS_11_CNL_7_LS11_CH_7_SIZE 32

/*** AF_LS_11_CNL_8 (0x400006e0) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 8 of Logical
 * Stream 11.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_11_CNL_8_ADDR (0x400006e0)
#define IAXXX_AF_LS_11_CNL_8_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_8_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_CNL_8_RESET_VAL 0x00000000

/*
 * Channel 8 Audio Sample Data for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_CNL_8_LS11_CH_8_MASK 0xffffffff
#define IAXXX_AF_LS_11_CNL_8_LS11_CH_8_RESET_VAL 0x0
#define IAXXX_AF_LS_11_CNL_8_LS11_CH_8_POS 0
#define IAXXX_AF_LS_11_CNL_8_LS11_CH_8_SIZE 32

/*** AF_LS_11_CNL_9 (0x400006e4) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 9 of Logical
 * Stream 11.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_11_CNL_9_ADDR (0x400006e4)
#define IAXXX_AF_LS_11_CNL_9_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_9_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_CNL_9_RESET_VAL 0x00000000

/*
 * Channel 9 Audio Sample Data for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_CNL_9_LS11_CH_9_MASK 0xffffffff
#define IAXXX_AF_LS_11_CNL_9_LS11_CH_9_RESET_VAL 0x0
#define IAXXX_AF_LS_11_CNL_9_LS11_CH_9_POS 0
#define IAXXX_AF_LS_11_CNL_9_LS11_CH_9_SIZE 32

/*** AF_LS_11_CNL_10 (0x400006e8) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 10 of
 * Logical Stream 11.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_11_CNL_10_ADDR (0x400006e8)
#define IAXXX_AF_LS_11_CNL_10_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_10_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_CNL_10_RESET_VAL 0x00000000

/*
 * Channel 10 Audio Sample Data for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_CNL_10_LS11_CH_10_MASK 0xffffffff
#define IAXXX_AF_LS_11_CNL_10_LS11_CH_10_RESET_VAL 0x0
#define IAXXX_AF_LS_11_CNL_10_LS11_CH_10_POS 0
#define IAXXX_AF_LS_11_CNL_10_LS11_CH_10_SIZE 32

/*** AF_LS_11_CNL_11 (0x400006ec) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 11 of
 * Logical Stream 11.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_11_CNL_11_ADDR (0x400006ec)
#define IAXXX_AF_LS_11_CNL_11_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_11_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_CNL_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_CNL_11_RESET_VAL 0x00000000

/*
 * Channel 11 Audio Sample Data for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_CNL_11_LS11_CH_11_MASK 0xffffffff
#define IAXXX_AF_LS_11_CNL_11_LS11_CH_11_RESET_VAL 0x0
#define IAXXX_AF_LS_11_CNL_11_LS11_CH_11_POS 0
#define IAXXX_AF_LS_11_CNL_11_LS11_CH_11_SIZE 32

/*** AF_LS_11_RESERVED_0 (0x400006f0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_0_ADDR (0x400006f0)
#define IAXXX_AF_LS_11_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_11_RESERVED_1 (0x400006f4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_11_RESERVED_1_ADDR (0x400006f4)
#define IAXXX_AF_LS_11_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_11_PT_0 (0x400006f8) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_11_PT_0_ADDR (0x400006f8)
#define IAXXX_AF_LS_11_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_11_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_11_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_11_PT_0_VAL_POS 0
#define IAXXX_AF_LS_11_PT_0_VAL_SIZE 32

/*** AF_LS_11_PT_1 (0x400006fc) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 11,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_11_PT_1_ADDR (0x400006fc)
#define IAXXX_AF_LS_11_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_11_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_11_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_11_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 11.
 */
#define IAXXX_AF_LS_11_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_11_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_11_PT_1_VAL_POS 0
#define IAXXX_AF_LS_11_PT_1_VAL_SIZE 20

/*
 * Presentation Time Valid bit, if LS_DMA[11] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_11_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_11_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_11_PT_1_VLD_POS 31
#define IAXXX_AF_LS_11_PT_1_VLD_SIZE 1

/*** AF_LS_12_CNL_0 (0x40000700) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 12.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_12_CNL_0_ADDR (0x40000700)
#define IAXXX_AF_LS_12_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 12.
 */
#define IAXXX_AF_LS_12_CNL_0_LS12_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_12_CNL_0_LS12_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_12_CNL_0_LS12_CH_0_POS 0
#define IAXXX_AF_LS_12_CNL_0_LS12_CH_0_SIZE 32

/*** AF_LS_12_CNL_1 (0x40000704) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 12.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_12_CNL_1_ADDR (0x40000704)
#define IAXXX_AF_LS_12_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 12.
 */
#define IAXXX_AF_LS_12_CNL_1_LS12_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_12_CNL_1_LS12_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_12_CNL_1_LS12_CH_1_POS 0
#define IAXXX_AF_LS_12_CNL_1_LS12_CH_1_SIZE 32

/*** AF_LS_12_CNL_2 (0x40000708) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 12.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_12_CNL_2_ADDR (0x40000708)
#define IAXXX_AF_LS_12_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 12.
 */
#define IAXXX_AF_LS_12_CNL_2_LS12_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_12_CNL_2_LS12_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_12_CNL_2_LS12_CH_2_POS 0
#define IAXXX_AF_LS_12_CNL_2_LS12_CH_2_SIZE 32

/*** AF_LS_12_CNL_3 (0x4000070c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 12.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_12_CNL_3_ADDR (0x4000070c)
#define IAXXX_AF_LS_12_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 12.
 */
#define IAXXX_AF_LS_12_CNL_3_LS12_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_12_CNL_3_LS12_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_12_CNL_3_LS12_CH_3_POS 0
#define IAXXX_AF_LS_12_CNL_3_LS12_CH_3_SIZE 32

/*** AF_LS_12_CNL_4 (0x40000710) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 4 of Logical
 * Stream 12.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_12_CNL_4_ADDR (0x40000710)
#define IAXXX_AF_LS_12_CNL_4_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_4_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_CNL_4_RESET_VAL 0x00000000

/*
 * Channel 4 Audio Sample Data for Logical Stream 12.
 */
#define IAXXX_AF_LS_12_CNL_4_LS12_CH_4_MASK 0xffffffff
#define IAXXX_AF_LS_12_CNL_4_LS12_CH_4_RESET_VAL 0x0
#define IAXXX_AF_LS_12_CNL_4_LS12_CH_4_POS 0
#define IAXXX_AF_LS_12_CNL_4_LS12_CH_4_SIZE 32

/*** AF_LS_12_CNL_5 (0x40000714) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 5 of Logical
 * Stream 12.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_12_CNL_5_ADDR (0x40000714)
#define IAXXX_AF_LS_12_CNL_5_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_5_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_CNL_5_RESET_VAL 0x00000000

/*
 * Channel 5 Audio Sample Data for Logical Stream 12.
 */
#define IAXXX_AF_LS_12_CNL_5_LS12_CH_5_MASK 0xffffffff
#define IAXXX_AF_LS_12_CNL_5_LS12_CH_5_RESET_VAL 0x0
#define IAXXX_AF_LS_12_CNL_5_LS12_CH_5_POS 0
#define IAXXX_AF_LS_12_CNL_5_LS12_CH_5_SIZE 32

/*** AF_LS_12_CNL_6 (0x40000718) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 6 of Logical
 * Stream 12.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_12_CNL_6_ADDR (0x40000718)
#define IAXXX_AF_LS_12_CNL_6_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_6_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_CNL_6_RESET_VAL 0x00000000

/*
 * Channel 6 Audio Sample Data for Logical Stream 12.
 */
#define IAXXX_AF_LS_12_CNL_6_LS12_CH_6_MASK 0xffffffff
#define IAXXX_AF_LS_12_CNL_6_LS12_CH_6_RESET_VAL 0x0
#define IAXXX_AF_LS_12_CNL_6_LS12_CH_6_POS 0
#define IAXXX_AF_LS_12_CNL_6_LS12_CH_6_SIZE 32

/*** AF_LS_12_CNL_7 (0x4000071c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 7 of Logical
 * Stream 12.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_12_CNL_7_ADDR (0x4000071c)
#define IAXXX_AF_LS_12_CNL_7_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_7_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_CNL_7_RESET_VAL 0x00000000

/*
 * Channel 7 Audio Sample Data for Logical Stream 12.
 */
#define IAXXX_AF_LS_12_CNL_7_LS12_CH_7_MASK 0xffffffff
#define IAXXX_AF_LS_12_CNL_7_LS12_CH_7_RESET_VAL 0x0
#define IAXXX_AF_LS_12_CNL_7_LS12_CH_7_POS 0
#define IAXXX_AF_LS_12_CNL_7_LS12_CH_7_SIZE 32

/*** AF_LS_12_CNL_8 (0x40000720) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 8 of Logical
 * Stream 12.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_12_CNL_8_ADDR (0x40000720)
#define IAXXX_AF_LS_12_CNL_8_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_8_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_CNL_8_RESET_VAL 0x00000000

/*
 * Channel 8 Audio Sample Data for Logical Stream 12.
 */
#define IAXXX_AF_LS_12_CNL_8_LS12_CH_8_MASK 0xffffffff
#define IAXXX_AF_LS_12_CNL_8_LS12_CH_8_RESET_VAL 0x0
#define IAXXX_AF_LS_12_CNL_8_LS12_CH_8_POS 0
#define IAXXX_AF_LS_12_CNL_8_LS12_CH_8_SIZE 32

/*** AF_LS_12_CNL_9 (0x40000724) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 9 of Logical
 * Stream 12.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_12_CNL_9_ADDR (0x40000724)
#define IAXXX_AF_LS_12_CNL_9_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_9_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_CNL_9_RESET_VAL 0x00000000

/*
 * Channel 9 Audio Sample Data for Logical Stream 12.
 */
#define IAXXX_AF_LS_12_CNL_9_LS12_CH_9_MASK 0xffffffff
#define IAXXX_AF_LS_12_CNL_9_LS12_CH_9_RESET_VAL 0x0
#define IAXXX_AF_LS_12_CNL_9_LS12_CH_9_POS 0
#define IAXXX_AF_LS_12_CNL_9_LS12_CH_9_SIZE 32

/*** AF_LS_12_CNL_10 (0x40000728) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 10 of
 * Logical Stream 12.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_12_CNL_10_ADDR (0x40000728)
#define IAXXX_AF_LS_12_CNL_10_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_10_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_CNL_10_RESET_VAL 0x00000000

/*
 * Channel 10 Audio Sample Data for Logical Stream 12.
 */
#define IAXXX_AF_LS_12_CNL_10_LS12_CH_10_MASK 0xffffffff
#define IAXXX_AF_LS_12_CNL_10_LS12_CH_10_RESET_VAL 0x0
#define IAXXX_AF_LS_12_CNL_10_LS12_CH_10_POS 0
#define IAXXX_AF_LS_12_CNL_10_LS12_CH_10_SIZE 32

/*** AF_LS_12_CNL_11 (0x4000072c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 11 of
 * Logical Stream 12.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_12_CNL_11_ADDR (0x4000072c)
#define IAXXX_AF_LS_12_CNL_11_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_11_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_CNL_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_CNL_11_RESET_VAL 0x00000000

/*
 * Channel 11 Audio Sample Data for Logical Stream 12.
 */
#define IAXXX_AF_LS_12_CNL_11_LS12_CH_11_MASK 0xffffffff
#define IAXXX_AF_LS_12_CNL_11_LS12_CH_11_RESET_VAL 0x0
#define IAXXX_AF_LS_12_CNL_11_LS12_CH_11_POS 0
#define IAXXX_AF_LS_12_CNL_11_LS12_CH_11_SIZE 32

/*** AF_LS_12_RESERVED_0 (0x40000730) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_12_RESERVED_0_ADDR (0x40000730)
#define IAXXX_AF_LS_12_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_12_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_12_RESERVED_1 (0x40000734) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_12_RESERVED_1_ADDR (0x40000734)
#define IAXXX_AF_LS_12_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_12_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_12_PT_0 (0x40000738) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_12_PT_0_ADDR (0x40000738)
#define IAXXX_AF_LS_12_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_12_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 12.
 */
#define IAXXX_AF_LS_12_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_12_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_12_PT_0_VAL_POS 0
#define IAXXX_AF_LS_12_PT_0_VAL_SIZE 32

/*** AF_LS_12_PT_1 (0x4000073c) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 12,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_12_PT_1_ADDR (0x4000073c)
#define IAXXX_AF_LS_12_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_12_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_12_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_12_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 12.
 */
#define IAXXX_AF_LS_12_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_12_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_12_PT_1_VAL_POS 0
#define IAXXX_AF_LS_12_PT_1_VAL_SIZE 20

/*
 * Presentation Time Valid bit, if LS_DMA[12] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_12_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_12_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_12_PT_1_VLD_POS 31
#define IAXXX_AF_LS_12_PT_1_VLD_SIZE 1

/*** AF_LS_13_CNL_0 (0x40000740) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 13.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_13_CNL_0_ADDR (0x40000740)
#define IAXXX_AF_LS_13_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 13.
 */
#define IAXXX_AF_LS_13_CNL_0_LS13_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_13_CNL_0_LS13_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_13_CNL_0_LS13_CH_0_POS 0
#define IAXXX_AF_LS_13_CNL_0_LS13_CH_0_SIZE 32

/*** AF_LS_13_CNL_1 (0x40000744) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 13.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_13_CNL_1_ADDR (0x40000744)
#define IAXXX_AF_LS_13_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 13.
 */
#define IAXXX_AF_LS_13_CNL_1_LS13_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_13_CNL_1_LS13_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_13_CNL_1_LS13_CH_1_POS 0
#define IAXXX_AF_LS_13_CNL_1_LS13_CH_1_SIZE 32

/*** AF_LS_13_CNL_2 (0x40000748) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 13.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_13_CNL_2_ADDR (0x40000748)
#define IAXXX_AF_LS_13_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 13.
 */
#define IAXXX_AF_LS_13_CNL_2_LS13_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_13_CNL_2_LS13_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_13_CNL_2_LS13_CH_2_POS 0
#define IAXXX_AF_LS_13_CNL_2_LS13_CH_2_SIZE 32

/*** AF_LS_13_CNL_3 (0x4000074c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 13.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_13_CNL_3_ADDR (0x4000074c)
#define IAXXX_AF_LS_13_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 13.
 */
#define IAXXX_AF_LS_13_CNL_3_LS13_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_13_CNL_3_LS13_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_13_CNL_3_LS13_CH_3_POS 0
#define IAXXX_AF_LS_13_CNL_3_LS13_CH_3_SIZE 32

/*** AF_LS_13_CNL_4 (0x40000750) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 4 of Logical
 * Stream 13.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_13_CNL_4_ADDR (0x40000750)
#define IAXXX_AF_LS_13_CNL_4_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_4_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_CNL_4_RESET_VAL 0x00000000

/*
 * Channel 4 Audio Sample Data for Logical Stream 13.
 */
#define IAXXX_AF_LS_13_CNL_4_LS13_CH_4_MASK 0xffffffff
#define IAXXX_AF_LS_13_CNL_4_LS13_CH_4_RESET_VAL 0x0
#define IAXXX_AF_LS_13_CNL_4_LS13_CH_4_POS 0
#define IAXXX_AF_LS_13_CNL_4_LS13_CH_4_SIZE 32

/*** AF_LS_13_CNL_5 (0x40000754) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 5 of Logical
 * Stream 13.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_13_CNL_5_ADDR (0x40000754)
#define IAXXX_AF_LS_13_CNL_5_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_5_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_CNL_5_RESET_VAL 0x00000000

/*
 * Channel 5 Audio Sample Data for Logical Stream 13.
 */
#define IAXXX_AF_LS_13_CNL_5_LS13_CH_5_MASK 0xffffffff
#define IAXXX_AF_LS_13_CNL_5_LS13_CH_5_RESET_VAL 0x0
#define IAXXX_AF_LS_13_CNL_5_LS13_CH_5_POS 0
#define IAXXX_AF_LS_13_CNL_5_LS13_CH_5_SIZE 32

/*** AF_LS_13_CNL_6 (0x40000758) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 6 of Logical
 * Stream 13.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_13_CNL_6_ADDR (0x40000758)
#define IAXXX_AF_LS_13_CNL_6_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_6_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_CNL_6_RESET_VAL 0x00000000

/*
 * Channel 6 Audio Sample Data for Logical Stream 13.
 */
#define IAXXX_AF_LS_13_CNL_6_LS13_CH_6_MASK 0xffffffff
#define IAXXX_AF_LS_13_CNL_6_LS13_CH_6_RESET_VAL 0x0
#define IAXXX_AF_LS_13_CNL_6_LS13_CH_6_POS 0
#define IAXXX_AF_LS_13_CNL_6_LS13_CH_6_SIZE 32

/*** AF_LS_13_CNL_7 (0x4000075c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 7 of Logical
 * Stream 13.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_13_CNL_7_ADDR (0x4000075c)
#define IAXXX_AF_LS_13_CNL_7_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_7_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_CNL_7_RESET_VAL 0x00000000

/*
 * Channel 7 Audio Sample Data for Logical Stream 13.
 */
#define IAXXX_AF_LS_13_CNL_7_LS13_CH_7_MASK 0xffffffff
#define IAXXX_AF_LS_13_CNL_7_LS13_CH_7_RESET_VAL 0x0
#define IAXXX_AF_LS_13_CNL_7_LS13_CH_7_POS 0
#define IAXXX_AF_LS_13_CNL_7_LS13_CH_7_SIZE 32

/*** AF_LS_13_CNL_8 (0x40000760) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 8 of Logical
 * Stream 13.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_13_CNL_8_ADDR (0x40000760)
#define IAXXX_AF_LS_13_CNL_8_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_8_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_CNL_8_RESET_VAL 0x00000000

/*
 * Channel 8 Audio Sample Data for Logical Stream 13.
 */
#define IAXXX_AF_LS_13_CNL_8_LS13_CH_8_MASK 0xffffffff
#define IAXXX_AF_LS_13_CNL_8_LS13_CH_8_RESET_VAL 0x0
#define IAXXX_AF_LS_13_CNL_8_LS13_CH_8_POS 0
#define IAXXX_AF_LS_13_CNL_8_LS13_CH_8_SIZE 32

/*** AF_LS_13_CNL_9 (0x40000764) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 9 of Logical
 * Stream 13.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_13_CNL_9_ADDR (0x40000764)
#define IAXXX_AF_LS_13_CNL_9_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_9_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_CNL_9_RESET_VAL 0x00000000

/*
 * Channel 9 Audio Sample Data for Logical Stream 13.
 */
#define IAXXX_AF_LS_13_CNL_9_LS13_CH_9_MASK 0xffffffff
#define IAXXX_AF_LS_13_CNL_9_LS13_CH_9_RESET_VAL 0x0
#define IAXXX_AF_LS_13_CNL_9_LS13_CH_9_POS 0
#define IAXXX_AF_LS_13_CNL_9_LS13_CH_9_SIZE 32

/*** AF_LS_13_CNL_10 (0x40000768) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 10 of
 * Logical Stream 13.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_13_CNL_10_ADDR (0x40000768)
#define IAXXX_AF_LS_13_CNL_10_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_10_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_CNL_10_RESET_VAL 0x00000000

/*
 * Channel 10 Audio Sample Data for Logical Stream 13.
 */
#define IAXXX_AF_LS_13_CNL_10_LS13_CH_10_MASK 0xffffffff
#define IAXXX_AF_LS_13_CNL_10_LS13_CH_10_RESET_VAL 0x0
#define IAXXX_AF_LS_13_CNL_10_LS13_CH_10_POS 0
#define IAXXX_AF_LS_13_CNL_10_LS13_CH_10_SIZE 32

/*** AF_LS_13_CNL_11 (0x4000076c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 11 of
 * Logical Stream 13.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_13_CNL_11_ADDR (0x4000076c)
#define IAXXX_AF_LS_13_CNL_11_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_11_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_CNL_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_CNL_11_RESET_VAL 0x00000000

/*
 * Channel 11 Audio Sample Data for Logical Stream 13.
 */
#define IAXXX_AF_LS_13_CNL_11_LS13_CH_11_MASK 0xffffffff
#define IAXXX_AF_LS_13_CNL_11_LS13_CH_11_RESET_VAL 0x0
#define IAXXX_AF_LS_13_CNL_11_LS13_CH_11_POS 0
#define IAXXX_AF_LS_13_CNL_11_LS13_CH_11_SIZE 32

/*** AF_LS_13_RESERVED_0 (0x40000770) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_13_RESERVED_0_ADDR (0x40000770)
#define IAXXX_AF_LS_13_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_13_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_13_RESERVED_1 (0x40000774) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_13_RESERVED_1_ADDR (0x40000774)
#define IAXXX_AF_LS_13_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_13_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_13_PT_0 (0x40000778) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_13_PT_0_ADDR (0x40000778)
#define IAXXX_AF_LS_13_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_13_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 13.
 */
#define IAXXX_AF_LS_13_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_13_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_13_PT_0_VAL_POS 0
#define IAXXX_AF_LS_13_PT_0_VAL_SIZE 32

/*** AF_LS_13_PT_1 (0x4000077c) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 13,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_13_PT_1_ADDR (0x4000077c)
#define IAXXX_AF_LS_13_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_13_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_13_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_13_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 13.
 */
#define IAXXX_AF_LS_13_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_13_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_13_PT_1_VAL_POS 0
#define IAXXX_AF_LS_13_PT_1_VAL_SIZE 20

/*
 * Presentation Time Valid bit, if LS_DMA[13] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_13_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_13_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_13_PT_1_VLD_POS 31
#define IAXXX_AF_LS_13_PT_1_VLD_SIZE 1

/*** AF_LS_14_CNL_0 (0x40000780) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 14.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_14_CNL_0_ADDR (0x40000780)
#define IAXXX_AF_LS_14_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 14.
 */
#define IAXXX_AF_LS_14_CNL_0_LS14_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_14_CNL_0_LS14_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_14_CNL_0_LS14_CH_0_POS 0
#define IAXXX_AF_LS_14_CNL_0_LS14_CH_0_SIZE 32

/*** AF_LS_14_CNL_1 (0x40000784) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 14.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_14_CNL_1_ADDR (0x40000784)
#define IAXXX_AF_LS_14_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 14.
 */
#define IAXXX_AF_LS_14_CNL_1_LS14_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_14_CNL_1_LS14_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_14_CNL_1_LS14_CH_1_POS 0
#define IAXXX_AF_LS_14_CNL_1_LS14_CH_1_SIZE 32

/*** AF_LS_14_CNL_2 (0x40000788) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 14.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_14_CNL_2_ADDR (0x40000788)
#define IAXXX_AF_LS_14_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 14.
 */
#define IAXXX_AF_LS_14_CNL_2_LS14_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_14_CNL_2_LS14_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_14_CNL_2_LS14_CH_2_POS 0
#define IAXXX_AF_LS_14_CNL_2_LS14_CH_2_SIZE 32

/*** AF_LS_14_CNL_3 (0x4000078c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 14.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_14_CNL_3_ADDR (0x4000078c)
#define IAXXX_AF_LS_14_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 14.
 */
#define IAXXX_AF_LS_14_CNL_3_LS14_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_14_CNL_3_LS14_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_14_CNL_3_LS14_CH_3_POS 0
#define IAXXX_AF_LS_14_CNL_3_LS14_CH_3_SIZE 32

/*** AF_LS_14_CNL_4 (0x40000790) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 4 of Logical
 * Stream 14.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_14_CNL_4_ADDR (0x40000790)
#define IAXXX_AF_LS_14_CNL_4_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_4_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_CNL_4_RESET_VAL 0x00000000

/*
 * Channel 4 Audio Sample Data for Logical Stream 14.
 */
#define IAXXX_AF_LS_14_CNL_4_LS14_CH_4_MASK 0xffffffff
#define IAXXX_AF_LS_14_CNL_4_LS14_CH_4_RESET_VAL 0x0
#define IAXXX_AF_LS_14_CNL_4_LS14_CH_4_POS 0
#define IAXXX_AF_LS_14_CNL_4_LS14_CH_4_SIZE 32

/*** AF_LS_14_CNL_5 (0x40000794) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 5 of Logical
 * Stream 14.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_14_CNL_5_ADDR (0x40000794)
#define IAXXX_AF_LS_14_CNL_5_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_5_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_CNL_5_RESET_VAL 0x00000000

/*
 * Channel 5 Audio Sample Data for Logical Stream 14.
 */
#define IAXXX_AF_LS_14_CNL_5_LS14_CH_5_MASK 0xffffffff
#define IAXXX_AF_LS_14_CNL_5_LS14_CH_5_RESET_VAL 0x0
#define IAXXX_AF_LS_14_CNL_5_LS14_CH_5_POS 0
#define IAXXX_AF_LS_14_CNL_5_LS14_CH_5_SIZE 32

/*** AF_LS_14_CNL_6 (0x40000798) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 6 of Logical
 * Stream 14.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_14_CNL_6_ADDR (0x40000798)
#define IAXXX_AF_LS_14_CNL_6_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_6_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_CNL_6_RESET_VAL 0x00000000

/*
 * Channel 6 Audio Sample Data for Logical Stream 14.
 */
#define IAXXX_AF_LS_14_CNL_6_LS14_CH_6_MASK 0xffffffff
#define IAXXX_AF_LS_14_CNL_6_LS14_CH_6_RESET_VAL 0x0
#define IAXXX_AF_LS_14_CNL_6_LS14_CH_6_POS 0
#define IAXXX_AF_LS_14_CNL_6_LS14_CH_6_SIZE 32

/*** AF_LS_14_CNL_7 (0x4000079c) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 7 of Logical
 * Stream 14.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_14_CNL_7_ADDR (0x4000079c)
#define IAXXX_AF_LS_14_CNL_7_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_7_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_CNL_7_RESET_VAL 0x00000000

/*
 * Channel 7 Audio Sample Data for Logical Stream 14.
 */
#define IAXXX_AF_LS_14_CNL_7_LS14_CH_7_MASK 0xffffffff
#define IAXXX_AF_LS_14_CNL_7_LS14_CH_7_RESET_VAL 0x0
#define IAXXX_AF_LS_14_CNL_7_LS14_CH_7_POS 0
#define IAXXX_AF_LS_14_CNL_7_LS14_CH_7_SIZE 32

/*** AF_LS_14_CNL_8 (0x400007a0) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 8 of Logical
 * Stream 14.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_14_CNL_8_ADDR (0x400007a0)
#define IAXXX_AF_LS_14_CNL_8_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_8_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_CNL_8_RESET_VAL 0x00000000

/*
 * Channel 8 Audio Sample Data for Logical Stream 14.
 */
#define IAXXX_AF_LS_14_CNL_8_LS14_CH_8_MASK 0xffffffff
#define IAXXX_AF_LS_14_CNL_8_LS14_CH_8_RESET_VAL 0x0
#define IAXXX_AF_LS_14_CNL_8_LS14_CH_8_POS 0
#define IAXXX_AF_LS_14_CNL_8_LS14_CH_8_SIZE 32

/*** AF_LS_14_CNL_9 (0x400007a4) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 9 of Logical
 * Stream 14.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_14_CNL_9_ADDR (0x400007a4)
#define IAXXX_AF_LS_14_CNL_9_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_9_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_CNL_9_RESET_VAL 0x00000000

/*
 * Channel 9 Audio Sample Data for Logical Stream 14.
 */
#define IAXXX_AF_LS_14_CNL_9_LS14_CH_9_MASK 0xffffffff
#define IAXXX_AF_LS_14_CNL_9_LS14_CH_9_RESET_VAL 0x0
#define IAXXX_AF_LS_14_CNL_9_LS14_CH_9_POS 0
#define IAXXX_AF_LS_14_CNL_9_LS14_CH_9_SIZE 32

/*** AF_LS_14_CNL_10 (0x400007a8) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 10 of
 * Logical Stream 14.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_14_CNL_10_ADDR (0x400007a8)
#define IAXXX_AF_LS_14_CNL_10_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_10_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_CNL_10_RESET_VAL 0x00000000

/*
 * Channel 10 Audio Sample Data for Logical Stream 14.
 */
#define IAXXX_AF_LS_14_CNL_10_LS14_CH_10_MASK 0xffffffff
#define IAXXX_AF_LS_14_CNL_10_LS14_CH_10_RESET_VAL 0x0
#define IAXXX_AF_LS_14_CNL_10_LS14_CH_10_POS 0
#define IAXXX_AF_LS_14_CNL_10_LS14_CH_10_SIZE 32

/*** AF_LS_14_CNL_11 (0x400007ac) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 11 of
 * Logical Stream 14.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_14_CNL_11_ADDR (0x400007ac)
#define IAXXX_AF_LS_14_CNL_11_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_11_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_CNL_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_CNL_11_RESET_VAL 0x00000000

/*
 * Channel 11 Audio Sample Data for Logical Stream 14.
 */
#define IAXXX_AF_LS_14_CNL_11_LS14_CH_11_MASK 0xffffffff
#define IAXXX_AF_LS_14_CNL_11_LS14_CH_11_RESET_VAL 0x0
#define IAXXX_AF_LS_14_CNL_11_LS14_CH_11_POS 0
#define IAXXX_AF_LS_14_CNL_11_LS14_CH_11_SIZE 32

/*** AF_LS_14_RESERVED_0 (0x400007b0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_14_RESERVED_0_ADDR (0x400007b0)
#define IAXXX_AF_LS_14_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_14_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_14_RESERVED_1 (0x400007b4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_14_RESERVED_1_ADDR (0x400007b4)
#define IAXXX_AF_LS_14_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_14_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_14_PT_0 (0x400007b8) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_14_PT_0_ADDR (0x400007b8)
#define IAXXX_AF_LS_14_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_14_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 14.
 */
#define IAXXX_AF_LS_14_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_14_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_14_PT_0_VAL_POS 0
#define IAXXX_AF_LS_14_PT_0_VAL_SIZE 32

/*** AF_LS_14_PT_1 (0x400007bc) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 14,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_14_PT_1_ADDR (0x400007bc)
#define IAXXX_AF_LS_14_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_14_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_14_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_14_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 14.
 */
#define IAXXX_AF_LS_14_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_14_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_14_PT_1_VAL_POS 0
#define IAXXX_AF_LS_14_PT_1_VAL_SIZE 20

/*
 * Presentation Time Valid bit, if LS_DMA[14] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_14_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_14_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_14_PT_1_VLD_POS 31
#define IAXXX_AF_LS_14_PT_1_VLD_SIZE 1

/*** AF_LS_15_CNL_0 (0x400007c0) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 0 of Logical
 * Stream 15.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_15_CNL_0_ADDR (0x400007c0)
#define IAXXX_AF_LS_15_CNL_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_CNL_0_RESET_VAL 0x00000000

/*
 * Channel 0 Audio Sample Data for Logical Stream 15.
 */
#define IAXXX_AF_LS_15_CNL_0_LS15_CH_0_MASK 0xffffffff
#define IAXXX_AF_LS_15_CNL_0_LS15_CH_0_RESET_VAL 0x0
#define IAXXX_AF_LS_15_CNL_0_LS15_CH_0_POS 0
#define IAXXX_AF_LS_15_CNL_0_LS15_CH_0_SIZE 32

/*** AF_LS_15_CNL_1 (0x400007c4) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 1 of Logical
 * Stream 15.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_15_CNL_1_ADDR (0x400007c4)
#define IAXXX_AF_LS_15_CNL_1_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_1_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_CNL_1_RESET_VAL 0x00000000

/*
 * Channel 1 Audio Sample Data for Logical Stream 15.
 */
#define IAXXX_AF_LS_15_CNL_1_LS15_CH_1_MASK 0xffffffff
#define IAXXX_AF_LS_15_CNL_1_LS15_CH_1_RESET_VAL 0x0
#define IAXXX_AF_LS_15_CNL_1_LS15_CH_1_POS 0
#define IAXXX_AF_LS_15_CNL_1_LS15_CH_1_SIZE 32

/*** AF_LS_15_CNL_2 (0x400007c8) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 2 of Logical
 * Stream 15.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_15_CNL_2_ADDR (0x400007c8)
#define IAXXX_AF_LS_15_CNL_2_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_2_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_2_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_CNL_2_RESET_VAL 0x00000000

/*
 * Channel 2 Audio Sample Data for Logical Stream 15.
 */
#define IAXXX_AF_LS_15_CNL_2_LS15_CH_2_MASK 0xffffffff
#define IAXXX_AF_LS_15_CNL_2_LS15_CH_2_RESET_VAL 0x0
#define IAXXX_AF_LS_15_CNL_2_LS15_CH_2_POS 0
#define IAXXX_AF_LS_15_CNL_2_LS15_CH_2_SIZE 32

/*** AF_LS_15_CNL_3 (0x400007cc) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 3 of Logical
 * Stream 15.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_15_CNL_3_ADDR (0x400007cc)
#define IAXXX_AF_LS_15_CNL_3_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_3_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_3_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_CNL_3_RESET_VAL 0x00000000

/*
 * Channel 3 Audio Sample Data for Logical Stream 15.
 */
#define IAXXX_AF_LS_15_CNL_3_LS15_CH_3_MASK 0xffffffff
#define IAXXX_AF_LS_15_CNL_3_LS15_CH_3_RESET_VAL 0x0
#define IAXXX_AF_LS_15_CNL_3_LS15_CH_3_POS 0
#define IAXXX_AF_LS_15_CNL_3_LS15_CH_3_SIZE 32

/*** AF_LS_15_CNL_4 (0x400007d0) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 4 of Logical
 * Stream 15.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_15_CNL_4_ADDR (0x400007d0)
#define IAXXX_AF_LS_15_CNL_4_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_4_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_4_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_CNL_4_RESET_VAL 0x00000000

/*
 * Channel 4 Audio Sample Data for Logical Stream 15.
 */
#define IAXXX_AF_LS_15_CNL_4_LS15_CH_4_MASK 0xffffffff
#define IAXXX_AF_LS_15_CNL_4_LS15_CH_4_RESET_VAL 0x0
#define IAXXX_AF_LS_15_CNL_4_LS15_CH_4_POS 0
#define IAXXX_AF_LS_15_CNL_4_LS15_CH_4_SIZE 32

/*** AF_LS_15_CNL_5 (0x400007d4) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 5 of Logical
 * Stream 15.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_15_CNL_5_ADDR (0x400007d4)
#define IAXXX_AF_LS_15_CNL_5_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_5_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_5_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_CNL_5_RESET_VAL 0x00000000

/*
 * Channel 5 Audio Sample Data for Logical Stream 15.
 */
#define IAXXX_AF_LS_15_CNL_5_LS15_CH_5_MASK 0xffffffff
#define IAXXX_AF_LS_15_CNL_5_LS15_CH_5_RESET_VAL 0x0
#define IAXXX_AF_LS_15_CNL_5_LS15_CH_5_POS 0
#define IAXXX_AF_LS_15_CNL_5_LS15_CH_5_SIZE 32

/*** AF_LS_15_CNL_6 (0x400007d8) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 6 of Logical
 * Stream 15.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_15_CNL_6_ADDR (0x400007d8)
#define IAXXX_AF_LS_15_CNL_6_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_6_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_6_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_CNL_6_RESET_VAL 0x00000000

/*
 * Channel 6 Audio Sample Data for Logical Stream 15.
 */
#define IAXXX_AF_LS_15_CNL_6_LS15_CH_6_MASK 0xffffffff
#define IAXXX_AF_LS_15_CNL_6_LS15_CH_6_RESET_VAL 0x0
#define IAXXX_AF_LS_15_CNL_6_LS15_CH_6_POS 0
#define IAXXX_AF_LS_15_CNL_6_LS15_CH_6_SIZE 32

/*** AF_LS_15_CNL_7 (0x400007dc) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 7 of Logical
 * Stream 15.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_15_CNL_7_ADDR (0x400007dc)
#define IAXXX_AF_LS_15_CNL_7_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_7_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_7_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_CNL_7_RESET_VAL 0x00000000

/*
 * Channel 7 Audio Sample Data for Logical Stream 15.
 */
#define IAXXX_AF_LS_15_CNL_7_LS15_CH_7_MASK 0xffffffff
#define IAXXX_AF_LS_15_CNL_7_LS15_CH_7_RESET_VAL 0x0
#define IAXXX_AF_LS_15_CNL_7_LS15_CH_7_POS 0
#define IAXXX_AF_LS_15_CNL_7_LS15_CH_7_SIZE 32

/*** AF_LS_15_CNL_8 (0x400007e0) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 8 of Logical
 * Stream 15.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_15_CNL_8_ADDR (0x400007e0)
#define IAXXX_AF_LS_15_CNL_8_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_8_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_8_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_CNL_8_RESET_VAL 0x00000000

/*
 * Channel 8 Audio Sample Data for Logical Stream 15.
 */
#define IAXXX_AF_LS_15_CNL_8_LS15_CH_8_MASK 0xffffffff
#define IAXXX_AF_LS_15_CNL_8_LS15_CH_8_RESET_VAL 0x0
#define IAXXX_AF_LS_15_CNL_8_LS15_CH_8_POS 0
#define IAXXX_AF_LS_15_CNL_8_LS15_CH_8_SIZE 32

/*** AF_LS_15_CNL_9 (0x400007e4) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 9 of Logical
 * Stream 15.  For Rx streams, the register is read-only and writes are
 * ignored; for Tx streams the register is read/write - a read will supply
 * previously written but un-pushed data.
 */
#define IAXXX_AF_LS_15_CNL_9_ADDR (0x400007e4)
#define IAXXX_AF_LS_15_CNL_9_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_9_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_9_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_CNL_9_RESET_VAL 0x00000000

/*
 * Channel 9 Audio Sample Data for Logical Stream 15.
 */
#define IAXXX_AF_LS_15_CNL_9_LS15_CH_9_MASK 0xffffffff
#define IAXXX_AF_LS_15_CNL_9_LS15_CH_9_RESET_VAL 0x0
#define IAXXX_AF_LS_15_CNL_9_LS15_CH_9_POS 0
#define IAXXX_AF_LS_15_CNL_9_LS15_CH_9_SIZE 32

/*** AF_LS_15_CNL_10 (0x400007e8) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 10 of
 * Logical Stream 15.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_15_CNL_10_ADDR (0x400007e8)
#define IAXXX_AF_LS_15_CNL_10_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_10_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_10_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_CNL_10_RESET_VAL 0x00000000

/*
 * Channel 10 Audio Sample Data for Logical Stream 15.
 */
#define IAXXX_AF_LS_15_CNL_10_LS15_CH_10_MASK 0xffffffff
#define IAXXX_AF_LS_15_CNL_10_LS15_CH_10_RESET_VAL 0x0
#define IAXXX_AF_LS_15_CNL_10_LS15_CH_10_POS 0
#define IAXXX_AF_LS_15_CNL_10_LS15_CH_10_SIZE 32

/*** AF_LS_15_CNL_11 (0x400007ec) ***/
/*
 * Contains the 32 bit Audio Sample Data associated with Channel 11 of
 * Logical Stream 15.  For Rx streams, the register is read-only and writes
 * are ignored; for Tx streams the register is read/write - a read will
 * supply previously written but un-pushed data.
 */
#define IAXXX_AF_LS_15_CNL_11_ADDR (0x400007ec)
#define IAXXX_AF_LS_15_CNL_11_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_11_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_CNL_11_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_CNL_11_RESET_VAL 0x00000000

/*
 * Channel 11 Audio Sample Data for Logical Stream 15.
 */
#define IAXXX_AF_LS_15_CNL_11_LS15_CH_11_MASK 0xffffffff
#define IAXXX_AF_LS_15_CNL_11_LS15_CH_11_RESET_VAL 0x0
#define IAXXX_AF_LS_15_CNL_11_LS15_CH_11_POS 0
#define IAXXX_AF_LS_15_CNL_11_LS15_CH_11_SIZE 32

/*** AF_LS_15_RESERVED_0 (0x400007f0) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_15_RESERVED_0_ADDR (0x400007f0)
#define IAXXX_AF_LS_15_RESERVED_0_MASK_VAL 0x00000000
#define IAXXX_AF_LS_15_RESERVED_0_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_RESERVED_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_RESERVED_0_RESET_VAL 0x00000000

/*** AF_LS_15_RESERVED_1 (0x400007f4) ***/
/*
 * This register is reserved.
 */
#define IAXXX_AF_LS_15_RESERVED_1_ADDR (0x400007f4)
#define IAXXX_AF_LS_15_RESERVED_1_MASK_VAL 0x00000000
#define IAXXX_AF_LS_15_RESERVED_1_RMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_RESERVED_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_RESERVED_1_RESET_VAL 0x00000000

/*** AF_LS_15_PT_0 (0x400007f8) ***/
/*
 * See PT_1.
 */
#define IAXXX_AF_LS_15_PT_0_ADDR (0x400007f8)
#define IAXXX_AF_LS_15_PT_0_MASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_PT_0_RMASK_VAL 0xffffffff
#define IAXXX_AF_LS_15_PT_0_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_PT_0_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 15.
 */
#define IAXXX_AF_LS_15_PT_0_VAL_MASK 0xffffffff
#define IAXXX_AF_LS_15_PT_0_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_15_PT_0_VAL_POS 0
#define IAXXX_AF_LS_15_PT_0_VAL_SIZE 32

/*** AF_LS_15_PT_1 (0x400007fc) ***/
/*
 * Contains the 64 bit Presentation Time associated with Logical Stream 15,
 * valid only when the Presentation Time Flag is asserted for the sample
 * frame under service.  A write to this register will pop the FIFO for Rx
 * streams, and push the FIFO for Tx streams; in both cases the write data is
 * ignored.
 */
#define IAXXX_AF_LS_15_PT_1_ADDR (0x400007fc)
#define IAXXX_AF_LS_15_PT_1_MASK_VAL 0x800fffff
#define IAXXX_AF_LS_15_PT_1_RMASK_VAL 0x800fffff
#define IAXXX_AF_LS_15_PT_1_WMASK_VAL 0x00000000
#define IAXXX_AF_LS_15_PT_1_RESET_VAL 0x00000000

/*
 * Presentation Time and FIFO Push/Pop for Logical Stream 15.
 */
#define IAXXX_AF_LS_15_PT_1_VAL_MASK 0x000fffff
#define IAXXX_AF_LS_15_PT_1_VAL_RESET_VAL 0x0
#define IAXXX_AF_LS_15_PT_1_VAL_POS 0
#define IAXXX_AF_LS_15_PT_1_VAL_SIZE 20

/*
 * Presentation Time Valid bit, if LS_DMA[15] is set; otherwise it always
 * reads back 0.
 */
#define IAXXX_AF_LS_15_PT_1_VLD_MASK 0x80000000
#define IAXXX_AF_LS_15_PT_1_VLD_RESET_VAL 0x0
#define IAXXX_AF_LS_15_PT_1_VLD_POS 31
#define IAXXX_AF_LS_15_PT_1_VLD_SIZE 1

/*
 * Field encodings for register LS_MAP_0's field PHY_STR_TYPE_0.
 * Physical Stream Type mapped to Logical Stream 0.
 * 0x0: PCM0
 * 0x1: PCM1
 * 0x2: PCM2
 * 0x3: PCM3
 * 0x4: PCM4
 * 0x5: PCM5
 * 0x6: SSMM (Slimbus/SoundWire Slave Muxing Module)
 * 0x7: CIC Combo
 * 0x8: SWRM0 Soundwire Master (SoundWire Master IP ports 1 (TX) and 6 (RX)).
 * (NOT USED IN D4100s)
 * 0x9: SWRM1 Soundwire Master (SoundWire Master IP ports 2 (TX) and 7 (RX)).
 * (NOT USED IN D4100s)
 * 0xa: SWRM2 Soundwire Master (SoundWire Master IP ports 3 (TX) and 8 (RX)).
 * (NOT USED IN D4100s)
 * 0xb - 0xf: Reserved
 *
 * Field encoding values:
 *   0x0: pcm0
 *   0x1: pcm1
 *   0x2: pcm2
 *   0x3: pcm3
 *   0x4: pcm4
 *   0x5: pcm5
 *   0x6: ssmm
 *   0x7: cic_combo
 *   0x8: swrm0
 *   0x9: swrm1
 *   0xa: swrm2
 */
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_PCM0_VAL 0x0
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_PCM1_VAL 0x1
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_PCM2_VAL 0x2
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_PCM3_VAL 0x3
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_PCM4_VAL 0x4
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_PCM5_VAL 0x5
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_SSMM_VAL 0x6
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_CIC_COMBO_VAL 0x7
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_SWRM0_VAL 0x8
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_SWRM1_VAL 0x9
#define IAXXX_AF_LS_MAP_0_PHY_STR_TYPE_0_SWRM2_VAL 0xa

/*
 * Field encodings for register LS_DEADLINE_0's field SR_FAMILY_0.
 * Sample Rate Family Logical Stream 0.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_0_SR_FAMILY_0_6KHZ_FAMILY_VAL 0x3

/*
 * Field encodings for register LS_DEADLINE_1's field SR_FAMILY_1.
 * Sample Rate Family Logical Stream 1.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_1_SR_FAMILY_1_6KHZ_FAMILY_VAL 0x3

/*
 * Field encodings for register LS_DEADLINE_2's field SR_FAMILY_2.
 * Sample Rate Family Logical Stream 2.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_2_SR_FAMILY_2_6KHZ_FAMILY_VAL 0x3

/*
 * Field encodings for register LS_DEADLINE_3's field SR_FAMILY_3.
 * Sample Rate Family Logical Stream 3.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_3_SR_FAMILY_3_6KHZ_FAMILY_VAL 0x3

/*
 * Field encodings for register LS_DEADLINE_4's field SR_FAMILY_4.
 * Sample Rate Family Logical Stream 4.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_4_SR_FAMILY_4_6KHZ_FAMILY_VAL 0x3

/*
 * Field encodings for register LS_DEADLINE_5's field SR_FAMILY_5.
 * Sample Rate Family Logical Stream 5.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_5_SR_FAMILY_5_6KHZ_FAMILY_VAL 0x3

/*
 * Field encodings for register LS_DEADLINE_6's field SR_FAMILY_6.
 * Sample Rate Family Logical Stream 6.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_6_SR_FAMILY_6_6KHZ_FAMILY_VAL 0x3

/*
 * Field encodings for register LS_DEADLINE_7's field SR_FAMILY_7.
 * Sample Rate Family Logical Stream 7.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_7_SR_FAMILY_7_6KHZ_FAMILY_VAL 0x3

/*
 * Field encodings for register LS_DEADLINE_8's field SR_FAMILY_8.
 * Sample Rate Family Logical Stream 8.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_8_SR_FAMILY_8_6KHZ_FAMILY_VAL 0x3

/*
 * Field encodings for register LS_DEADLINE_9's field SR_FAMILY_9.
 * Sample Rate Family Logical Stream 9.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_9_SR_FAMILY_9_6KHZ_FAMILY_VAL 0x3

/*
 * Field encodings for register LS_DEADLINE_10's field SR_FAMILY_10.
 * Sample Rate Family Logical Stream 10.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_10_SR_FAMILY_10_6KHZ_FAMILY_VAL 0x3

/*
 * Field encodings for register LS_DEADLINE_11's field SR_FAMILY_11.
 * Sample Rate Family Logical Stream 11.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_11_SR_FAMILY_11_6KHZ_FAMILY_VAL 0x3

/*
 * Field encodings for register LS_DEADLINE_12's field SR_FAMILY_12.
 * Sample Rate Family Logical Stream 12.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_12_SR_FAMILY_12_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_12_SR_FAMILY_12_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_12_SR_FAMILY_12_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_12_SR_FAMILY_12_6KHZ_FAMILY_VAL 0x3

/*
 * Field encodings for register LS_DEADLINE_13's field SR_FAMILY_13.
 * Sample Rate Family Logical Stream 13.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_13_SR_FAMILY_13_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_13_SR_FAMILY_13_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_13_SR_FAMILY_13_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_13_SR_FAMILY_13_6KHZ_FAMILY_VAL 0x3

/*
 * Field encodings for register LS_DEADLINE_14's field SR_FAMILY_14.
 * Sample Rate Family Logical Stream 14.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_14_SR_FAMILY_14_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_14_SR_FAMILY_14_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_14_SR_FAMILY_14_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_14_SR_FAMILY_14_6KHZ_FAMILY_VAL 0x3

/*
 * Field encodings for register LS_DEADLINE_15's field SR_FAMILY_15.
 * Sample Rate Family Logical Stream 15.
 * Field encoding values:
 *   0x0: unused_family
 *   0x1: 4khz_family
 *   0x2: 5_5khz_family
 *   0x3: 6khz_family
 */
#define IAXXX_AF_LS_DEADLINE_15_SR_FAMILY_15_UNUSED_FAMILY_VAL 0x0
#define IAXXX_AF_LS_DEADLINE_15_SR_FAMILY_15_4KHZ_FAMILY_VAL 0x1
#define IAXXX_AF_LS_DEADLINE_15_SR_FAMILY_15_5_5KHZ_FAMILY_VAL 0x2
#define IAXXX_AF_LS_DEADLINE_15_SR_FAMILY_15_6KHZ_FAMILY_VAL 0x3

/*
 * Field encodings for register WCPT_SCALE's field VAL.
 * Post NR WCPT Clock Scaling Factor
 * The fields should be programmed according to this table:
 * 00 - Wall Clock is greater than or equal to 24.576 MHz.
 * 01 - Wall Clock is less than 24.546 MHz, but greater than or equal to 12.288
 * MHz.
 * 10 - Wall Clock is less than 12.288 MHz, but greater than or equal to 6.144
 * MHz.
 * 11 - Wall Clock is less than 6.144  MHz, but greater than or equal to 3.0732
 * MHz.
 *
 * Field encoding values:
 *   0x0: grtr_or_eq_to_24_576
 *   0x1: grtr_or_eq_to_12_288
 *   0x2: grtr_or_eq_to_6_144
 *   0x3: grtr_or_eq_to_3_072
 */
#define IAXXX_AF_WCPT_SCALE_VAL_GRTR_OR_EQ_TO_24_576_VAL 0x0
#define IAXXX_AF_WCPT_SCALE_VAL_GRTR_OR_EQ_TO_12_288_VAL 0x1
#define IAXXX_AF_WCPT_SCALE_VAL_GRTR_OR_EQ_TO_6_144_VAL 0x2
#define IAXXX_AF_WCPT_SCALE_VAL_GRTR_OR_EQ_TO_3_072_VAL 0x3

/* Number of registers in the module */
#define IAXXX_AF_REG_NUM 362

#endif /* __IAXXX_REGISTER_DEFS_AF_H__*/
